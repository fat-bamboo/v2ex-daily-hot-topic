[{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1629391393","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1629391393","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":179410,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1629391393","stars":3367,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"username":"DinoStray","website":null,"github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/avatar/f289/f4f3/211021_mini.png?m=1491387981","bio":null,"url":"https://www.v2ex.com/u/DinoStray","tagline":null,"twitter":null,"created":1484554057,"avatar_large":"https://cdn.v2ex.com/avatar/f289/f4f3/211021_mini.png?m=1491387981","avatar_mini":"https://cdn.v2ex.com/avatar/f289/f4f3/211021_mini.png?m=1491387981","location":null,"btc":null,"id":211021},"last_reply_by":"ooee2016","last_touched":1639015390,"title":"北京租房求推荐, 离地铁近就行","url":"https://www.v2ex.com/t/821018","created":1639009320,"deleted":0,"content":"之前一直以公司为核心, 公司在哪儿, 我就在哪儿租房.  \r\n最近开始居家办公了, 公司不提供办公室了.  \r\n就没了主心骨, 不知道该去哪儿租房了.  \r\n位置的话, 因为横竖都居家办公了, 只要便宜就行了.  \r\n最好是能方便去望京.","content_rendered":"<p>之前一直以公司为核心, 公司在哪儿, 我就在哪儿租房.<br/>\n最近开始居家办公了, 公司不提供办公室了.<br/>\n就没了主心骨, 不知道该去哪儿租房了.<br/>\n位置的话, 因为横竖都居家办公了, 只要便宜就行了.<br/>\n最好是能方便去望京.</p>\n","last_modified":1639009712,"replies":16,"id":821018},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/f61d/6947/375_large.png?m=1633234730","name":"go","avatar_normal":"https://cdn.v2ex.com/navatar/f61d/6947/375_normal.png?m=1633234730","title":"Go 编程语言","url":"https://www.v2ex.com/go/go","topics":2083,"footer":"","header":"Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。","title_alternative":"The Go Programming Language","avatar_mini":"https://cdn.v2ex.com/navatar/f61d/6947/375_mini.png?m=1633234730","stars":2944,"aliases":[],"root":false,"id":375,"parent_node_name":"programming"},"member":{"username":"MX123","website":null,"github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/gravatar/5dbc74a7ea4be6f425559141293b4a59?s=24&d=retro","bio":null,"url":"https://www.v2ex.com/u/MX123","tagline":null,"twitter":null,"created":1530092807,"avatar_large":"https://cdn.v2ex.com/gravatar/5dbc74a7ea4be6f425559141293b4a59?s=24&d=retro","avatar_mini":"https://cdn.v2ex.com/gravatar/5dbc74a7ea4be6f425559141293b4a59?s=24&d=retro","location":null,"btc":null,"id":325135},"last_reply_by":"lwch","last_touched":1639015371,"title":"现在不都是前后端分离了吗？为什么 Go 好多开源项目还是前后端一起？是我理解有误吗？","url":"https://www.v2ex.com/t/821031","created":1639014071,"deleted":0,"content":"下面是我在学习的两个项目，好像都是前后端一起的\r\nhttps://github.com/hezhizheng/repo-image-hosting\r\nhttps://github.com/cloudreve/Cloudreve","content_rendered":"<p>下面是我在学习的两个项目，好像都是前后端一起的\n<a href=\"https://github.com/hezhizheng/repo-image-hosting\" rel=\"nofollow\">https://github.com/hezhizheng/repo-image-hosting</a>\n<a href=\"https://github.com/cloudreve/Cloudreve\" rel=\"nofollow\">https://github.com/cloudreve/Cloudreve</a></p>\n","last_modified":1639014071,"replies":12,"id":821031},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/d3d9/4468/10_large.png?m=1630643933","name":"mbp","avatar_normal":"https://cdn.v2ex.com/navatar/d3d9/4468/10_normal.png?m=1630643933","title":"MacBook Pro","url":"https://www.v2ex.com/go/mbp","topics":7650,"footer":"","header":"State-of-the-art processors. All-new graphics. Breakthrough high-speed I/O. Three very big leaps forward.","title_alternative":"MacBook Pro","avatar_mini":"https://cdn.v2ex.com/navatar/d3d9/4468/10_mini.png?m=1630643933","stars":3025,"aliases":[],"root":false,"id":10,"parent_node_name":"apple"},"member":{"username":"muhuan","website":"","github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/gravatar/61aa5d938ee4cfa8da8676fc6e2c36df?s=24&d=retro","bio":"","url":"https://www.v2ex.com/u/muhuan","tagline":"","twitter":null,"created":1577632503,"avatar_large":"https://cdn.v2ex.com/gravatar/61aa5d938ee4cfa8da8676fc6e2c36df?s=24&d=retro","avatar_mini":"https://cdn.v2ex.com/gravatar/61aa5d938ee4cfa8da8676fc6e2c36df?s=24&d=retro","location":"","btc":null,"id":462024},"last_reply_by":"ushio","last_touched":1639015412,"title":"2015 mbp 升级硬盘","url":"https://www.v2ex.com/t/821024","created":1639012537,"deleted":0,"content":"计划把自己 2015 款的 mbp 升级一下硬盘，原有 256G 太小了，准备升级到 1T ，看到很多同学用三星 970 evo 等，淘宝上有卖一些原装副厂的，非原装的发热最大，v 友有更换过的没，求建议","content_rendered":"计划把自己 2015 款的 mbp 升级一下硬盘，原有 256G 太小了，准备升级到 1T ，看到很多同学用三星 970 evo 等，淘宝上有卖一些原装副厂的，非原装的发热最大，v 友有更换过的没，求建议","last_modified":1639012537,"replies":9,"id":821024},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/70ef/df2e/17_large.png?m=1629391403","name":"create","avatar_normal":"https://cdn.v2ex.com/navatar/70ef/df2e/17_normal.png?m=1629391403","title":"分享创造","url":"https://www.v2ex.com/go/create","topics":16998,"footer":"","header":"欢迎你在这里发布自己的最新作品！","title_alternative":"Create","avatar_mini":"https://cdn.v2ex.com/navatar/70ef/df2e/17_mini.png?m=1629391403","stars":4126,"aliases":[],"root":false,"id":17,"parent_node_name":"geek"},"member":{"username":"ihciah","website":"https://www.ihcblog.com","github":"ihciah","psn":"","avatar_normal":"https://cdn.v2ex.com/avatar/5719/62a6/20396_mini.png?m=1450629628","bio":"渣渣一枚\r\n⎛⎝⊙⊙⎠⎞","url":"https://www.v2ex.com/u/ihciah","tagline":"ihc同学@提不起劲","twitter":"","created":1336178447,"avatar_large":"https://cdn.v2ex.com/avatar/5719/62a6/20396_mini.png?m=1450629628","avatar_mini":"https://cdn.v2ex.com/avatar/5719/62a6/20396_mini.png?m=1450629628","location":"ShangHai","btc":"","id":20396},"last_reply_by":"ihciah","last_touched":1639015064,"title":"Monoio: 字节跳动开源 Rust Runtime","url":"https://www.v2ex.com/t/821027","created":1639013406,"deleted":0,"content":"Monoio 是字节跳动服务框架组开源的基于 io-uring 的 thread-per-core 模型高性能 Rust Runtime ，旨在为高性能网络中间件等场景提供必要的运行时。\r\n\r\n项目仓库: https://github.com/bytedance/monoio\r\n\r\n## 背景\r\n\r\n过去，高性能网络中间件或服务器往往使用 C/C++ 编写，比如我们常见的 Envoy 和 Nginx 。它们往往以非常直接的方式和操作系统交互，并且得益于没有垃圾收集机制，相比有 GC 的语言（如 Golang 和 Java ），额外开销十分低，延迟稳定。\r\n\r\n但是开发这类组件对开发者的专业水平有较高的要求，编程范式上对开发者心智负担巨大，稍有不慎就会造成非预期的后果。举例来说，在 C++ 中要完成一次异步的网络请求，需要将整个流程按照异步点拆分成独立的纯同步函数，并以 callback 的形式将其串联——这一来大大降低了其可读性，二来状态转换和管理容易出错；并且对变量生命周期需要精细管理，否则就会出现悬垂指针等内存问题。\r\n\r\n为什么不试试神奇的 Rust 呢？ Rust 语言通过引入所有权模型，在不引入垃圾回收的情况下保证了内存安全；并且通过语言内置的异步抽象，支持了 `async + await` 的异步编程模式。使用一个优秀的 Runtime ，即可像写 Golang 一样流畅地在 Rust 中平铺直叙地写异步代码——而性能并不输于 C++。\r\n\r\n## Rust Runtime 与 thread-per-core 模型\r\n\r\n与 Golang 不同，Rust 语言中标准库并没有提供异步运行时(Runtime)，只提供了必要的结构抽象。Runtime 负责与操作系统打交道，并对齐标准库的 Future 和 Waker 等定义，用户可以自主选择 Runtime 。\r\n\r\n当前被广泛使用的 Runtime 是 Tokio ，它提供了类似 Golang 调度器的实现，用户的 Task 可以在多个线程之间被调度，较为有效地利用了多核心的性能。\r\n\r\n但问题也随之而来：在部分强依赖高性能低延迟的场景下，调度带来的开销反而是用户不希望看到的。在核心数较多的情况下，调度开销反而会抵消调度带来的好处。\r\n\r\nNginx 和 Envoy 这类组件往往使用 thread-per-core 模型，即多少核心就运行多少线程，一个任务一旦被一个线程所接收，它后续的处理则都在该线程上。这种做法下几乎没有跨线程的开销，提升了 CPU 利用率，可以较好地保持系统的线性扩展性。此外，由于没有跨线程，处理逻辑也可以尽可能地利用 thread local 的便利，多数时候无需加锁便可操作共享数据。\r\n\r\n面向这类场景，Monoio 基于 io-uring 致力于提供最佳的性能；另外，我们还定义了一个更适合 io-uring 的 IO trait 。\r\n\r\n## 性能\r\n\r\n![monoio-bench-100B.png]( https://i.v2ex.co/uQZfTyf6.png)\r\n\r\n![monoio-bench-1C-250conn-qps.png]( https://i.v2ex.co/6F0JXGZj.png)\r\n\r\n我们对比了 Monoio 、Tokio 和 Glommio （另一个类似的 Runtime ，但在性能目标上不如 Monoio 激进）。\r\n\r\n在绝大多数测试中，Monoio 都具有更低的延迟和更高的吞吐。对比 Tokio ，在多核场景下 Monoio 可以提供 2 到 3 倍的性能提升（原因主要在于模型上，没有了跨线程同步开销）；而对比 Glommio ，我们可以在降低延迟的同时，节省约 1/4 到 1/3 的 CPU 占用（性能提升在于更优的调度实现，io-uring 批量 submit ）。\r\n\r\n更进一步的测试报告和设计上的权衡在 Github Repo 中有详细的文档。\r\n\r\n另外，我们还对比了生产中使用的(epoll based) Nginx ，在 Proxy 场景下基于 Monoio 写的 TCP 代理可以获得差不多的性能（连接数较多时 Monoio 性能优于 Nginx ，较少时差于 Nginx ，数据整体上差不多）。与 Envoy 的 TCP Proxy 对比也表明 Monoio 有非常明显的性能优势。\r\n\r\n## 结语\r\nMonoio 提供了 thread-per-core 场景下最高性能的 Runtime 实现。我们的目标是能够让 Rust 在高性能场景下成为替换 C/C++ 的更好选择。目前字节已经开始基于 Rust 和 Monoio 构建下一代 Service Mesh 。\r\n\r\n当然，没有什么 Runtime 是绝对最佳的选择，Runtime 的选型还是要根据具体的业务场景来。希望我们的 Monoio 可以给某些场景用户多一种选择。\r\n\r\n在 Monoio 的设计和实现中我们大量参考了 Tokio 等同类产品，感谢这些项目的贡献者；也希望 Monoio 能够在大家的共同努力下变得更加完善更加易用。\r\n\r\n## 参考资料\r\n另外，在开发过程中我也总结了一些东西，写成了几篇博客，感兴趣可以看这里：[Rust Runtime 设计与实现]( https://www.ihcblog.com/rust-runtime-design-1/)。","content_rendered":"<p>Monoio 是字节跳动服务框架组开源的基于 io-uring 的 thread-per-core 模型高性能 Rust Runtime ，旨在为高性能网络中间件等场景提供必要的运行时。</p>\n<p>项目仓库: <a href=\"https://github.com/bytedance/monoio\" rel=\"nofollow\">https://github.com/bytedance/monoio</a></p>\n<h2>背景</h2>\n<p>过去，高性能网络中间件或服务器往往使用 C/C++ 编写，比如我们常见的 Envoy 和 Nginx 。它们往往以非常直接的方式和操作系统交互，并且得益于没有垃圾收集机制，相比有 GC 的语言（如 Golang 和 Java ），额外开销十分低，延迟稳定。</p>\n<p>但是开发这类组件对开发者的专业水平有较高的要求，编程范式上对开发者心智负担巨大，稍有不慎就会造成非预期的后果。举例来说，在 C++ 中要完成一次异步的网络请求，需要将整个流程按照异步点拆分成独立的纯同步函数，并以 callback 的形式将其串联——这一来大大降低了其可读性，二来状态转换和管理容易出错；并且对变量生命周期需要精细管理，否则就会出现悬垂指针等内存问题。</p>\n<p>为什么不试试神奇的 Rust 呢？ Rust 语言通过引入所有权模型，在不引入垃圾回收的情况下保证了内存安全；并且通过语言内置的异步抽象，支持了 <code>async + await</code> 的异步编程模式。使用一个优秀的 Runtime ，即可像写 Golang 一样流畅地在 Rust 中平铺直叙地写异步代码——而性能并不输于 C++。</p>\n<h2>Rust Runtime 与 thread-per-core 模型</h2>\n<p>与 Golang 不同，Rust 语言中标准库并没有提供异步运行时(Runtime)，只提供了必要的结构抽象。Runtime 负责与操作系统打交道，并对齐标准库的 Future 和 Waker 等定义，用户可以自主选择 Runtime 。</p>\n<p>当前被广泛使用的 Runtime 是 Tokio ，它提供了类似 Golang 调度器的实现，用户的 Task 可以在多个线程之间被调度，较为有效地利用了多核心的性能。</p>\n<p>但问题也随之而来：在部分强依赖高性能低延迟的场景下，调度带来的开销反而是用户不希望看到的。在核心数较多的情况下，调度开销反而会抵消调度带来的好处。</p>\n<p>Nginx 和 Envoy 这类组件往往使用 thread-per-core 模型，即多少核心就运行多少线程，一个任务一旦被一个线程所接收，它后续的处理则都在该线程上。这种做法下几乎没有跨线程的开销，提升了 CPU 利用率，可以较好地保持系统的线性扩展性。此外，由于没有跨线程，处理逻辑也可以尽可能地利用 thread local 的便利，多数时候无需加锁便可操作共享数据。</p>\n<p>面向这类场景，Monoio 基于 io-uring 致力于提供最佳的性能；另外，我们还定义了一个更适合 io-uring 的 IO trait 。</p>\n<h2>性能</h2>\n<p><img alt=\"monoio-bench-100B.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.v2ex.co/uQZfTyf6.png\"/></p>\n<p><img alt=\"monoio-bench-1C-250conn-qps.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.v2ex.co/6F0JXGZj.png\"/></p>\n<p>我们对比了 Monoio 、Tokio 和 Glommio （另一个类似的 Runtime ，但在性能目标上不如 Monoio 激进）。</p>\n<p>在绝大多数测试中，Monoio 都具有更低的延迟和更高的吞吐。对比 Tokio ，在多核场景下 Monoio 可以提供 2 到 3 倍的性能提升（原因主要在于模型上，没有了跨线程同步开销）；而对比 Glommio ，我们可以在降低延迟的同时，节省约 1/4 到 1/3 的 CPU 占用（性能提升在于更优的调度实现，io-uring 批量 submit ）。</p>\n<p>更进一步的测试报告和设计上的权衡在 Github Repo 中有详细的文档。</p>\n<p>另外，我们还对比了生产中使用的(epoll based) Nginx ，在 Proxy 场景下基于 Monoio 写的 TCP 代理可以获得差不多的性能（连接数较多时 Monoio 性能优于 Nginx ，较少时差于 Nginx ，数据整体上差不多）。与 Envoy 的 TCP Proxy 对比也表明 Monoio 有非常明显的性能优势。</p>\n<h2>结语</h2>\n<p>Monoio 提供了 thread-per-core 场景下最高性能的 Runtime 实现。我们的目标是能够让 Rust 在高性能场景下成为替换 C/C++ 的更好选择。目前字节已经开始基于 Rust 和 Monoio 构建下一代 Service Mesh 。</p>\n<p>当然，没有什么 Runtime 是绝对最佳的选择，Runtime 的选型还是要根据具体的业务场景来。希望我们的 Monoio 可以给某些场景用户多一种选择。</p>\n<p>在 Monoio 的设计和实现中我们大量参考了 Tokio 等同类产品，感谢这些项目的贡献者；也希望 Monoio 能够在大家的共同努力下变得更加完善更加易用。</p>\n<h2>参考资料</h2>\n<p>另外，在开发过程中我也总结了一些东西，写成了几篇博客，感兴趣可以看这里：<a href=\"https://www.ihcblog.com/rust-runtime-design-1/\" rel=\"nofollow\">Rust Runtime 设计与实现</a>。</p>\n","last_modified":1639013406,"replies":8,"id":821027}]