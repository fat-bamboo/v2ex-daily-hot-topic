[{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_large.png?m=1649080598","name":"macos","avatar_normal":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_normal.png?m=1649080598","title":"macOS","url":"https://www.v2ex.com/go/macos","topics":19303,"footer":"<a href=\"/mbp\">MacBook Pro</a> 及 <a href=\"/go/imac\">iMac</a> 等 <a href=\"/go/apple\">Apple</a> 公司设计的计算机所运行的操作系统。<a href=\"/go/idev\">iOS</a> 的基础。","header":"The world’s most advanced desktop operating system.","title_alternative":"macOS","avatar_mini":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_mini.png?m=1649080598","stars":4752,"aliases":[],"root":false,"id":22,"parent_node_name":"os"},"member":{"id":331101,"username":"xiaomingVTEX","url":"https://www.v2ex.com/u/xiaomingVTEX","website":"52liming.com","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"在你提出疑问的时候, 或许心里已经有了答案","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/7475/1338/331101_mini.png?m=1667433792","avatar_normal":"https://cdn.v2ex.com/avatar/7475/1338/331101_normal.png?m=1667433792","avatar_large":"https://cdn.v2ex.com/avatar/7475/1338/331101_large.png?m=1667433792","created":1532322854,"last_modified":1667433792},"last_reply_by":"xz410236056","last_touched":1667440694,"title":"你们收到 ToDesk 的会员弹窗广告了吗？","url":"https://www.v2ex.com/t/892263","created":1667434542,"deleted":0,"content":"今天刚回来一打开电脑就发现了一个广告弹窗，一看发现是 ToDesk 的会员推广弹窗\r\n\r\n[![xblmMn.jpg]( https://s1.ax1x.com/2022/11/03/xblmMn.jpg)]( https://imgse.com/i/xblmMn)\r\n\r\n你们还遇到别的软件有弹窗广告吗？","content_rendered":"<p>今天刚回来一打开电脑就发现了一个广告弹窗，一看发现是 ToDesk 的会员推广弹窗</p>\n<p><a href=\"https://imgse.com/i/xblmMn\" rel=\"nofollow\"><img alt=\"xblmMn.jpg\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s1.ax1x.com/2022/11/03/xblmMn.jpg\"/></a></p>\n<p>你们还遇到别的软件有弹窗广告吗？</p>\n","last_modified":1667434542,"replies":33,"id":892263},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/3c59/dc04/21_large.png?m=1650127623","name":"shenzhen","avatar_normal":"https://cdn.v2ex.com/navatar/3c59/dc04/21_normal.png?m=1650127623","title":"深圳","url":"https://www.v2ex.com/go/shenzhen","topics":2565,"footer":"","header":"","title_alternative":"Shenzhen","avatar_mini":"https://cdn.v2ex.com/navatar/3c59/dc04/21_mini.png?m=1650127623","stars":1726,"aliases":[],"root":false,"id":21,"parent_node_name":"cn"},"member":{"id":536734,"username":"MrCsharp","url":"https://www.v2ex.com/u/MrCsharp","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/gravatar/6778790d1537961b63a7829b0aeabd65?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/6778790d1537961b63a7829b0aeabd65?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/6778790d1537961b63a7829b0aeabd65?s=73&d=retro","created":1615268272,"last_modified":1615268272},"last_reply_by":"bk201","last_touched":1667441040,"title":"你们坐公交车遇到过这样的女的吗？","url":"https://www.v2ex.com/t/892283","created":1667439071,"deleted":0,"content":"今早坐公交，到某个站时有座位了，我就找个座位要坐，座位旁边的女的一看我坐下就拿起东西要换座位。说明一下，本人装扮整齐、身上无异味。我不知道 ta 什么心态，或者是有什么应激类的病症，反正我觉得有点恶心。\r\n\r\n在我坐这个座位之前，ta 就有东西掉地上了。ta 换座位发现了，竟然对我说：“你好”，我不知道 ta 是想我帮 ta 捡还是怎么样，我挪动脚让 ta 捡了。现在回想下，我不应该挪动脚的，小气一点。\r\n\r\n可能有人想，ta 换座位是方便下车，但我到站后 ta 都还没下车。\r\n\r\n总结：以后坐公交，我也不太敢坐在女的旁边了（以前也坐过女的旁边，没发生过这样的事）。","content_rendered":"<p>今早坐公交，到某个站时有座位了，我就找个座位要坐，座位旁边的女的一看我坐下就拿起东西要换座位。说明一下，本人装扮整齐、身上无异味。我不知道 ta 什么心态，或者是有什么应激类的病症，反正我觉得有点恶心。</p>\n<p>在我坐这个座位之前，ta 就有东西掉地上了。ta 换座位发现了，竟然对我说：“你好”，我不知道 ta 是想我帮 ta 捡还是怎么样，我挪动脚让 ta 捡了。现在回想下，我不应该挪动脚的，小气一点。</p>\n<p>可能有人想，ta 换座位是方便下车，但我到站后 ta 都还没下车。</p>\n<p>总结：以后坐公交，我也不太敢坐在女的旁边了（以前也坐过女的旁边，没发生过这样的事）。</p>\n","last_modified":1667439071,"replies":31,"id":892283},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c74d/97b0/16_large.png?m=1650127281","name":"share","avatar_normal":"https://cdn.v2ex.com/navatar/c74d/97b0/16_normal.png?m=1650127281","title":"分享发现","url":"https://www.v2ex.com/go/share","topics":36577,"footer":"","header":"分享你看到的好玩的，有信息量的，欢迎从这里获取灵感。","title_alternative":"Share","avatar_mini":"https://cdn.v2ex.com/navatar/c74d/97b0/16_mini.png?m=1650127281","stars":5047,"aliases":[],"root":false,"id":16,"parent_node_name":"v2ex"},"member":{"id":344778,"username":"Tumblr","url":"https://www.v2ex.com/u/Tumblr","website":"https://www.tumblr.com","twitter":"tumblr","psn":"","github":"tumblr","btc":"","location":"New York City","tagline":"Come for what you love, stay for what you discover.","bio":"A microblogging and social networking website founded by David Karp in 2007, and owned by Oath Inc.","avatar_mini":"https://cdn.v2ex.com/avatar/3122/ad46/344778_mini.png?m=1640345029","avatar_normal":"https://cdn.v2ex.com/avatar/3122/ad46/344778_normal.png?m=1640345029","avatar_large":"https://cdn.v2ex.com/avatar/3122/ad46/344778_large.png?m=1640345029","created":1535382604,"last_modified":1640345029},"last_reply_by":"VYSE","last_touched":1667440793,"title":"没错，你想要的那个 Tumblr 回来了！","url":"https://www.v2ex.com/t/892281","created":1667438888,"deleted":0,"content":"我们最近向大家介绍了社区标签，基于这一功能，你可以根据你之所想调整你的订阅，这是我们向一个更开放的 Tumblr 迈出的第一步。  \r\n\r\n今天，我们想再进一步： 我们现在欢迎更为宽容的表达、创造和艺术，包括描绘人体的内容（没错，包括涩涩的人体）。  \r\n\r\n因此，如果你的创造包含了光光的身子、大人的事情或者涩涩的主题，你现在可以在 Tumblr 上分享了，当然，要用合适的社区标签。","content_rendered":"<p>我们最近向大家介绍了社区标签，基于这一功能，你可以根据你之所想调整你的订阅，这是我们向一个更开放的 Tumblr 迈出的第一步。  </p>\n<p>今天，我们想再进一步： 我们现在欢迎更为宽容的表达、创造和艺术，包括描绘人体的内容（没错，包括涩涩的人体）。  </p>\n<p>因此，如果你的创造包含了光光的身子、大人的事情或者涩涩的主题，你现在可以在 Tumblr 上分享了，当然，要用合适的社区标签。</p>\n","last_modified":1667438888,"replies":19,"id":892281},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1659331259","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1659331259","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":51705,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1659331259","stars":8055,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"id":594345,"username":"x1024m","url":"https://www.v2ex.com/u/x1024m","website":"","twitter":null,"psn":null,"github":null,"btc":null,"location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/9189/6714/594345_mini.png?m=1665677166","avatar_normal":"https://cdn.v2ex.com/avatar/9189/6714/594345_normal.png?m=1665677166","avatar_large":"https://cdn.v2ex.com/avatar/9189/6714/594345_large.png?m=1665677166","avatar_xlarge":"https://cdn.v2ex.com/avatar/9189/6714/594345_xlarge.png?m=1665677166","avatar_xxlarge":"https://cdn.v2ex.com/avatar/9189/6714/594345_xlarge.png?m=1665677166","created":1663169689,"last_modified":1665677166},"last_reply_by":"janus77","last_touched":1667440965,"title":"大学邮箱被拉入 jetbrain 黑名单，怎么破","url":"https://www.v2ex.com/t/892287","created":1667439626,"deleted":0,"content":"黑名单：\r\nhttps://github.com/JetBrains/swot/blob/master/lib/domains/stoplist.txt","content_rendered":"<p>黑名单：\n<a href=\"https://github.com/JetBrains/swot/blob/master/lib/domains/stoplist.txt\" rel=\"nofollow\">https://github.com/JetBrains/swot/blob/master/lib/domains/stoplist.txt</a></p>\n","last_modified":1667439626,"replies":18,"id":892287},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1630643913","name":"apple","avatar_normal":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1630643913","title":"Apple","url":"https://www.v2ex.com/go/apple","topics":20466,"footer":"","header":"设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。","title_alternative":"Apple","avatar_mini":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1630643913","stars":2385,"aliases":[],"root":false,"id":184,"parent_node_name":"hardware"},"member":{"id":385291,"username":"liuzhihang","url":"https://www.v2ex.com/u/liuzhihang","website":"liuzhihang.com","twitter":"","psn":"","github":"liuzhihang","btc":"","location":"beijing","tagline":"","bio":"公众号： 『 程序员小航 』","avatar_mini":"https://cdn.v2ex.com/avatar/f089/e1bc/385291_mini.png?m=1641298792","avatar_normal":"https://cdn.v2ex.com/avatar/f089/e1bc/385291_normal.png?m=1641298792","avatar_large":"https://cdn.v2ex.com/avatar/f089/e1bc/385291_large.png?m=1641298792","avatar_xlarge":"https://cdn.v2ex.com/avatar/f089/e1bc/385291_xlarge.png?m=1641298792","avatar_xxlarge":"https://cdn.v2ex.com/avatar/f089/e1bc/385291_xlarge.png?m=1641298792","avatar_xxxlarge":"https://cdn.v2ex.com/avatar/f089/e1bc/385291_xlarge.png?m=1641298792","created":1550567619,"last_modified":1641298792},"last_reply_by":"FanError","last_touched":1667440467,"title":"今年是不是大概率没有 Mac mini 了","url":"https://www.v2ex.com/t/892266","created":1667436071,"deleted":0,"content":"从当前的消息来看，都在说没有 Mac mini 发布了，等等党终究还是失败了。\r\n\r\n大家认为这个月还有没有可能发布？还是现在考虑入手 Studio ？","content_rendered":"<p>从当前的消息来看，都在说没有 Mac mini 发布了，等等党终究还是失败了。</p>\n<p>大家认为这个月还有没有可能发布？还是现在考虑入手 Studio ？</p>\n","last_modified":1667436071,"replies":17,"id":892266},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1659331259","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1659331259","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":51705,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1659331259","stars":8055,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"id":494201,"username":"fxjson","url":"https://www.v2ex.com/u/fxjson","website":"www.fxjson.com","twitter":null,"psn":null,"github":null,"btc":null,"location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/gravatar/3699e3a269b5b051942d2e082a8b2ab2?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/3699e3a269b5b051942d2e082a8b2ab2?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/3699e3a269b5b051942d2e082a8b2ab2?s=73&d=retro","created":1591787530,"last_modified":1651548114},"last_reply_by":"BQsummer","last_touched":1667412068,"title":"大家工作中用 jedis 多还是 lettue 多","url":"https://www.v2ex.com/t/892262","created":1667433728,"deleted":0,"content":"","content_rendered":"","last_modified":1667433728,"replies":12,"id":892262},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/03af/dbd6/63_large.png?m=1644490200","name":"java","avatar_normal":"https://cdn.v2ex.com/navatar/03af/dbd6/63_normal.png?m=1644490200","title":"Java","url":"https://www.v2ex.com/go/java","topics":5193,"footer":"","header":"Sun 公司发明，被广泛使用的一门编程语言。","title_alternative":"Java","avatar_mini":"https://cdn.v2ex.com/navatar/03af/dbd6/63_mini.png?m=1644490200","stars":5099,"aliases":[],"root":false,"id":63,"parent_node_name":"programming"},"member":{"id":593619,"username":"machen","url":"https://www.v2ex.com/u/machen","website":"https://hippo4j.cn","twitter":"","psn":"","github":"magegoofy","btc":"","location":"","tagline":"","bio":"Apache ShardingSphere Committer, Maintainer of https://hippo4j.cn","avatar_mini":"https://cdn.v2ex.com/avatar/ffc9/7dab/593619_mini.png?m=1663305070","avatar_normal":"https://cdn.v2ex.com/avatar/ffc9/7dab/593619_normal.png?m=1663305070","avatar_large":"https://cdn.v2ex.com/avatar/ffc9/7dab/593619_large.png?m=1663305070","avatar_xlarge":"https://cdn.v2ex.com/avatar/ffc9/7dab/593619_xlarge.png?m=1663305070","avatar_xxlarge":"https://cdn.v2ex.com/avatar/ffc9/7dab/593619_xlarge.png?m=1663305070","avatar_xxxlarge":"https://cdn.v2ex.com/avatar/ffc9/7dab/593619_xlarge.png?m=1663305070","created":1662461827,"last_modified":1663305070},"last_reply_by":"Createsequence","last_touched":1667440893,"title":"马上周末，聊聊动态线程池的 9 个场景","url":"https://www.v2ex.com/t/892271","created":1667436958,"deleted":0,"content":"线程池是一种基于 **池化思想管理线程** 的工具，使用线程池可以减少 **创建销毁线程的开销**，避免线程过多导致 **系统资源耗尽**。在 **高并发以及大批量** 的任务处理场景，线程池的使用是必不可少的。\r\n\r\n如果有在项目中实际使用线程池，相信你可能会遇到以下痛点：\r\n\r\n1. 线程池随便定义，线程资源过多，造成服务器高负载。\r\n2. 线程池参数不易评估，随着业务的并发提升，业务面临出现故障的风险。\r\n3. 线程池任务执行时间超过平均执行周期，开发人员无法感知。\r\n4. 线程池任务堆积，触发拒绝策略，影响既有业务正常运行。\r\n5. 当业务出现超时、熔断等问题时，因为没有监控，无法确定是不是线程池引起。\r\n6. 原生线程池不支持运行时变量的传递，比如 MDC 上下文遇到线程池就 GG 。\r\n7. 无法执行优雅关闭，当项目关闭时，大量正在运行的线程池任务被丢弃。\r\n8. 线程池运行中，任务执行停止，怀疑发生死锁或执行耗时操作，但是无从下手。\r\n\r\n基于以上诸多痛点，小马哥着手 hippo4j 的开发，致力于打造标准线程池 **动态变更** 和 **监控** 的中间件框架。\r\n\r\nGitHub：[https://github.com/opengoofy/hippo4j]( https://github.com/opengoofy/hippo4j)\r\n\r\nGitee：[https://gitee.com/magegoofy/hippo4j]( https://gitee.com/magegoofy/hippo4j)\r\n\r\n## 什么是 hippo4j\r\n\r\nhippo4j 通过对 JDK ThreadPoolExecutor 线程池增强，以及扩展三方框架底层线程池等功能，为业务系统提高线上运行保障能力。\r\n\r\n![]( https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824120618077.png)\r\n\r\n小贴士：hippo4j 不止于 Java ThreadPoolExecutor 的增强，`Dubbo`、`RabbitMQ`、`RocketMQ`、`Hystrix`、`Tomcat`、`Jetty`、`Undertow` 等框架线程池也都有进行监控和动态变更。\r\n\r\n## 什么场景适合用 hippo4j\r\n\r\n### 1. 线程池随意定义，造成服务器高负载\r\n\r\n在系统开发的过程中，因为涉及到多人协作，难免会出现信息不互通的情况。在同一个系统，对于线程池来说，常见的是线程池随意定义。\r\n\r\n- 开发者张三要记录用户操作日志，定义了 `user-log-record-thread-pool`；\r\n- 开发者李四要记录会员操作日志，定义了 `member-log-record-thread-pool`；\r\n- 开发者王五要记录权限操作日志，定义了 `power-log-record-thread-pool`；\r\n- ……\r\n\r\n随着系统不断开发，相同或不同语义的线程池被定义的越来越多，间接导致服务器资源严重耗损。\r\n\r\n而如果系统中使用 hippo4j ，能够在控制台查看当前应用已有线程池，是否存在相同语义且业务可复用线程池实例，避免线程资源过度浪费。\r\n\r\n![]( https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220823090803222.png)\r\n\r\n### 2. 线程池参数不易评估\r\n\r\n业务中使用了线程池，十个程序员可能有九个都在犯嘀咕，这线程池的配置应该如何选择？\r\n\r\n我觉得犯纠结的点主要有两个，无外乎设置的数多了或者少了。\r\n\r\n1. 如果预设的线程数或阻塞队列数量少了，当业务量上来，会遇到两种情况，不管哪一种对业务来说都是不能接受的。\r\n    1. 预估 200ms 执行完的任务，可能会 2s 执行完，因为任务都在排队。\r\n    2. 任务满了后，开始执行拒绝策略，影响正常业务。\r\n2. 如果超量设置线程池的参数，无疑会造成资源浪费，同样会造成两种情况。\r\n    1. 线程资源也是占用服务器资源的，开启的多了对服务器有一定压力。\r\n    2. 如果过多的创建线程，当和其它线程池一起执行时，服务器 CPU 上下文切换也是个问题。\r\n\r\n大家都知道，如果要修改运行中应用线程池参数，需要停止线上应用，调整成功后再发布，而这个过程异常的繁琐，如果能在运行中动态调整线程池的参数多好。\r\n\r\n美团技术团队基于这些痛点，推出了动态线程池的概念，催生了一批动态线程池框架，hippo4j 也是其一。\r\n\r\n![]( https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824085936059.png)\r\n\r\n如果应用是集群部署，hippo4j 可以选择修改线程池 **某一实例**，或者修改 **集群全部实例**，运行时生效，不需要再重启服务。\r\n\r\n![]( https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824194529142.png)\r\n\r\n再比如，压测时使用 hippo4j 动态调整线程池参数，对于开发测试来说，也是个不错的选择。\r\n\r\n![]( https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824121410808.png)\r\n\r\n### 3. 线程池运行时报警策略\r\n\r\n从线程池运行时监控的角度出发，hippo4j 内置 4 种报警策略，线程池活跃度、阻塞队列容量、拒绝策略触发以及任务运行超时报警。\r\n\r\n- 线程池活跃度：假设阈值设置 80%，线程池最大线程数 10 ，当线程数达到 8 发起报警。\r\n- 阻塞队列容量：假设阈值设置 80%，阻塞队列容量 100 ，当容量达到 80 发起报警。\r\n- 触发拒绝策略：当线程池任务触发了拒绝策略时，发起拒绝策略报警。\r\n- 任务运行超时：假设单个任务超时为 1000ms ，任务执行超过该时间发起报警。\r\n\r\nhippo4j 支持钉钉、企业微信和飞书软件通知，线程池任务运行超时报警示例：\r\n\r\n![]( https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220823201756259.png)\r\n\r\n### 4. 线程池运行时状态对开发者黑盒\r\n\r\n线程池在服务运行过程中，对开发者来说是一个完全的黑盒。开发者无法得知线程池的参数变化，比如阻塞队列数量或者完成任务数等核心参数，这对于排查问题来说并不友好。\r\n\r\nhippo4j 支持线程池运行时状态实时查看，并在核心参数的基础上扩展了 **负载、内存以及拒绝次数** 等关键指标，每次查询返回线程池当前运行信息。\r\n\r\n![]( https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220823203255306.png)\r\n\r\n### 5. 线程池监控\r\n\r\nhippo4j 提供了两种线程池运行时数据监控方式，分别是：\r\n\r\n1 、内置数据池数据采集 + 监控，无需依赖任何中间件，由 hippo4j 内部集成的方式运行。\r\n\r\n![]( https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824195333056.png)\r\n\r\n2 、使用三方中间件 Prometheus + Grafana 或 ElasticSearch + Grafana 采集和监控。\r\n\r\n![]( https://images-machen.oss-cn-beijing.aliyuncs.com/20220814_hippo4j_monitor.jpg)\r\n\r\n### 6. 整合 Spring ThreadPoolTaskExecutor\r\n\r\nSpring `ThreadPoolTaskExecutor` 对原生线程池扩展了一部分功能，我认为比较实用有两个，并且 hippo4j 也已经支持。\r\n\r\n1. 当服务停止时，通知线程池处理剩余任务，并在等待指定时间后强制停止。\r\n2. 传递线程上下文到线程池执行上下文中。\r\n\r\n第一个是实际使用中很核心的功能，减少了线程池丢弃任务的可能，这里重点说明下。\r\n\r\n我们平时在停止应用时，有没有这样一个考虑，线程池中的任务真的都执行完成了吗？\r\n\r\n**可能执行完了，可能没有**。\r\n\r\nSpring 基于以上考虑，注册了线程池销毁方法。在应用关闭时，如果发现线程池存在任务没有执行完，需要等待一个指定时间。指定时间内任务执行如果执行完毕，皆大欢喜；如果还存在没有结束的任务，则丢弃。\r\n\r\n为什么会丢弃任务而不是再等等？\r\n\r\n因为如果线程池任务长时间执行，**会影响整个应用的停止**，进行了折中处理。\r\n\r\n### 7. 三方框架中间件线程池适配\r\n\r\nhippo4j 的目标是兼容所有框架的线程池，并可以提供监控和动态修改的能力。\r\n\r\n目前已支持的三方框架线程池列表：\r\n\r\n- Apache Dubbo\r\n- Alibaba Dubbo\r\n- RabbitMQ\r\n- Apache RocketMQ\r\n- SpringCloud Stream RocketMQ\r\n- SpringCloud Hystrix\r\n- Tomcat\r\n- Jetty\r\n- Undertow\r\n\r\n支持上述框架线程池的动态变更参数和监控功能，比如：\r\n\r\n![]( https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824203003245.png)\r\n\r\n未来 hippo4j 会支持更多三方框架线程池，如果你有好的想法也可以和我沟通。\r\n\r\n### 8. 线程池运行堆栈查看\r\n\r\n线程池运行中，任务运行停止，怀疑发生死锁或执行耗时操作。大多数程序员会选择使用命令或者 arthas 查看线程池运行中线程的堆栈，看看其中的 Worker 都在哪个方法卡住了。\r\n\r\nhippo4j 基于以上痛点，推出了线程池运行堆栈实时查看功能。\r\n\r\n![]( https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824082031279.png)\r\n\r\n### 9. 动态线程池对性能有无影响\r\n\r\n这可能是很多开发者担心的一个点，在这里统一回复下。\r\n\r\nhippo4j 仅对线程池做部分核心功能增强，没有修改任务执行源代码流程，可以保证绝对的安全。\r\n\r\n其次，hippo4j 上述的功能，都是与线程池执行任务主流程外扩展的，不会影响线程池正常的执行性能。\r\n\r\n## hippo4j 支持的两种运行模式\r\n\r\nhippo4j 为用户提供了两种运行模式，分别是轻量级的配置中心接入，和功能更齐全的服务端接入，下面都来说说各自的优缺点。\r\n\r\n### 1. hippo4j config\r\n\r\n依赖配置中心完成线程池的动态变更，已支持的配置中心有：Nacos 、Apollo 、Zookeeper ，未来还会接入 Etcd 、Consul 等。\r\n\r\n另外，hippo4j 已支持用户自定义配置中心实现，如果使用公司自研或其它配置中心，也可以极小工作量进行引入。\r\n\r\n使用 hippo4j config 模式的优点和不足：\r\n\r\n1. 优点：轻量级引入，可以根据项目中已有配置中心进行 hippo4j 的集成，无需引入其它服务，即可使用线程池参数动态化、运行时监控、报警等核心功能。\r\n2. 不足：缺少可视化控制台页面，上文中描述的诸多功能不能使用。\r\n\r\n### 2. hippo4j server\r\n\r\n需要部署 hippo4j Jar 包，涵盖上文中描述的所有功能。\r\n\r\n因为服务端内部实现了配置中心和注册中心（参考 nacos 和 eureka 实现），所以它不依赖任何三方中间件。\r\n\r\n1. 优点：功能齐备，可以享受更多的服务和便利。如果应用启动的是集群，可以指定其中某一个实例的线程池修改，而 config 则是整个集群变更。\r\n2. 不足：相比较 hippo4j config ，需要额外部署一个 jar 包，增加了部署工作量。\r\n\r\n如果最初使用 hippo4j config ，想要切换到 server ，两者在进行替换的时候，**无需修改业务代码**。\r\n\r\n使用建议：根据公司情况选择，如果基本功能可以满足使用，选择 hippo4j config 使用即可；如果希望更多的功能，可以选择 hippo4j server 。\r\n\r\n## 文末结语\r\n\r\n如果觉得有用，麻烦各位大佬在以下两个平台 star 支持下，非常感谢～\r\n\r\nGitHub：[https://github.com/opengoofy/hippo4j]( https://github.com/opengoofy/hippo4j)\r\n\r\nGitee：[https://gitee.com/magegoofy/hippo4j]( https://gitee.com/magegoofy/hippo4j)","content_rendered":"<p>线程池是一种基于 <strong>池化思想管理线程</strong> 的工具，使用线程池可以减少 <strong>创建销毁线程的开销</strong>，避免线程过多导致 <strong>系统资源耗尽</strong>。在 <strong>高并发以及大批量</strong> 的任务处理场景，线程池的使用是必不可少的。</p>\n<p>如果有在项目中实际使用线程池，相信你可能会遇到以下痛点：</p>\n<ol>\n<li>线程池随便定义，线程资源过多，造成服务器高负载。</li>\n<li>线程池参数不易评估，随着业务的并发提升，业务面临出现故障的风险。</li>\n<li>线程池任务执行时间超过平均执行周期，开发人员无法感知。</li>\n<li>线程池任务堆积，触发拒绝策略，影响既有业务正常运行。</li>\n<li>当业务出现超时、熔断等问题时，因为没有监控，无法确定是不是线程池引起。</li>\n<li>原生线程池不支持运行时变量的传递，比如 MDC 上下文遇到线程池就 GG 。</li>\n<li>无法执行优雅关闭，当项目关闭时，大量正在运行的线程池任务被丢弃。</li>\n<li>线程池运行中，任务执行停止，怀疑发生死锁或执行耗时操作，但是无从下手。</li>\n</ol>\n<p>基于以上诸多痛点，小马哥着手 hippo4j 的开发，致力于打造标准线程池 <strong>动态变更</strong> 和 <strong>监控</strong> 的中间件框架。</p>\n<p>GitHub：<a href=\"https://github.com/opengoofy/hippo4j\" rel=\"nofollow\">https://github.com/opengoofy/hippo4j</a></p>\n<p>Gitee：<a href=\"https://gitee.com/magegoofy/hippo4j\" rel=\"nofollow\">https://gitee.com/magegoofy/hippo4j</a></p>\n<h2>什么是 hippo4j</h2>\n<p>hippo4j 通过对 JDK ThreadPoolExecutor 线程池增强，以及扩展三方框架底层线程池等功能，为业务系统提高线上运行保障能力。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824120618077.png\"/></p>\n<p>小贴士：hippo4j 不止于 Java ThreadPoolExecutor 的增强，<code>Dubbo</code>、<code>RabbitMQ</code>、<code>RocketMQ</code>、<code>Hystrix</code>、<code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code> 等框架线程池也都有进行监控和动态变更。</p>\n<h2>什么场景适合用 hippo4j</h2>\n<h3>1. 线程池随意定义，造成服务器高负载</h3>\n<p>在系统开发的过程中，因为涉及到多人协作，难免会出现信息不互通的情况。在同一个系统，对于线程池来说，常见的是线程池随意定义。</p>\n<ul>\n<li>开发者张三要记录用户操作日志，定义了 <code>user-log-record-thread-pool</code>；</li>\n<li>开发者李四要记录会员操作日志，定义了 <code>member-log-record-thread-pool</code>；</li>\n<li>开发者王五要记录权限操作日志，定义了 <code>power-log-record-thread-pool</code>；</li>\n<li>……</li>\n</ul>\n<p>随着系统不断开发，相同或不同语义的线程池被定义的越来越多，间接导致服务器资源严重耗损。</p>\n<p>而如果系统中使用 hippo4j ，能够在控制台查看当前应用已有线程池，是否存在相同语义且业务可复用线程池实例，避免线程资源过度浪费。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220823090803222.png\"/></p>\n<h3>2. 线程池参数不易评估</h3>\n<p>业务中使用了线程池，十个程序员可能有九个都在犯嘀咕，这线程池的配置应该如何选择？</p>\n<p>我觉得犯纠结的点主要有两个，无外乎设置的数多了或者少了。</p>\n<ol>\n<li>\n如果预设的线程数或阻塞队列数量少了，当业务量上来，会遇到两种情况，不管哪一种对业务来说都是不能接受的。<ol>\n<li>预估 200ms 执行完的任务，可能会 2s 执行完，因为任务都在排队。</li>\n<li>任务满了后，开始执行拒绝策略，影响正常业务。</li>\n</ol>\n</li>\n<li>\n如果超量设置线程池的参数，无疑会造成资源浪费，同样会造成两种情况。<ol>\n<li>线程资源也是占用服务器资源的，开启的多了对服务器有一定压力。</li>\n<li>如果过多的创建线程，当和其它线程池一起执行时，服务器 CPU 上下文切换也是个问题。</li>\n</ol>\n</li>\n</ol>\n<p>大家都知道，如果要修改运行中应用线程池参数，需要停止线上应用，调整成功后再发布，而这个过程异常的繁琐，如果能在运行中动态调整线程池的参数多好。</p>\n<p>美团技术团队基于这些痛点，推出了动态线程池的概念，催生了一批动态线程池框架，hippo4j 也是其一。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824085936059.png\"/></p>\n<p>如果应用是集群部署，hippo4j 可以选择修改线程池 <strong>某一实例</strong>，或者修改 <strong>集群全部实例</strong>，运行时生效，不需要再重启服务。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824194529142.png\"/></p>\n<p>再比如，压测时使用 hippo4j 动态调整线程池参数，对于开发测试来说，也是个不错的选择。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824121410808.png\"/></p>\n<h3>3. 线程池运行时报警策略</h3>\n<p>从线程池运行时监控的角度出发，hippo4j 内置 4 种报警策略，线程池活跃度、阻塞队列容量、拒绝策略触发以及任务运行超时报警。</p>\n<ul>\n<li>线程池活跃度：假设阈值设置 80%，线程池最大线程数 10 ，当线程数达到 8 发起报警。</li>\n<li>阻塞队列容量：假设阈值设置 80%，阻塞队列容量 100 ，当容量达到 80 发起报警。</li>\n<li>触发拒绝策略：当线程池任务触发了拒绝策略时，发起拒绝策略报警。</li>\n<li>任务运行超时：假设单个任务超时为 1000ms ，任务执行超过该时间发起报警。</li>\n</ul>\n<p>hippo4j 支持钉钉、企业微信和飞书软件通知，线程池任务运行超时报警示例：</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220823201756259.png\"/></p>\n<h3>4. 线程池运行时状态对开发者黑盒</h3>\n<p>线程池在服务运行过程中，对开发者来说是一个完全的黑盒。开发者无法得知线程池的参数变化，比如阻塞队列数量或者完成任务数等核心参数，这对于排查问题来说并不友好。</p>\n<p>hippo4j 支持线程池运行时状态实时查看，并在核心参数的基础上扩展了 <strong>负载、内存以及拒绝次数</strong> 等关键指标，每次查询返回线程池当前运行信息。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220823203255306.png\"/></p>\n<h3>5. 线程池监控</h3>\n<p>hippo4j 提供了两种线程池运行时数据监控方式，分别是：</p>\n<p>1 、内置数据池数据采集 + 监控，无需依赖任何中间件，由 hippo4j 内部集成的方式运行。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824195333056.png\"/></p>\n<p>2 、使用三方中间件 Prometheus + Grafana 或 ElasticSearch + Grafana 采集和监控。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/20220814_hippo4j_monitor.jpg\"/></p>\n<h3>6. 整合 Spring ThreadPoolTaskExecutor</h3>\n<p>Spring <code>ThreadPoolTaskExecutor</code> 对原生线程池扩展了一部分功能，我认为比较实用有两个，并且 hippo4j 也已经支持。</p>\n<ol>\n<li>当服务停止时，通知线程池处理剩余任务，并在等待指定时间后强制停止。</li>\n<li>传递线程上下文到线程池执行上下文中。</li>\n</ol>\n<p>第一个是实际使用中很核心的功能，减少了线程池丢弃任务的可能，这里重点说明下。</p>\n<p>我们平时在停止应用时，有没有这样一个考虑，线程池中的任务真的都执行完成了吗？</p>\n<p><strong>可能执行完了，可能没有</strong>。</p>\n<p>Spring 基于以上考虑，注册了线程池销毁方法。在应用关闭时，如果发现线程池存在任务没有执行完，需要等待一个指定时间。指定时间内任务执行如果执行完毕，皆大欢喜；如果还存在没有结束的任务，则丢弃。</p>\n<p>为什么会丢弃任务而不是再等等？</p>\n<p>因为如果线程池任务长时间执行，<strong>会影响整个应用的停止</strong>，进行了折中处理。</p>\n<h3>7. 三方框架中间件线程池适配</h3>\n<p>hippo4j 的目标是兼容所有框架的线程池，并可以提供监控和动态修改的能力。</p>\n<p>目前已支持的三方框架线程池列表：</p>\n<ul>\n<li>Apache Dubbo</li>\n<li>Alibaba Dubbo</li>\n<li>RabbitMQ</li>\n<li>Apache RocketMQ</li>\n<li>SpringCloud Stream RocketMQ</li>\n<li>SpringCloud Hystrix</li>\n<li>Tomcat</li>\n<li>Jetty</li>\n<li>Undertow</li>\n</ul>\n<p>支持上述框架线程池的动态变更参数和监控功能，比如：</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824203003245.png\"/></p>\n<p>未来 hippo4j 会支持更多三方框架线程池，如果你有好的想法也可以和我沟通。</p>\n<h3>8. 线程池运行堆栈查看</h3>\n<p>线程池运行中，任务运行停止，怀疑发生死锁或执行耗时操作。大多数程序员会选择使用命令或者 arthas 查看线程池运行中线程的堆栈，看看其中的 Worker 都在哪个方法卡住了。</p>\n<p>hippo4j 基于以上痛点，推出了线程池运行堆栈实时查看功能。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20220824082031279.png\"/></p>\n<h3>9. 动态线程池对性能有无影响</h3>\n<p>这可能是很多开发者担心的一个点，在这里统一回复下。</p>\n<p>hippo4j 仅对线程池做部分核心功能增强，没有修改任务执行源代码流程，可以保证绝对的安全。</p>\n<p>其次，hippo4j 上述的功能，都是与线程池执行任务主流程外扩展的，不会影响线程池正常的执行性能。</p>\n<h2>hippo4j 支持的两种运行模式</h2>\n<p>hippo4j 为用户提供了两种运行模式，分别是轻量级的配置中心接入，和功能更齐全的服务端接入，下面都来说说各自的优缺点。</p>\n<h3>1. hippo4j config</h3>\n<p>依赖配置中心完成线程池的动态变更，已支持的配置中心有：Nacos 、Apollo 、Zookeeper ，未来还会接入 Etcd 、Consul 等。</p>\n<p>另外，hippo4j 已支持用户自定义配置中心实现，如果使用公司自研或其它配置中心，也可以极小工作量进行引入。</p>\n<p>使用 hippo4j config 模式的优点和不足：</p>\n<ol>\n<li>优点：轻量级引入，可以根据项目中已有配置中心进行 hippo4j 的集成，无需引入其它服务，即可使用线程池参数动态化、运行时监控、报警等核心功能。</li>\n<li>不足：缺少可视化控制台页面，上文中描述的诸多功能不能使用。</li>\n</ol>\n<h3>2. hippo4j server</h3>\n<p>需要部署 hippo4j Jar 包，涵盖上文中描述的所有功能。</p>\n<p>因为服务端内部实现了配置中心和注册中心（参考 nacos 和 eureka 实现），所以它不依赖任何三方中间件。</p>\n<ol>\n<li>优点：功能齐备，可以享受更多的服务和便利。如果应用启动的是集群，可以指定其中某一个实例的线程池修改，而 config 则是整个集群变更。</li>\n<li>不足：相比较 hippo4j config ，需要额外部署一个 jar 包，增加了部署工作量。</li>\n</ol>\n<p>如果最初使用 hippo4j config ，想要切换到 server ，两者在进行替换的时候，<strong>无需修改业务代码</strong>。</p>\n<p>使用建议：根据公司情况选择，如果基本功能可以满足使用，选择 hippo4j config 使用即可；如果希望更多的功能，可以选择 hippo4j server 。</p>\n<h2>文末结语</h2>\n<p>如果觉得有用，麻烦各位大佬在以下两个平台 star 支持下，非常感谢～</p>\n<p>GitHub：<a href=\"https://github.com/opengoofy/hippo4j\" rel=\"nofollow\">https://github.com/opengoofy/hippo4j</a></p>\n<p>Gitee：<a href=\"https://gitee.com/magegoofy/hippo4j\" rel=\"nofollow\">https://gitee.com/magegoofy/hippo4j</a></p>\n","last_modified":1667436958,"replies":11,"id":892271},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":192352,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340","stars":3601,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"id":581973,"username":"aPaul","url":"https://www.v2ex.com/u/aPaul","website":"","twitter":null,"psn":null,"github":null,"btc":null,"location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/gravatar/629ccac8ae3d71ad10ebe1cf139e52b1?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/629ccac8ae3d71ad10ebe1cf139e52b1?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/629ccac8ae3d71ad10ebe1cf139e52b1?s=73&d=retro","created":1652802018,"last_modified":1652802018},"last_reply_by":"shintendo","last_touched":1667440686,"title":"如何隐藏浏览器控制台中查看 Elements Properties input type=\"password\" 的 value 值呢","url":"https://www.v2ex.com/t/892284","created":1667439217,"deleted":0,"content":"发现在登录页，用 Chrome 浏览器 F12 打开控制台，查看 Elements => Properties 可以看到 input 密码框的 value 明文值，如何隐藏起来呢","content_rendered":"<p>发现在登录页，用 Chrome 浏览器 F12 打开控制台，查看 Elements =&gt; Properties 可以看到 input 密码框的 value 明文值，如何隐藏起来呢</p>\n","last_modified":1667439217,"replies":6,"id":892284}]