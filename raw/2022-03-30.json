[{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_large.png?m=1635652519","name":"macos","avatar_normal":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_normal.png?m=1635652519","title":"macOS","url":"https://www.v2ex.com/go/macos","topics":18194,"footer":"<a href=\"/mbp\">MacBook Pro</a> 及 <a href=\"/go/imac\">iMac</a> 等 <a href=\"/go/apple\">Apple</a> 公司设计的计算机所运行的操作系统。<a href=\"/go/idev\">iOS</a> 的基础。","header":"The world’s most advanced desktop operating system.","title_alternative":"macOS","avatar_mini":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_mini.png?m=1635652519","stars":4571,"aliases":[],"root":false,"id":22,"parent_node_name":"os"},"member":{"id":487194,"username":"jiobanma","url":"https://www.v2ex.com/u/jiobanma","website":"www.banmajio.com","twitter":"","psn":"","github":"banmajio","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/581b/1335/487194_mini.png?m=1601286723","avatar_normal":"https://cdn.v2ex.com/avatar/581b/1335/487194_normal.png?m=1601286723","avatar_large":"https://cdn.v2ex.com/avatar/581b/1335/487194_large.png?m=1601286723","created":1588228908,"last_modified":1601286723},"last_reply_by":"yaleax","last_touched":1648611286,"title":"Mac 好用软件分享","url":"https://www.v2ex.com/t/843789","created":1648605880,"deleted":0,"content":"## 大家分享一些比较好用的 mac 软件.\r\n\r\n**先来我的:**\r\n```\r\n1.Bartender 4           [隐藏顶部菜单栏 app]\r\n2.Snipaste              [win/mac 超好用的截图软件]\r\n3.Fishing Funds         [基金(韭菜)助手菜单栏]\r\n4.Itsycal               [菜单栏日历小工具]\r\n5.超级右键                [方便直接进入终端]\r\n6.Iterm                 [终端 /ssh] \r\n7.App Clear             [卸载软件]\r\n8.iStat Menus           [系统与硬件监控软件]\r\n```","content_rendered":"<h2>大家分享一些比较好用的 mac 软件.</h2>\n<p><strong>先来我的:</strong></p>\n<pre><code>1.Bartender 4           [隐藏顶部菜单栏 app]\n2.Snipaste              [win/mac 超好用的截图软件]\n3.Fishing Funds         [基金(韭菜)助手菜单栏]\n4.Itsycal               [菜单栏日历小工具]\n5.超级右键                [方便直接进入终端]\n6.Iterm                 [终端 /ssh] \n7.App Clear             [卸载软件]\n8.iStat Menus           [系统与硬件监控软件]\n</code></pre>\n","last_modified":1648605880,"replies":42,"id":843789},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1647188067","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1647188067","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":182978,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1647188067","stars":3445,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"id":294423,"username":"zxxufo008","url":"https://www.v2ex.com/u/zxxufo008","website":"","twitter":null,"psn":null,"github":null,"btc":null,"location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/6d6e/c8cb/294423_mini.png?m=1645496183","avatar_normal":"https://cdn.v2ex.com/avatar/6d6e/c8cb/294423_normal.png?m=1645496183","avatar_large":"https://cdn.v2ex.com/avatar/6d6e/c8cb/294423_large.png?m=1645496183","created":1519629627,"last_modified":1645496183},"last_reply_by":"zxxufo008","last_touched":1648574307,"title":"哪种程序员的生产力需要用到 5k 分辨率显示器？","url":"https://www.v2ex.com/t/843803","created":1648608728,"deleted":0,"content":"鉴于此站默认为 i2ex ，特指  5K 视网膜显示屏\r\n\r\n27 英寸 (对角线) 5K 视网膜显示屏\r\n5120 x 2880 分辨率，218 ppi","content_rendered":"鉴于此站默认为 i2ex ，特指  5K 视网膜显示屏<br /><br />27 英寸 (对角线) 5K 视网膜显示屏<br />5120 x 2880 分辨率，218 ppi","last_modified":1648608728,"replies":28,"id":843803},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1648461058","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1648461058","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":48017,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1648461058","stars":7760,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"id":555634,"username":"itechnology","url":"https://www.v2ex.com/u/itechnology","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/avatar/ceca/7efb/555634_mini.png?m=1638956092","avatar_normal":"https://cdn.v2ex.com/avatar/ceca/7efb/555634_normal.png?m=1638956092","avatar_large":"https://cdn.v2ex.com/avatar/ceca/7efb/555634_large.png?m=1638956092","created":1631237690,"last_modified":1638956092},"last_reply_by":"JsonSnowNothing","last_touched":1648612179,"title":"用 Java 写个人博客，架构上采用 spring boot 单体应用好还是 spring cloud 微服务好？","url":"https://www.v2ex.com/t/843796","created":1648606870,"deleted":0,"content":"","content_rendered":"","last_modified":1648606870,"replies":27,"id":843796},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c74d/97b0/16_large.png?m=1648461077","name":"share","avatar_normal":"https://cdn.v2ex.com/navatar/c74d/97b0/16_normal.png?m=1648461077","title":"分享发现","url":"https://www.v2ex.com/go/share","topics":35247,"footer":"","header":"分享你看到的好玩的，有信息量的，欢迎从这里获取灵感。","title_alternative":"Share","avatar_mini":"https://cdn.v2ex.com/navatar/c74d/97b0/16_mini.png?m=1648461077","stars":4768,"aliases":[],"root":false,"id":16,"parent_node_name":"v2ex"},"member":{"id":332732,"username":"xqk111","url":"https://www.v2ex.com/u/xqk111","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/gravatar/87faf187f947a6cc869ee86999d5a2a3?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/87faf187f947a6cc869ee86999d5a2a3?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/87faf187f947a6cc869ee86999d5a2a3?s=73&d=retro","created":1532332366,"last_modified":1648603102},"last_reply_by":"Agdhfdjh","last_touched":1648611116,"title":"塞尔达传说-荒野之息 2 延期了，难过啊","url":"https://www.v2ex.com/t/843773","created":1648603129,"deleted":0,"content":"延期到 2023 年","content_rendered":"<p>延期到 2023 年</p>\n","last_modified":1648603129,"replies":27,"id":843773},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1630643913","name":"apple","avatar_normal":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1630643913","title":"Apple","url":"https://www.v2ex.com/go/apple","topics":17998,"footer":"","header":"设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。","title_alternative":"Apple","avatar_mini":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1630643913","stars":2113,"aliases":[],"root":false,"id":184,"parent_node_name":"hardware"},"member":{"id":463567,"username":"yongfrank","url":"https://www.v2ex.com/u/yongfrank","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/gravatar/da3dadb3e6bf88c6435a8d236d9a561c?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/da3dadb3e6bf88c6435a8d236d9a561c?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/da3dadb3e6bf88c6435a8d236d9a561c?s=73&d=retro","created":1578367927,"last_modified":1648603483},"last_reply_by":"PqZS58MLPBHFpEqm","last_touched":1648612376,"title":"转运 Apple TV 海淘总结分享","url":"https://www.v2ex.com/t/843776","created":1648603621,"deleted":0,"content":"抱歉发了图片，不想找敏感词了，话说这敏感词系统什么时候改善下？\r\n\r\n![BBAA2D0A-6287-48C3-BEFF-792E50AF08AE.jpeg]( https://s2.loli.net/2022/03/30/cmEswednk7Y3j8R.jpg)","content_rendered":"<p>抱歉发了图片，不想找敏感词了，话说这敏感词系统什么时候改善下？</p>\n<p><img alt=\"BBAA2D0A-6287-48C3-BEFF-792E50AF08AE.jpeg\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/30/cmEswednk7Y3j8R.jpg\"/></p>\n","last_modified":1648603621,"replies":23,"id":843776},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1648461058","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1648461058","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":48017,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1648461058","stars":7760,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"id":402540,"username":"Renco","url":"https://www.v2ex.com/u/Renco","website":"","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/8530/7718/402540_mini.png?m=1637991602","avatar_normal":"https://cdn.v2ex.com/avatar/8530/7718/402540_normal.png?m=1637991602","avatar_large":"https://cdn.v2ex.com/avatar/8530/7718/402540_large.png?m=1637991602","created":1555480728,"last_modified":1637991602},"last_reply_by":"RealJacob","last_touched":1648612367,"title":"和 OA 对接为什么那么烦","url":"https://www.v2ex.com/t/843780","created":1648604477,"deleted":0,"content":"OA 提供标准流程请求文档，请求后返回错误码，文档上找到错误码的翻译，说是字段错误，然后联系 OA 方问是哪个字段错了，能否提供具体的错误信息 。\r\n\r\nOA 回复：这个您直接根据我们提供的表单字段 copy 一下就行了，和其他客户对接的时候这些都不是什么问题。\r\n\r\n\r\n。。。一个表单三四十个字段，部分接口还用的 xml 请求。难道只能这边一个个去查字段？？","content_rendered":"<p>OA 提供标准流程请求文档，请求后返回错误码，文档上找到错误码的翻译，说是字段错误，然后联系 OA 方问是哪个字段错了，能否提供具体的错误信息 。</p>\n<p>OA 回复：这个您直接根据我们提供的表单字段 copy 一下就行了，和其他客户对接的时候这些都不是什么问题。</p>\n<p>。。。一个表单三四十个字段，部分接口还用的 xml 请求。难道只能这边一个个去查字段？？</p>\n","last_modified":1648604477,"replies":16,"id":843780},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1647188067","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1647188067","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":182978,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1647188067","stars":3445,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"id":466697,"username":"Moofeng","url":"https://www.v2ex.com/u/Moofeng","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/gravatar/1aaeb2fabc25bd88cc990fdf2c8a1724?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/1aaeb2fabc25bd88cc990fdf2c8a1724?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/1aaeb2fabc25bd88cc990fdf2c8a1724?s=73&d=retro","created":1579936385,"last_modified":1579936385},"last_reply_by":"Moofeng","last_touched":1648611177,"title":"用 U 盘备份系统，有朋友尝试过吗？能分享下经验不？","url":"https://www.v2ex.com/t/843774","created":1648603266,"deleted":0,"content":"背景：\r\n笔记本才买不久键盘就坏了，准备京东上走售后，但是担心数据丢失或者要可能会换新，所以寄修前需要备份下系统，目前知道的是 Windows 自带的“创建系统映像”功能备份到 U 盘，但此前没有实践过，不知道能不能实现预期效果\r\n需求：\r\n想要一种方便、快速的方法备份当前系统，便于在全新的环境中还原","content_rendered":"背景：<br />笔记本才买不久键盘就坏了，准备京东上走售后，但是担心数据丢失或者要可能会换新，所以寄修前需要备份下系统，目前知道的是 Windows 自带的“创建系统映像”功能备份到 U 盘，但此前没有实践过，不知道能不能实现预期效果<br />需求：<br />想要一种方便、快速的方法备份当前系统，便于在全新的环境中还原","last_modified":1648603266,"replies":16,"id":843774},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6e27/13a6/557_large.png?m=1608969785","name":"life","avatar_normal":"https://cdn.v2ex.com/navatar/6e27/13a6/557_normal.png?m=1608969785","title":"生活","url":"https://www.v2ex.com/go/life","topics":3033,"footer":"","header":"生活中的技术讨论","title_alternative":"Life","avatar_mini":"https://cdn.v2ex.com/navatar/6e27/13a6/557_mini.png?m=1608969785","stars":802,"aliases":[],"root":false,"id":557,"parent_node_name":""},"member":{"id":476364,"username":"meisen","url":"https://www.v2ex.com/u/meisen","website":"","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/ca1b/c8a9/476364_mini.png?m=1645270583","avatar_normal":"https://cdn.v2ex.com/avatar/ca1b/c8a9/476364_normal.png?m=1645270583","avatar_large":"https://cdn.v2ex.com/avatar/ca1b/c8a9/476364_large.png?m=1645270583","created":1584072591,"last_modified":1645270583},"last_reply_by":"imdong","last_touched":1648611652,"title":"可以便宜？ VS. 别人家比你便宜","url":"https://www.v2ex.com/t/843811","created":1648609943,"deleted":0,"content":"闲鱼上卖点闲置物品，价格也算合理，而且内容里都写了“顺丰包邮不议价！”\r\n\r\n发现 99%的买家仍会来一句：“可以便宜？”。听到这话我心理就会对这位买家有抵触，他们都不看商品内容的吗~\r\n\r\n最近一些买家又说：“别人家比你便宜” 。让我更来气了，买就买，不买就不买，非要这样让卖家拉黑买家。\r\n\r\n题外话：国外部分国家不还价的文化是如何培养出来的？","content_rendered":"闲鱼上卖点闲置物品，价格也算合理，而且内容里都写了“顺丰包邮不议价！”<br /><br />发现 99%的买家仍会来一句：“可以便宜？”。听到这话我心理就会对这位买家有抵触，他们都不看商品内容的吗~<br /><br />最近一些买家又说：“别人家比你便宜” 。让我更来气了，买就买，不买就不买，非要这样让卖家拉黑买家。<br /><br />题外话：国外部分国家不还价的文化是如何培养出来的？","last_modified":1648609943,"replies":14,"id":843811},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/df7f/28ac/791_large.png?m=1644497171","name":"fe","avatar_normal":"https://cdn.v2ex.com/navatar/df7f/28ac/791_normal.png?m=1644497171","title":"前端开发","url":"https://www.v2ex.com/go/fe","topics":2443,"footer":"","header":"","title_alternative":"Frontend","avatar_mini":"https://cdn.v2ex.com/navatar/df7f/28ac/791_mini.png?m=1644497171","stars":1198,"aliases":[],"root":false,"id":791,"parent_node_name":"programmer"},"member":{"id":162136,"username":"3dwelcome","url":"https://www.v2ex.com/u/3dwelcome","website":"","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/d2d0/2f32/162136_mini.png?m=1644832617","avatar_normal":"https://cdn.v2ex.com/avatar/d2d0/2f32/162136_normal.png?m=1644832617","avatar_large":"https://cdn.v2ex.com/avatar/d2d0/2f32/162136_large.png?m=1644832617","created":1457260101,"last_modified":1644832617},"last_reply_by":"icyalala","last_touched":1648612013,"title":"JSON 的 Keyname 到底要不要加双引号？","url":"https://www.v2ex.com/t/843806","created":1648609478,"deleted":0,"content":"浏览器里用 eval()解析一个 json 对象，keyname 是可以不带双引号的，比如{a:123}是合法的。\r\n\r\n然后同样是浏览器，用 JSON.parse()去解析一个 json 对象，就必须加双引号。否则直接报错！\r\n\r\n规范就不能统一一下嘛，一声叹息。","content_rendered":"浏览器里用 eval()解析一个 json 对象，keyname 是可以不带双引号的，比如{a:123}是合法的。<br /><br />然后同样是浏览器，用 JSON.parse()去解析一个 json 对象，就必须加双引号。否则直接报错！<br /><br />规范就不能统一一下嘛，一声叹息。","last_modified":1648609478,"replies":13,"id":843806},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/4ea0/6fbc/770_large.png?m=1648291943","name":"career","avatar_normal":"https://cdn.v2ex.com/navatar/4ea0/6fbc/770_normal.png?m=1648291943","title":"职场话题","url":"https://www.v2ex.com/go/career","topics":12894,"footer":"","header":"这里，我们聊聊那些工作中遇到的开心和不开心的事。","title_alternative":"Career","avatar_mini":"https://cdn.v2ex.com/navatar/4ea0/6fbc/770_mini.png?m=1648291943","stars":2302,"aliases":[],"root":false,"id":770,"parent_node_name":"work"},"member":{"id":70501,"username":"lvming6816077","url":"https://www.v2ex.com/u/lvming6816077","website":"","twitter":"","psn":"","github":"","btc":"","location":"上海","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/f688/ae53/70501_mini.png?m=1519717966","avatar_normal":"https://cdn.v2ex.com/avatar/f688/ae53/70501_normal.png?m=1519717966","avatar_large":"https://cdn.v2ex.com/avatar/f688/ae53/70501_large.png?m=1519717966","created":1407735795,"last_modified":1519717966},"last_reply_by":"xu45525584","last_touched":1648611975,"title":"31 还能去大厂吗","url":"https://www.v2ex.com/t/843787","created":1648605744,"deleted":0,"content":"毕业后在大厂干了几年，中间回二线工作了几年，现在想要在去一线大厂，面了几个，都是到最后一轮被挂了，这种情况下是不是没有机会再回去额","content_rendered":"<p>毕业后在大厂干了几年，中间回二线工作了几年，现在想要在去一线大厂，面了几个，都是到最后一轮被挂了，这种情况下是不是没有机会再回去额</p>\n","last_modified":1648606670,"replies":13,"id":843787},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1647188067","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1647188067","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":182975,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1647188067","stars":3445,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"id":544567,"username":"kensoz","url":"https://www.v2ex.com/u/kensoz","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/avatar/143d/5c79/544567_mini.png?m=1647921063","avatar_normal":"https://cdn.v2ex.com/avatar/143d/5c79/544567_normal.png?m=1647921063","avatar_large":"https://cdn.v2ex.com/avatar/143d/5c79/544567_large.png?m=1647921063","created":1620284346,"last_modified":1647921063},"last_reply_by":"Elix","last_touched":1648609863,"title":"大佬们，请问模仿公司项目作为个人项目存在法律风险嘛？","url":"https://www.v2ex.com/t/843765","created":1648600394,"deleted":0,"content":"假如公司有一个图书管理系统（老掉牙的例子）卖给各个图书馆\r\n - 项目是常见的用户网站，管理网站，后端，数据库\r\n - 数据栈为 vue2+java+mysql\r\n - 功能就是给用户展示图书，管理网站增删改查，没有爆款功能\r\n\r\n这时我打算模仿公司自己做一个图书管理系统\r\n - 技术栈使用 react+nodejs+mongodb\r\n - 内部逻辑也是完全从 0 开始自己写\r\n - 界面 ui 完全自己设计，网页布局颜色等等完全从 0 开始\r\n - 使用假数据，完全从 0 开始自己构造数据\r\n \r\n但是\r\n - 项目结构（用户网站，管理网站，后端，数据库）不变\r\n - 给用户展示图书，管理网站增删改查的功能不变\r\n - 归根结底还是一个图书管理系统\r\n \r\n请问:\\\r\n1.我的这个项目是否有侵权违法的可能？\\\r\n2.如果上述情况，我把图书改成宠物管理，药品管理等等是否有侵权违法的可能？\\\r\n3.假如使用相同技术栈 vue2+java+mysql ，是否侵权违法的可能？\r\n\r\n最后：目前只是想法阶段，并没有实施","content_rendered":"<p>假如公司有一个图书管理系统（老掉牙的例子）卖给各个图书馆</p>\n<ul>\n<li>项目是常见的用户网站，管理网站，后端，数据库</li>\n<li>数据栈为 vue2+java+mysql</li>\n<li>功能就是给用户展示图书，管理网站增删改查，没有爆款功能</li>\n</ul>\n<p>这时我打算模仿公司自己做一个图书管理系统</p>\n<ul>\n<li>技术栈使用 react+nodejs+mongodb</li>\n<li>内部逻辑也是完全从 0 开始自己写</li>\n<li>界面 ui 完全自己设计，网页布局颜色等等完全从 0 开始</li>\n<li>使用假数据，完全从 0 开始自己构造数据</li>\n</ul>\n<p>但是</p>\n<ul>\n<li>项目结构（用户网站，管理网站，后端，数据库）不变</li>\n<li>给用户展示图书，管理网站增删改查的功能不变</li>\n<li>归根结底还是一个图书管理系统</li>\n</ul>\n<p>请问:<br/>\n1.我的这个项目是否有侵权违法的可能？<br/>\n2.如果上述情况，我把图书改成宠物管理，药品管理等等是否有侵权违法的可能？<br/>\n3.假如使用相同技术栈 vue2+java+mysql ，是否侵权违法的可能？</p>\n<p>最后：目前只是想法阶段，并没有实施</p>\n","last_modified":1648600394,"replies":12,"id":843765},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/55b3/7c5c/649_large.png?m=1647187528","name":"wechat","avatar_normal":"https://cdn.v2ex.com/navatar/55b3/7c5c/649_normal.png?m=1647187528","title":"微信","url":"https://www.v2ex.com/go/wechat","topics":2984,"footer":"","header":"关于微信及微信小程序的讨论节点","title_alternative":"WeChat","avatar_mini":"https://cdn.v2ex.com/navatar/55b3/7c5c/649_mini.png?m=1647187528","stars":549,"aliases":[],"root":false,"id":649,"parent_node_name":"internet"},"member":{"id":217339,"username":"Macolor21","url":"https://www.v2ex.com/u/Macolor21","website":"","twitter":"","psn":"","github":"","btc":"","location":"深圳","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/3482/7d98/217339_mini.png?m=1643117269","avatar_normal":"https://cdn.v2ex.com/avatar/3482/7d98/217339_normal.png?m=1643117269","avatar_large":"https://cdn.v2ex.com/avatar/3482/7d98/217339_large.png?m=1643117269","created":1488006246,"last_modified":1643117269},"last_reply_by":"aheadlead","last_touched":1648610522,"title":"微信备注竟然屏蔽了 Phoenix 这个词语？","url":"https://www.v2ex.com/t/843769","created":1648602399,"deleted":0,"content":"我在给朋友备注 \r\n\r\nPhoenix-xxxx\r\nPhoenix.xx \r\n\r\n均会出现备注失效的问题，这个词语触发什么敏感词了吗？","content_rendered":"<p>我在给朋友备注 </p>\n<p>Phoenix-xxxx\nPhoenix.xx </p>\n<p>均会出现备注失效的问题，这个词语触发什么敏感词了吗？</p>\n","last_modified":1648602399,"replies":11,"id":843769},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1648461058","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1648461058","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":48017,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1648461058","stars":7760,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"id":306606,"username":"investguider","url":"https://www.v2ex.com/u/investguider","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/gravatar/ecd7963d992232ad46f41a27c58622f2?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/ecd7963d992232ad46f41a27c58622f2?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/ecd7963d992232ad46f41a27c58622f2?s=73&d=retro","created":1523100695,"last_modified":1523100695},"last_reply_by":"investguider","last_touched":1648611466,"title":"2022 年 MySQL 最新面试题","url":"https://www.v2ex.com/t/843791","created":1648606225,"deleted":0,"content":"hello 大家好，最近整理了一份在线版的 MySQL 的面试题(含答案), 地址: [ [在线阅读地址] ]( https://easyhappy.github.io/travel-coding/mysql/%E5%89%8D%E8%A8%80.html)\r\n\r\n目录大概是这样的\r\n\r\n![]( https://images.xiaozhuanlan.com/uploads/photo/2022/359a0e34-0c35-400c-9ee2-439e3e7cf61e.png)\r\n\r\n也会根据自己的经验，给出这个面试中出现的概率。比如这样:\r\n\r\n索引有哪些使用场景     \r\n出现概率: ★★★★★\r\n\r\n\r\n目前也在完善、整理中,也欢迎大家给出意见和反馈，thanks 。","content_rendered":"<p>hello 大家好，最近整理了一份在线版的 MySQL 的面试题(含答案), 地址: <a href=\"https://easyhappy.github.io/travel-coding/mysql/%E5%89%8D%E8%A8%80.html\" rel=\"nofollow\"> [在线阅读地址] </a></p>\n<p>目录大概是这样的</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://images.xiaozhuanlan.com/uploads/photo/2022/359a0e34-0c35-400c-9ee2-439e3e7cf61e.png\"/></p>\n<p>也会根据自己的经验，给出这个面试中出现的概率。比如这样:</p>\n<p>索引有哪些使用场景<br/>\n出现概率: ★★★★★</p>\n<p>目前也在完善、整理中,也欢迎大家给出意见和反馈，thanks 。</p>\n","last_modified":1648606225,"replies":10,"id":843791},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/e7b2/4b11/360_large.png?m=1641783557","name":"windows","avatar_normal":"https://cdn.v2ex.com/navatar/e7b2/4b11/360_normal.png?m=1641783557","title":"Windows","url":"https://www.v2ex.com/go/windows","topics":2630,"footer":"","header":"Windows, not walls.","title_alternative":"Windows","avatar_mini":"https://cdn.v2ex.com/navatar/e7b2/4b11/360_mini.png?m=1641783557","stars":857,"aliases":[],"root":false,"id":360,"parent_node_name":"os"},"member":{"id":546486,"username":"komorebi12138","url":"https://www.v2ex.com/u/komorebi12138","website":"","twitter":null,"psn":null,"github":null,"btc":null,"location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/7494/2e94/546486_mini.png?m=1634873283","avatar_normal":"https://cdn.v2ex.com/avatar/7494/2e94/546486_normal.png?m=1634873283","avatar_large":"https://cdn.v2ex.com/avatar/7494/2e94/546486_large.png?m=1634873283","created":1622101843,"last_modified":1634873283},"last_reply_by":"zanyzephyr","last_touched":1648611761,"title":"求助：关于 Win11 新系统不让我打游戏被迫戒网瘾这点事","url":"https://www.v2ex.com/t/843802","created":1648608681,"deleted":0,"content":"最近电脑更新了 Win11 系统，一开始办公挺爽的，使用着很舒服，但是到了周末打游戏的时候就不对劲了，登陆 steam 显示：steam 需要联网进行更新，不让登陆，登陆 lol 能进入界面，但是一直转圈圈显示网络异常；使用驱动精灵修复网络也不行，实在不清楚怎么办了来问问 V 友们。\r\nps：办公刷视频均无异常，打游戏就没得网络了，而且只是游戏没有网络","content_rendered":"<p>最近电脑更新了 Win11 系统，一开始办公挺爽的，使用着很舒服，但是到了周末打游戏的时候就不对劲了，登陆 steam 显示：steam 需要联网进行更新，不让登陆，登陆 lol 能进入界面，但是一直转圈圈显示网络异常；使用驱动精灵修复网络也不行，实在不清楚怎么办了来问问 V 友们。\nps：办公刷视频均无异常，打游戏就没得网络了，而且只是游戏没有网络</p>\n","last_modified":1648608681,"replies":9,"id":843802},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1648461058","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1648461058","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":48017,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1648461058","stars":7760,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"id":51542,"username":"blueteeth","url":"https://www.v2ex.com/u/blueteeth","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/avatar/a9bd/4585/51542_mini.png?m=1610113226","avatar_normal":"https://cdn.v2ex.com/avatar/a9bd/4585/51542_normal.png?m=1610113226","avatar_large":"https://cdn.v2ex.com/avatar/a9bd/4585/51542_large.png?m=1610113226","created":1386614221,"last_modified":1610113226},"last_reply_by":"xiaket","last_touched":1648611094,"title":"Wget 和 cURL 对比，谁更快？","url":"https://www.v2ex.com/t/843801","created":1648608427,"deleted":0,"content":"如果目的仅仅是下载网页的 HTML 源代码，请问 Wget 和 cURL 相比，速度上有没有区别（精确到毫秒级别）？","content_rendered":"<p>如果目的仅仅是下载网页的 HTML 源代码，请问 Wget 和 cURL 相比，速度上有没有区别（精确到毫秒级别）？</p>\n","last_modified":1648608427,"replies":8,"id":843801},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1647188067","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1647188067","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":182975,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1647188067","stars":3445,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"id":560762,"username":"lizhiqing","url":"https://www.v2ex.com/u/lizhiqing","website":"https://yunzhongzhuan.com/#files","twitter":null,"psn":null,"github":null,"btc":null,"location":"","tagline":"yunzhongzhuan.com","bio":"yunzhongzhuan.com","avatar_mini":"https://cdn.v2ex.com/avatar/cefd/4b62/560762_mini.png?m=1648520952","avatar_normal":"https://cdn.v2ex.com/avatar/cefd/4b62/560762_normal.png?m=1648520952","avatar_large":"https://cdn.v2ex.com/avatar/cefd/4b62/560762_large.png?m=1648520952","avatar_xlarge":"https://cdn.v2ex.com/avatar/cefd/4b62/560762_xlarge.png?m=1648520952","avatar_xxlarge":"https://cdn.v2ex.com/avatar/cefd/4b62/560762_xlarge.png?m=1648520952","avatar_xxxlarge":"https://cdn.v2ex.com/avatar/cefd/4b62/560762_xlarge.png?m=1648520952","created":1636069839,"last_modified":1648520952},"last_reply_by":"westoy","last_touched":1648608677,"title":"一天 1.6k+IP 的网站全站只接一家 ad 独家 ad 的话能收对方多少","url":"https://www.v2ex.com/t/843764","created":1648600368,"deleted":0,"content":"如图（按住 CTRL 点击新窗口单独打开）：\r\n\r\nhttps://tva1.sinaimg.cn/mw2000/005CbWF8gy1h0rluxtwmkj30wi0nw7dd.jpg\r\n\r\n网站已经苟活 460 天了\r\n\r\n如果接广告只接一家不会出现第二家\r\n\r\n独家广告\r\n\r\n能收多少钱一个月或多少一年","content_rendered":"<p>如图（按住 CTRL 点击新窗口单独打开）：</p>\n<p><a href=\"https://tva1.sinaimg.cn/mw2000/005CbWF8gy1h0rluxtwmkj30wi0nw7dd.jpg\" rel=\"nofollow\">https://tva1.sinaimg.cn/mw2000/005CbWF8gy1h0rluxtwmkj30wi0nw7dd.jpg</a></p>\n<p>网站已经苟活 460 天了</p>\n<p>如果接广告只接一家不会出现第二家</p>\n<p>独家广告</p>\n<p>能收多少钱一个月或多少一年</p>\n","last_modified":1648600386,"replies":8,"id":843764},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_large.png?m=1635652519","name":"macos","avatar_normal":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_normal.png?m=1635652519","title":"macOS","url":"https://www.v2ex.com/go/macos","topics":18194,"footer":"<a href=\"/mbp\">MacBook Pro</a> 及 <a href=\"/go/imac\">iMac</a> 等 <a href=\"/go/apple\">Apple</a> 公司设计的计算机所运行的操作系统。<a href=\"/go/idev\">iOS</a> 的基础。","header":"The world’s most advanced desktop operating system.","title_alternative":"macOS","avatar_mini":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_mini.png?m=1635652519","stars":4571,"aliases":[],"root":false,"id":22,"parent_node_name":"os"},"member":{"id":241463,"username":"JackyCDK","url":"https://www.v2ex.com/u/JackyCDK","website":"www.natech.top","twitter":"","psn":"","github":"jackyczj","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/9c7e/5b44/241463_mini.png?m=1648601370","avatar_normal":"https://cdn.v2ex.com/avatar/9c7e/5b44/241463_normal.png?m=1648601370","avatar_large":"https://cdn.v2ex.com/avatar/9c7e/5b44/241463_large.png?m=1648601370","created":1500482591,"last_modified":1648601370},"last_reply_by":"NanonaN","last_touched":1648608370,"title":"MBP 2021 在更新 12.3 之后 使用 TimeMachine 备份会间歇性崩溃并重启","url":"https://www.v2ex.com/t/843768","created":1648601498,"deleted":0,"content":"搜了一下发现了一篇和我一样报错信息的 issue, 不知道各位有没有遇到同样的情况，只要关闭 TimeMachine 就啥事都没了，但是没了这玩意就少了很多安全感....\r\n\r\nhttps://discussions.apple.com/thread/253750991","content_rendered":"<p>搜了一下发现了一篇和我一样报错信息的 issue, 不知道各位有没有遇到同样的情况，只要关闭 TimeMachine 就啥事都没了，但是没了这玩意就少了很多安全感....</p>\n<p><a href=\"https://discussions.apple.com/thread/253750991\" rel=\"nofollow\">https://discussions.apple.com/thread/253750991</a></p>\n","last_modified":1648601498,"replies":7,"id":843768},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6f49/22f4/18_large.png?m=1648461116","name":"shanghai","avatar_normal":"https://cdn.v2ex.com/navatar/6f49/22f4/18_normal.png?m=1648461116","title":"上海","url":"https://www.v2ex.com/go/shanghai","topics":2817,"footer":"","header":"","title_alternative":"Shanghai","avatar_mini":"https://cdn.v2ex.com/navatar/6f49/22f4/18_mini.png?m=1648461116","stars":2012,"aliases":[],"root":false,"id":18,"parent_node_name":"cn"},"member":{"id":127945,"username":"yongzhong","url":"https://www.v2ex.com/u/yongzhong","website":"","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"","bio":"纠结症综合体","avatar_mini":"https://cdn.v2ex.com/gravatar/28c671cb0ad0b41e89368c524e4e42c6?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/28c671cb0ad0b41e89368c524e4e42c6?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/28c671cb0ad0b41e89368c524e4e42c6?s=73&d=retro","created":1437317373,"last_modified":1640591928},"last_reply_by":"citydog","last_touched":1648611631,"title":"这次疫情过后,准备逃离上海","url":"https://www.v2ex.com/t/843815","created":1648611582,"deleted":0,"content":"上面想搞新的防控策略的想法能理解,但是这个基层实施能力,太让人失望了.简直就是一塌糊涂","content_rendered":"<p>上面想搞新的防控策略的想法能理解,但是这个基层实施能力,太让人失望了.简直就是一塌糊涂</p>\n","last_modified":1648611582,"replies":6,"id":843815},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/df7f/28ac/791_large.png?m=1644497171","name":"fe","avatar_normal":"https://cdn.v2ex.com/navatar/df7f/28ac/791_normal.png?m=1644497171","title":"前端开发","url":"https://www.v2ex.com/go/fe","topics":2443,"footer":"","header":"","title_alternative":"Frontend","avatar_mini":"https://cdn.v2ex.com/navatar/df7f/28ac/791_mini.png?m=1644497171","stars":1198,"aliases":[],"root":false,"id":791,"parent_node_name":"programmer"},"member":{"id":110591,"username":"houzhenhong","url":"https://www.v2ex.com/u/houzhenhong","website":"https://bbs.towerlight.top/","twitter":"","psn":"","github":"skywalker512","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/a47c/381e/110591_mini.png?m=1648601127","avatar_normal":"https://cdn.v2ex.com/avatar/a47c/381e/110591_normal.png?m=1648601127","avatar_large":"https://cdn.v2ex.com/avatar/a47c/381e/110591_large.png?m=1648601127","created":1428817877,"last_modified":1648601127},"last_reply_by":"TWorldIsNButThis","last_touched":1648608175,"title":"React 18 发布了","url":"https://www.v2ex.com/t/843766","created":1648601191,"deleted":0,"content":"> 以下为 [React 18 官方博客]( https://reactjs.org/blog/2022/03/29/react-v18.html) 的翻译\r\n\r\nReact 18 现在可以在 npm 上使用了!\r\n\r\n在[上一篇文章]( https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html)中，我们分享了将你的应用程序升级到 React 18 的分步说明。在这篇文章中，我们将概述 React 18 的新内容，以及它对未来的意义。\r\n\r\n我们最新的主要版本包括开箱即用的改进，如自动批处理，新的 API 如 startTransition ，以及支持 Suspense 的 streaming server-side rendering (流式服务器渲染)。\r\n\r\nReact 18 中的许多功能都是建立在我们新的并发渲染器之上的，这种幕后变化释放了强大的新功能。Concurrent React 是可选的 - 只有当你使用并发功能时才会启用 - 但我们认为它将对人们构建应用程序的方式产生重大影响。\r\n\r\n我们花了数年时间研究和开发对 React 并发的支持，我们还特别为现有用户提供一个渐进的采用路径。去年夏天，我们成立了[React 18 工作组]( https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html)，以收集来自社区专家的反馈，并确保整个 React 生态系统的顺利升级体验。\r\n\r\n如果你错过了，我们在 2021 年 React Conf 上分享了很多这个愿景：\r\n\r\n- 在[主题演讲]( https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa)中，我们解释了 React 18 如何达成我们的使命，即让开发者轻松构建伟大的用户体验\r\n- [Shruti Kapoor]( https://twitter.com/shrutikapoor08) [演示了如何使用 React 18 的新功能]( https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)\r\n- [Shaundai Person]( https://twitter.com/shaundai) 向我们介绍了用[Suspense 进行流式服务器渲染]( https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)的情况\r\n\r\n下面是对这个版本的完整概述，从并发渲染开始。\r\n\r\n> React Native 用户请注意。React 18 将与新的 React Native 架构一起提供给 React Native 。更多信息，请看[React Conf 的主题演讲]( https://www.youtube.com/watch?v=FZ0cG47msEk&t=1530s)。\r\n\r\n## 什么是并发 React (Concurrent React)？\r\n\r\nReact 18 中最重要的一点是，我们希望您永远不必考虑：并发性。我们认为这对应用程序开发人员来说基本上是正确的，尽管对库维护者来说，故事可能有点复杂。\r\n\r\n并发本身并不是一个功能。它是一种新的幕后机制，使 React 能够同时准备多个版本的 UI 。你可以把并发看作是一个实现细节-它的价值在于它所解锁的功能。React 在其内部实现中使用了复杂的技术，比如优先级队列和多重缓冲。但你不会在我们的公共 API 中看到这些概念。\r\n\r\n当我们设计 API 时，我们试图向开发者隐藏实现细节。作为一个 React 开发者，你专注于你想要的用户体验，而 React 处理如何提供这种体验。因此，我们不期望 React 开发者知道并发性在幕后是如何工作的。\r\n\r\n然而，Concurrent React 比典型的实现细节更重要 - 它是 React 核心渲染模型的基础性更新。因此，虽然知道并发是如何工作的并不是非常重要，但在高层次上了解它可能是值得的。\r\n\r\nConcurrent React 的一个关键特性是渲染是可中断的。首次升级到 React 18 时，在添加任何并发功能之前，更新的呈现方式与 React 的早期版本相同——在一个单一、不间断、同步的事务中。使用同步渲染，一旦更新开始渲染，在用户可以在屏幕上看到结果之前，任何东西都不能中断它。\r\n\r\n在并发渲染中，情况并非总是如此。React 可能会开始渲染一个更新，在中间停顿一下，然后再继续。它甚至可能完全放弃一个正在进行的渲染。React 保证，即使渲染被打断，用户界面也会显示一致。为了做到这一点，React 要等整个树完成评估（ evaluated ），它他才会执行 DOM 突变。有了这种能力，React 可以在后台准备新的屏幕而不阻塞主线程。这意味着 UI 可以立即响应用户的输入，即使它正处于一个大型的渲染任务中，创造一个流畅的用户体验。\r\n\r\n另一个例子是可重用状态。Concurrent React 可以从屏幕上删除部分用户界面，然后在以后重新使用的状态时将它们添加回来。例如，当用户按 Tab 键离开当前页面并返回时，React 能够将页面恢复到与之前相同的状态。在即将到来的次要版本中，我们计划添加一个名为 <OffScreen> 的新组件来实现此模式。类似地，您将能够使用屏幕外在后台准备新的 UI ，以便在用户显示它之前准备好。\r\n\r\n并发渲染是 React 中一个强大的新工具，我们的大多数新功能都是为了利用它而建立的，包括 Suspense 、transitions 和 streaming server rendering 。但 React 18 只是我们在这个新基础上所要做的事情的开始。\r\n\r\n## 逐步采用并发功能\r\n\r\n从技术上讲，并发渲染是一个突破性的变化。因为并发渲染是可中断的，当它被启用时，组件的行为会略有不同。\r\n\r\n在我们的测试中，我们已经将成千上万的组件升级到 React 18 。我们发现，几乎所有的现有组件都能在并发渲染下 \"正常工作\"，没有任何变化。然而，其中一些可能需要一些额外的迁移工作。虽然这些变化通常很小，但你仍然有能力按照自己的节奏进行。React 18 中的新渲染行为只在你的应用程序中使用新功能的部分启用。\r\n\r\n整体的升级策略是让你的应用在 React 18 上运行而不破坏现有的代码。然后你可以按照自己的节奏逐渐开始添加并发功能。你可以使用 []( https://reactjs.org/docs/strict-mode.html) 来帮助在开发过程中发现与并发相关的错误。严格模式不影响生产行为，但在开发过程中，它将记录额外的警告，并重复调用那些预计是空闲的函数。它不会发现一切，但它能有效地防止最常见的错误类型。\r\n\r\n在你升级到 React 18 之后，你将能够立即开始使用并发功能。例如，你可以使用 startTransition 在屏幕之间进行导航，而不阻止用户输入。或者使用 DeferredValue 来节制昂贵的重新渲染。\r\n\r\n然而，从长远来看，我们希望你为你的应用程序添加并发功能的主要方式是使用一个支持并发的库或框架。在大多数情况下，你不会直接与并发的 API 交互。例如，开发者在导航到一个新的屏幕时不再调用 startTransition ，路由器库会自动将导航包裹在 startTransition 中。\r\n\r\n库升级到兼容并发可能需要一些时间。我们已经提供了新的 API ，使库更容易利用并发功能。同时，在我们努力逐步迁移 React 生态系统的过程中，请对维护者保持耐心。\r\n\r\n更多信息，请看我们之前的文章。[如何升级到 React 18]( https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html)。\r\n\r\n## Suspense in Data Frameworks\r\n\r\n在 React 18 中，你可以开始在 Relay 、Next.js 、Hydrogen 或 Remix 等 opinionated 框架中使用 Suspense 进行数据获取。使用 Suspense 进行 hoc data fetching 在技术上是可行的，但仍不建议作为一般策略。\r\n\r\n在未来，我们可能会公开更多的原语（ primitives ），让你更容易用 Suspense 访问你的数据，也许不需要使用 opinionated 框架。然而，当 Suspense 被深度整合到你的应用程序的架构中时，它的效果是最好的：你的路由器、你的数据层和你的服务器渲染环境。因此，从长远来看，我们预计库和框架将在 React 生态系统中发挥关键作用。\r\n\r\n和以前的 React 版本一样，你也可以用 Suspense 在客户端用 React.lazy 进行代码分割。但我们对 Suspense 的愿景一直是远远超过加载代码 - 目标是扩展对 Suspense 的支持，以便最终，同样的 Suspense 可以处理任何异步操作（加载代码、数据、图像等）。\r\n\r\n## Server Components 仍在开发中\r\n\r\n[**Server Components**]( https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html) 是一个即将推出的功能，它允许开发人员建立跨越服务器和客户端的应用程序，将客户端应用程序的丰富互动性与传统服务器渲染的性能相结合。服务器组件在本质上并不与 并发 React 耦合，但它被设计为与并发功能（如 Suspense 和 streaming server rendering ）配合使用效果最佳。\r\n\r\n服务器组件仍然是实验性的，但我们希望在 18.x 小版本中发布一个初始版本。同时，我们正在与 Next.js 、Hydrogen 和 Remix 等框架合作，以推进该提案，并使其准备好被广泛采用。\r\n\r\n## React 18 的新内容\r\n\r\n### 新功能: 自动批处理\r\n\r\n批处理是指 React 将多个状态更新分组到一个重新渲染中，以获得更好的性能。如果没有自动批处理，我们只对 React 事件处理程序内的更新进行批处理。默认情况下，React 不会对 promises 、setTimeout 、native event handlers 或任何其他事件中的更新进行批处理。有了自动批处理，这些更新将被自动批处理。\r\n\r\n```\r\n// 之前: 只有 React 事件被批处理\r\nsetTimeout(() => {\r\n  setCount(c => c + 1);\r\n  setFlag(f => !f);\r\n  // React 将渲染两次，每次状态更新一次（无批处理）\r\n}, 1000);\r\n\r\n// 之后: 在 promises 、setTimeout 、native event handlers 中都会被批处理\r\nsetTimeout(() => {\r\n  setCount(c => c + 1);\r\n  setFlag(f => !f);\r\n  // React 在最后只会重新渲染一次（这就是批处理！）\r\n}, 1000);\r\n```\r\n\r\n更多信息，请看这篇关于 React 18 中[自动批处理以减少渲染]( https://github.com/reactwg/react-18/discussions/21)的文章。\r\n\r\n### 新功能：Transitions\r\n\r\nTransitions （过渡） 是 React 的一个新概念，用于区分紧急和非紧急更新。\r\n\r\n- **紧急更新**反映了直接的互动，如输入文字、点击、按压等等。\r\n- **过渡更新**则是将用户界面从一个视图过渡到另一个视图。\r\n\r\n像 输入文字、点击或按压 这样的紧急更新，需要立即响应，以符合我们对物理对象行为方式的直觉。否则他们就会感觉 \"不对劲\"。然而，转换是不同的，因为用户并不期望在屏幕上看到每个中间值。\r\n\r\n例如，当您在下拉列表中选择一个筛选器时，您希望当您单击时，筛选器按钮本身会立即响应。然而，实际结果可能会单独过渡。一个小小的延迟将是不可察觉的，而且通常是意料之中的。如果在渲染结果之前再次更改过滤器，则只需查看最新结果。\r\n\r\n通常情况下，为了获得最佳的用户体验，一个用户的输入应该同时导致一个紧急的更新和一个非紧急的更新。你可以在输入事件中使用 startTransition API 来告知 React 哪些是紧急更新，哪些是 \"过渡\"。\r\n\r\n```\r\nimport {startTransition} from 'react';\r\n\r\n// 紧急：显示键入的内容\r\nsetInputValue(input);\r\n\r\n// 将内部的任何状态更新标记为 过渡\r\nstartTransition(() => {\r\n  // 过渡：显示结果\r\n  setSearchQuery(input);\r\n});\r\n```\r\n\r\n被 startTransition 包裹的更新被当作非紧急事件来处理，如果有更紧急的更新，如点击或按键，则会被打断。如果一个过渡被用户打断（例如，连续输入多个字符），React 会扔掉未完成的的渲染工作，只渲染最新的更新。\r\n\r\n- useTransition：一个用于启用 过渡 的钩子，包括一个跟踪待定状态的值。\r\n- startTransition：当钩子不能被使用时，启用 过渡 的方法。\r\n\r\n过渡 将选择进入并发渲染，这允许更新被中断。如果内容重新暂停，过渡 也会告诉 React 继续显示当前内容，同时在后台渲染过渡内容（详见[Suspense RFC]( https://github.com/reactjs/rfcs/blob/main/text/0213-suspense-in-react-18.md)）。\r\n\r\n[See docs for transitions here]( https://reactjs.org/docs/react-api.html#transitions)\r\n\r\n### 新的 Suspense 功能\r\n\r\n如果组件树的某个部分还没有准备好被显示，Suspense 可以让你声明性地指定它的加载状态。\r\n\r\n```\r\n<Suspense fallback={<Spinner />}>\r\n  <Comments />\r\n</Suspense>\r\n```\r\n\r\nSuspense 使 \"UI 加载状态 \"成为 React 编程模型中的第一类声明性概念。这让我们可以在它上面建立更高层次的功能。\r\n\r\n几年前，我们推出了一个有限的 Suspense 版本。然而，唯一支持的用例是用 React.lazy 拆分代码，而且在服务器上渲染时根本不支持。\r\n\r\n在 React 18 中，我们增加了对服务器上的 Suspense 的支持，并使用并发渲染功能扩展了其功能。\r\n\r\nReact 18 中的 Suspense 在与过渡 API 结合时效果最好。如果你在过渡期间暂停，React 将防止已经可见的内容被 fallback 取代。相反，React 会延迟渲染，直到有足够的数据加载，以防止出现糟糕的加载状态。\r\n\r\n更多内容请参见 React 18 中的 [RFC for Suspense]( https://github.com/reactjs/rfcs/blob/main/text/0213-suspense-in-react-18.md)。\r\n\r\n### 新的客户端和服务器渲染 API\r\n\r\n在这个版本中，我们利用机会重新设计了我们为客户端和服务器上的渲染所暴露的 API 。这些变化允许用户继续使用 React 17 模式下的旧 API ，同时升级到 React 18 的新 API 。\r\n\r\n**React DOM 客户端**\r\n\r\n这些新的 API 现在都是从 react-dom/client 导出的。\r\n\r\n- createRoot: 新的方法来创建一个根来渲染或卸载。使用它代替 ReactDOM.render 。没有它，React 18 的新功能就不能工作。\r\n- hydrateRoot: 新的方法来给服务器渲染 hydrate 。使用它代替 R eactDOM.hydrate 与新的 React DOM Server APIs 一起使用。没有它，React 18 的新功能就不能工作。\r\n\r\ncreateRoot 和 hydrateRoot 都接受一个新的选项，叫做 onRecoverableError ，以防你想在 React 从渲染或 hydrate 过程中发生错误时得到通知，以便 log 。默认情况下，React 会使用[reportError]( https://developer.mozilla.org/en-US/docs/Web/API/reportError)，或者在旧的浏览器中使用 console.error 。\r\n\r\n[请看 React DOM Client 的文档]( https://reactjs.org/docs/react-dom-client.html)。\r\n\r\n**React DOM 服务器**\r\n\r\n这些新的 API 现在从 react-dom/server 导出，并且完全支持服务器上的 streaming Suspense 。\r\n\r\n- renderToPipeableStream：用于 Node 环境下的 streaming 。\r\n- renderToReadableStream：用于现代边缘运行环境，如 Deno 和 Cloudflare Worker 。\r\n\r\n现有的 renderToString 方法继续工作，但不鼓励使用。\r\n\r\n[请看 React DOM 服务器的文档。]( https://reactjs.org/docs/react-dom-server.html)\r\n\r\n### 新的严格模式行为\r\n\r\n在未来，我们希望增加一个功能，允许 React 在保留状态的同时增加和删除 UI 的部分。例如，当用户从一个屏幕切换到另一个屏幕时，React 应该能够立即显示之前的屏幕。要做到这一点，React 将使用与之前相同的组件状态来卸载和重新装载树。\r\n\r\n这个功能将给 React 应用带来更好的开箱即用的性能，但需要组件对效果被多次挂载和销毁有弹性。大多数 effects 将在没有任何变化的情况下工作，但有些 effects 假设它们只被挂载或销毁一次。\r\n\r\n为了帮助发现这些问题，React 18 为严格模式引入了一个新的仅用于开发的检查。这个新的检查将自动卸载并重新挂载每个组件，每当一个组件第一次挂载时，在第二次挂载时恢复之前的状态。\r\n\r\n在这个，React 会挂载组件并创建 effects 。\r\n\r\n```\r\n* React 挂载组件。\r\n  * Layout effects 被创建\r\n  * Effects 被创建\r\n```\r\n\r\n在 React 18 的严格模式下，React 将模拟在开发模式下卸载和重新安装组件：\r\n\r\n```\r\n* React 挂载组件。\r\n  * Layout effects 被创建\r\n  * Effects 被创建\r\n* React 模拟卸载该组件。\r\n  * Layout effects 被销毁\r\n  * Effects 被销毁\r\n* React 模拟用以前的状态挂载组件。\r\n  * Layout effects 被创建\r\n  * Effects 被创建\r\n```\r\n\r\n[See docs for ensuring resusable state here]( https://reactjs.org/docs/strict-mode.html#ensuring-reusable-state).\r\n\r\n### 新 Hooks\r\n\r\n**useId**\r\n\r\nuseId 是一个新的 hooks ，用于在客户端和服务器上生成唯一的 ID ，同时避免了 hydrate 不匹配。它主要适用于与需要唯一 ID 的可访问性 API 集成的组件库。这解决了一个在 React 17 及以下版本中已经存在的问题，但在 React 18 中更加重要，因为新的 streaming server renderer 是不按顺序地渲染 HTML 的。[请看这里的文档]( https://reactjs.org/docs/hooks-reference.html#useid)。\r\n\r\n**useTransition**\r\n\r\nuseTransition 和 startTransition 让你把一些状态更新标记为不紧急。其他状态更新在默认情况下被认为是紧急的。React 将允许紧急状态更新（例如，更新一个文本输入）打断非紧急状态更新（例如，渲染搜索结果列表）。请看这里的[文档]( https://reactjs.org/docs/react-reference.html#transitions)\r\n\r\n**useDeferredValue**\r\n\r\nuseDeferredValue 让你延迟重新渲染树的一个非紧急部分。它类似于 debouncing ，但与之相比有一些优势。没有固定的时间延迟，所以 React 会在第一次渲染反映在屏幕上后立即尝试延迟渲染。延迟渲染是可中断的，不会阻止用户输入。请看这里的[文档]( https://reactjs.org/docs/hooks-reference.html#usedeferredvalue)。\r\n\r\n**useSyncExternalStore**\r\n\r\nuseSyncExternalStore 是一个新的 hooks ，它允许外部存储支持并发读取，强制更新到存储是同步的。在实现对外部数据源的订阅时，它消除了对 useEffect 的需求，并被推荐给任何与 React 外部状态集成的库。请看这里的[文档]( https://reactjs.org/docs/hooks-reference.html#usesyncexternalstore)。\r\n\r\n> useSyncExternalStore 的目的是供库使用，而不是供应用程序代码使用。\r\n\r\n**useInsertionEffect**\r\n\r\nuseInsertionEffect 是一个新的 hooks ，允许 CSS-in-JS 库解决在渲染中注入样式的性能问题。除非你要写一个 CSS-in-JS 库，否则我们不希望你使用这个。这个钩子将在 DOM 被突变后运行，但在布局效果读取新的布局之前。这解决了一个在 React 17 及以下版本中已经存在的问题，但在 React 18 中更加重要，因为 React 在并发渲染时向浏览器让步，给它一个重新计算布局的机会。请看[这里的文档]( https://reactjs.org/docs/hooks-reference.html#useinsertioneffect)。\r\n\r\n> useInsertionEffect 的目的是供库使用，而不是供应用程序代码使用。","content_rendered":"<blockquote>\n<p>以下为 <a href=\"https://reactjs.org/blog/2022/03/29/react-v18.html\" rel=\"nofollow\">React 18 官方博客</a> 的翻译</p>\n</blockquote>\n<p>React 18 现在可以在 npm 上使用了!</p>\n<p>在<a href=\"https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html\" rel=\"nofollow\">上一篇文章</a>中，我们分享了将你的应用程序升级到 React 18 的分步说明。在这篇文章中，我们将概述 React 18 的新内容，以及它对未来的意义。</p>\n<p>我们最新的主要版本包括开箱即用的改进，如自动批处理，新的 API 如 startTransition ，以及支持 Suspense 的 streaming server-side rendering (流式服务器渲染)。</p>\n<p>React 18 中的许多功能都是建立在我们新的并发渲染器之上的，这种幕后变化释放了强大的新功能。Concurrent React 是可选的 - 只有当你使用并发功能时才会启用 - 但我们认为它将对人们构建应用程序的方式产生重大影响。</p>\n<p>我们花了数年时间研究和开发对 React 并发的支持，我们还特别为现有用户提供一个渐进的采用路径。去年夏天，我们成立了<a href=\"https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html\" rel=\"nofollow\">React 18 工作组</a>，以收集来自社区专家的反馈，并确保整个 React 生态系统的顺利升级体验。</p>\n<p>如果你错过了，我们在 2021 年 React Conf 上分享了很多这个愿景：</p>\n<ul>\n<li>在<a href=\"https://www.youtube.com/watch?v=FZ0cG47msEk&amp;list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa\" rel=\"nofollow\">主题演讲</a>中，我们解释了 React 18 如何达成我们的使命，即让开发者轻松构建伟大的用户体验</li>\n<li><a href=\"https://twitter.com/shrutikapoor08\" rel=\"nofollow\">Shruti Kapoor</a> <a href=\"https://www.youtube.com/watch?v=ytudH8je5ko&amp;list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&amp;index=2\" rel=\"nofollow\">演示了如何使用 React 18 的新功能</a></li>\n<li><a href=\"https://twitter.com/shaundai\" rel=\"nofollow\">Shaundai Person</a> 向我们介绍了用<a href=\"https://www.youtube.com/watch?v=pj5N-Khihgc&amp;list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&amp;index=3\" rel=\"nofollow\">Suspense 进行流式服务器渲染</a>的情况</li>\n</ul>\n<p>下面是对这个版本的完整概述，从并发渲染开始。</p>\n<blockquote>\n<p>React Native 用户请注意。React 18 将与新的 React Native 架构一起提供给 React Native 。更多信息，请看<a href=\"https://www.youtube.com/watch?v=FZ0cG47msEk&amp;t=1530s\" rel=\"nofollow\">React Conf 的主题演讲</a>。</p>\n</blockquote>\n<h2>什么是并发 React (Concurrent React)？</h2>\n<p>React 18 中最重要的一点是，我们希望您永远不必考虑：并发性。我们认为这对应用程序开发人员来说基本上是正确的，尽管对库维护者来说，故事可能有点复杂。</p>\n<p>并发本身并不是一个功能。它是一种新的幕后机制，使 React 能够同时准备多个版本的 UI 。你可以把并发看作是一个实现细节-它的价值在于它所解锁的功能。React 在其内部实现中使用了复杂的技术，比如优先级队列和多重缓冲。但你不会在我们的公共 API 中看到这些概念。</p>\n<p>当我们设计 API 时，我们试图向开发者隐藏实现细节。作为一个 React 开发者，你专注于你想要的用户体验，而 React 处理如何提供这种体验。因此，我们不期望 React 开发者知道并发性在幕后是如何工作的。</p>\n<p>然而，Concurrent React 比典型的实现细节更重要 - 它是 React 核心渲染模型的基础性更新。因此，虽然知道并发是如何工作的并不是非常重要，但在高层次上了解它可能是值得的。</p>\n<p>Concurrent React 的一个关键特性是渲染是可中断的。首次升级到 React 18 时，在添加任何并发功能之前，更新的呈现方式与 React 的早期版本相同——在一个单一、不间断、同步的事务中。使用同步渲染，一旦更新开始渲染，在用户可以在屏幕上看到结果之前，任何东西都不能中断它。</p>\n<p>在并发渲染中，情况并非总是如此。React 可能会开始渲染一个更新，在中间停顿一下，然后再继续。它甚至可能完全放弃一个正在进行的渲染。React 保证，即使渲染被打断，用户界面也会显示一致。为了做到这一点，React 要等整个树完成评估（ evaluated ），它他才会执行 DOM 突变。有了这种能力，React 可以在后台准备新的屏幕而不阻塞主线程。这意味着 UI 可以立即响应用户的输入，即使它正处于一个大型的渲染任务中，创造一个流畅的用户体验。</p>\n<p>另一个例子是可重用状态。Concurrent React 可以从屏幕上删除部分用户界面，然后在以后重新使用的状态时将它们添加回来。例如，当用户按 Tab 键离开当前页面并返回时，React 能够将页面恢复到与之前相同的状态。在即将到来的次要版本中，我们计划添加一个名为 &lt;OffScreen&gt; 的新组件来实现此模式。类似地，您将能够使用屏幕外在后台准备新的 UI ，以便在用户显示它之前准备好。</p>\n<p>并发渲染是 React 中一个强大的新工具，我们的大多数新功能都是为了利用它而建立的，包括 Suspense 、transitions 和 streaming server rendering 。但 React 18 只是我们在这个新基础上所要做的事情的开始。</p>\n<h2>逐步采用并发功能</h2>\n<p>从技术上讲，并发渲染是一个突破性的变化。因为并发渲染是可中断的，当它被启用时，组件的行为会略有不同。</p>\n<p>在我们的测试中，我们已经将成千上万的组件升级到 React 18 。我们发现，几乎所有的现有组件都能在并发渲染下 \"正常工作\"，没有任何变化。然而，其中一些可能需要一些额外的迁移工作。虽然这些变化通常很小，但你仍然有能力按照自己的节奏进行。React 18 中的新渲染行为只在你的应用程序中使用新功能的部分启用。</p>\n<p>整体的升级策略是让你的应用在 React 18 上运行而不破坏现有的代码。然后你可以按照自己的节奏逐渐开始添加并发功能。你可以使用 <a href=\"https://reactjs.org/docs/strict-mode.html\" rel=\"nofollow\"></a> 来帮助在开发过程中发现与并发相关的错误。严格模式不影响生产行为，但在开发过程中，它将记录额外的警告，并重复调用那些预计是空闲的函数。它不会发现一切，但它能有效地防止最常见的错误类型。</p>\n<p>在你升级到 React 18 之后，你将能够立即开始使用并发功能。例如，你可以使用 startTransition 在屏幕之间进行导航，而不阻止用户输入。或者使用 DeferredValue 来节制昂贵的重新渲染。</p>\n<p>然而，从长远来看，我们希望你为你的应用程序添加并发功能的主要方式是使用一个支持并发的库或框架。在大多数情况下，你不会直接与并发的 API 交互。例如，开发者在导航到一个新的屏幕时不再调用 startTransition ，路由器库会自动将导航包裹在 startTransition 中。</p>\n<p>库升级到兼容并发可能需要一些时间。我们已经提供了新的 API ，使库更容易利用并发功能。同时，在我们努力逐步迁移 React 生态系统的过程中，请对维护者保持耐心。</p>\n<p>更多信息，请看我们之前的文章。<a href=\"https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html\" rel=\"nofollow\">如何升级到 React 18</a>。</p>\n<h2>Suspense in Data Frameworks</h2>\n<p>在 React 18 中，你可以开始在 Relay 、Next.js 、Hydrogen 或 Remix 等 opinionated 框架中使用 Suspense 进行数据获取。使用 Suspense 进行 hoc data fetching 在技术上是可行的，但仍不建议作为一般策略。</p>\n<p>在未来，我们可能会公开更多的原语（ primitives ），让你更容易用 Suspense 访问你的数据，也许不需要使用 opinionated 框架。然而，当 Suspense 被深度整合到你的应用程序的架构中时，它的效果是最好的：你的路由器、你的数据层和你的服务器渲染环境。因此，从长远来看，我们预计库和框架将在 React 生态系统中发挥关键作用。</p>\n<p>和以前的 React 版本一样，你也可以用 Suspense 在客户端用 React.lazy 进行代码分割。但我们对 Suspense 的愿景一直是远远超过加载代码 - 目标是扩展对 Suspense 的支持，以便最终，同样的 Suspense 可以处理任何异步操作（加载代码、数据、图像等）。</p>\n<h2>Server Components 仍在开发中</h2>\n<p><a href=\"https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html\" rel=\"nofollow\"><strong>Server Components</strong></a> 是一个即将推出的功能，它允许开发人员建立跨越服务器和客户端的应用程序，将客户端应用程序的丰富互动性与传统服务器渲染的性能相结合。服务器组件在本质上并不与 并发 React 耦合，但它被设计为与并发功能（如 Suspense 和 streaming server rendering ）配合使用效果最佳。</p>\n<p>服务器组件仍然是实验性的，但我们希望在 18.x 小版本中发布一个初始版本。同时，我们正在与 Next.js 、Hydrogen 和 Remix 等框架合作，以推进该提案，并使其准备好被广泛采用。</p>\n<h2>React 18 的新内容</h2>\n<h3>新功能: 自动批处理</h3>\n<p>批处理是指 React 将多个状态更新分组到一个重新渲染中，以获得更好的性能。如果没有自动批处理，我们只对 React 事件处理程序内的更新进行批处理。默认情况下，React 不会对 promises 、setTimeout 、native event handlers 或任何其他事件中的更新进行批处理。有了自动批处理，这些更新将被自动批处理。</p>\n<pre><code>// 之前: 只有 React 事件被批处理\nsetTimeout(() =&gt; {\n  setCount(c =&gt; c + 1);\n  setFlag(f =&gt; !f);\n  // React 将渲染两次，每次状态更新一次（无批处理）\n}, 1000);\n\n// 之后: 在 promises 、setTimeout 、native event handlers 中都会被批处理\nsetTimeout(() =&gt; {\n  setCount(c =&gt; c + 1);\n  setFlag(f =&gt; !f);\n  // React 在最后只会重新渲染一次（这就是批处理！）\n}, 1000);\n</code></pre>\n<p>更多信息，请看这篇关于 React 18 中<a href=\"https://github.com/reactwg/react-18/discussions/21\" rel=\"nofollow\">自动批处理以减少渲染</a>的文章。</p>\n<h3>新功能：Transitions</h3>\n<p>Transitions （过渡） 是 React 的一个新概念，用于区分紧急和非紧急更新。</p>\n<ul>\n<li><strong>紧急更新</strong>反映了直接的互动，如输入文字、点击、按压等等。</li>\n<li><strong>过渡更新</strong>则是将用户界面从一个视图过渡到另一个视图。</li>\n</ul>\n<p>像 输入文字、点击或按压 这样的紧急更新，需要立即响应，以符合我们对物理对象行为方式的直觉。否则他们就会感觉 \"不对劲\"。然而，转换是不同的，因为用户并不期望在屏幕上看到每个中间值。</p>\n<p>例如，当您在下拉列表中选择一个筛选器时，您希望当您单击时，筛选器按钮本身会立即响应。然而，实际结果可能会单独过渡。一个小小的延迟将是不可察觉的，而且通常是意料之中的。如果在渲染结果之前再次更改过滤器，则只需查看最新结果。</p>\n<p>通常情况下，为了获得最佳的用户体验，一个用户的输入应该同时导致一个紧急的更新和一个非紧急的更新。你可以在输入事件中使用 startTransition API 来告知 React 哪些是紧急更新，哪些是 \"过渡\"。</p>\n<pre><code>import {startTransition} from 'react';\n\n// 紧急：显示键入的内容\nsetInputValue(input);\n\n// 将内部的任何状态更新标记为 过渡\nstartTransition(() =&gt; {\n  // 过渡：显示结果\n  setSearchQuery(input);\n});\n</code></pre>\n<p>被 startTransition 包裹的更新被当作非紧急事件来处理，如果有更紧急的更新，如点击或按键，则会被打断。如果一个过渡被用户打断（例如，连续输入多个字符），React 会扔掉未完成的的渲染工作，只渲染最新的更新。</p>\n<ul>\n<li>useTransition：一个用于启用 过渡 的钩子，包括一个跟踪待定状态的值。</li>\n<li>startTransition：当钩子不能被使用时，启用 过渡 的方法。</li>\n</ul>\n<p>过渡 将选择进入并发渲染，这允许更新被中断。如果内容重新暂停，过渡 也会告诉 React 继续显示当前内容，同时在后台渲染过渡内容（详见<a href=\"https://github.com/reactjs/rfcs/blob/main/text/0213-suspense-in-react-18.md\" rel=\"nofollow\">Suspense RFC</a>）。</p>\n<p><a href=\"https://reactjs.org/docs/react-api.html#transitions\" rel=\"nofollow\">See docs for transitions here</a></p>\n<h3>新的 Suspense 功能</h3>\n<p>如果组件树的某个部分还没有准备好被显示，Suspense 可以让你声明性地指定它的加载状态。</p>\n<pre><code>&lt;Suspense fallback={&lt;Spinner /&gt;}&gt;\n  &lt;Comments /&gt;\n&lt;/Suspense&gt;\n</code></pre>\n<p>Suspense 使 \"UI 加载状态 \"成为 React 编程模型中的第一类声明性概念。这让我们可以在它上面建立更高层次的功能。</p>\n<p>几年前，我们推出了一个有限的 Suspense 版本。然而，唯一支持的用例是用 React.lazy 拆分代码，而且在服务器上渲染时根本不支持。</p>\n<p>在 React 18 中，我们增加了对服务器上的 Suspense 的支持，并使用并发渲染功能扩展了其功能。</p>\n<p>React 18 中的 Suspense 在与过渡 API 结合时效果最好。如果你在过渡期间暂停，React 将防止已经可见的内容被 fallback 取代。相反，React 会延迟渲染，直到有足够的数据加载，以防止出现糟糕的加载状态。</p>\n<p>更多内容请参见 React 18 中的 <a href=\"https://github.com/reactjs/rfcs/blob/main/text/0213-suspense-in-react-18.md\" rel=\"nofollow\">RFC for Suspense</a>。</p>\n<h3>新的客户端和服务器渲染 API</h3>\n<p>在这个版本中，我们利用机会重新设计了我们为客户端和服务器上的渲染所暴露的 API 。这些变化允许用户继续使用 React 17 模式下的旧 API ，同时升级到 React 18 的新 API 。</p>\n<p><strong>React DOM 客户端</strong></p>\n<p>这些新的 API 现在都是从 react-dom/client 导出的。</p>\n<ul>\n<li>createRoot: 新的方法来创建一个根来渲染或卸载。使用它代替 ReactDOM.render 。没有它，React 18 的新功能就不能工作。</li>\n<li>hydrateRoot: 新的方法来给服务器渲染 hydrate 。使用它代替 R eactDOM.hydrate 与新的 React DOM Server APIs 一起使用。没有它，React 18 的新功能就不能工作。</li>\n</ul>\n<p>createRoot 和 hydrateRoot 都接受一个新的选项，叫做 onRecoverableError ，以防你想在 React 从渲染或 hydrate 过程中发生错误时得到通知，以便 log 。默认情况下，React 会使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/reportError\" rel=\"nofollow\">reportError</a>，或者在旧的浏览器中使用 console.error 。</p>\n<p><a href=\"https://reactjs.org/docs/react-dom-client.html\" rel=\"nofollow\">请看 React DOM Client 的文档</a>。</p>\n<p><strong>React DOM 服务器</strong></p>\n<p>这些新的 API 现在从 react-dom/server 导出，并且完全支持服务器上的 streaming Suspense 。</p>\n<ul>\n<li>renderToPipeableStream：用于 Node 环境下的 streaming 。</li>\n<li>renderToReadableStream：用于现代边缘运行环境，如 Deno 和 Cloudflare Worker 。</li>\n</ul>\n<p>现有的 renderToString 方法继续工作，但不鼓励使用。</p>\n<p><a href=\"https://reactjs.org/docs/react-dom-server.html\" rel=\"nofollow\">请看 React DOM 服务器的文档。</a></p>\n<h3>新的严格模式行为</h3>\n<p>在未来，我们希望增加一个功能，允许 React 在保留状态的同时增加和删除 UI 的部分。例如，当用户从一个屏幕切换到另一个屏幕时，React 应该能够立即显示之前的屏幕。要做到这一点，React 将使用与之前相同的组件状态来卸载和重新装载树。</p>\n<p>这个功能将给 React 应用带来更好的开箱即用的性能，但需要组件对效果被多次挂载和销毁有弹性。大多数 effects 将在没有任何变化的情况下工作，但有些 effects 假设它们只被挂载或销毁一次。</p>\n<p>为了帮助发现这些问题，React 18 为严格模式引入了一个新的仅用于开发的检查。这个新的检查将自动卸载并重新挂载每个组件，每当一个组件第一次挂载时，在第二次挂载时恢复之前的状态。</p>\n<p>在这个，React 会挂载组件并创建 effects 。</p>\n<pre><code>* React 挂载组件。\n  * Layout effects 被创建\n  * Effects 被创建\n</code></pre>\n<p>在 React 18 的严格模式下，React 将模拟在开发模式下卸载和重新安装组件：</p>\n<pre><code>* React 挂载组件。\n  * Layout effects 被创建\n  * Effects 被创建\n* React 模拟卸载该组件。\n  * Layout effects 被销毁\n  * Effects 被销毁\n* React 模拟用以前的状态挂载组件。\n  * Layout effects 被创建\n  * Effects 被创建\n</code></pre>\n<p><a href=\"https://reactjs.org/docs/strict-mode.html#ensuring-reusable-state\" rel=\"nofollow\">See docs for ensuring resusable state here</a>.</p>\n<h3>新 Hooks</h3>\n<p><strong>useId</strong></p>\n<p>useId 是一个新的 hooks ，用于在客户端和服务器上生成唯一的 ID ，同时避免了 hydrate 不匹配。它主要适用于与需要唯一 ID 的可访问性 API 集成的组件库。这解决了一个在 React 17 及以下版本中已经存在的问题，但在 React 18 中更加重要，因为新的 streaming server renderer 是不按顺序地渲染 HTML 的。<a href=\"https://reactjs.org/docs/hooks-reference.html#useid\" rel=\"nofollow\">请看这里的文档</a>。</p>\n<p><strong>useTransition</strong></p>\n<p>useTransition 和 startTransition 让你把一些状态更新标记为不紧急。其他状态更新在默认情况下被认为是紧急的。React 将允许紧急状态更新（例如，更新一个文本输入）打断非紧急状态更新（例如，渲染搜索结果列表）。请看这里的<a href=\"https://reactjs.org/docs/react-reference.html#transitions\" rel=\"nofollow\">文档</a></p>\n<p><strong>useDeferredValue</strong></p>\n<p>useDeferredValue 让你延迟重新渲染树的一个非紧急部分。它类似于 debouncing ，但与之相比有一些优势。没有固定的时间延迟，所以 React 会在第一次渲染反映在屏幕上后立即尝试延迟渲染。延迟渲染是可中断的，不会阻止用户输入。请看这里的<a href=\"https://reactjs.org/docs/hooks-reference.html#usedeferredvalue\" rel=\"nofollow\">文档</a>。</p>\n<p><strong>useSyncExternalStore</strong></p>\n<p>useSyncExternalStore 是一个新的 hooks ，它允许外部存储支持并发读取，强制更新到存储是同步的。在实现对外部数据源的订阅时，它消除了对 useEffect 的需求，并被推荐给任何与 React 外部状态集成的库。请看这里的<a href=\"https://reactjs.org/docs/hooks-reference.html#usesyncexternalstore\" rel=\"nofollow\">文档</a>。</p>\n<blockquote>\n<p>useSyncExternalStore 的目的是供库使用，而不是供应用程序代码使用。</p>\n</blockquote>\n<p><strong>useInsertionEffect</strong></p>\n<p>useInsertionEffect 是一个新的 hooks ，允许 CSS-in-JS 库解决在渲染中注入样式的性能问题。除非你要写一个 CSS-in-JS 库，否则我们不希望你使用这个。这个钩子将在 DOM 被突变后运行，但在布局效果读取新的布局之前。这解决了一个在 React 17 及以下版本中已经存在的问题，但在 React 18 中更加重要，因为 React 在并发渲染时向浏览器让步，给它一个重新计算布局的机会。请看<a href=\"https://reactjs.org/docs/hooks-reference.html#useinsertioneffect\" rel=\"nofollow\">这里的文档</a>。</p>\n<blockquote>\n<p>useInsertionEffect 的目的是供库使用，而不是供应用程序代码使用。</p>\n</blockquote>\n","last_modified":1648601191,"replies":6,"id":843766}]