[{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c74d/97b0/16_large.png?m=1628872984","name":"share","avatar_normal":"https://cdn.v2ex.com/navatar/c74d/97b0/16_normal.png?m=1628872984","title":"分享发现","url":"https://www.v2ex.com/go/share","topics":35151,"footer":"","header":"分享你看到的好玩的，有信息量的，欢迎从这里获取灵感。","title_alternative":"Share","avatar_mini":"https://cdn.v2ex.com/navatar/c74d/97b0/16_mini.png?m=1628872984","stars":4752,"aliases":[],"root":false,"id":16,"parent_node_name":"v2ex"},"member":{"id":68290,"username":"hing","url":"https://www.v2ex.com/u/hing","website":"","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/d216/826c/68290_mini.png?m=1639639682","avatar_normal":"https://cdn.v2ex.com/avatar/d216/826c/68290_normal.png?m=1639639682","avatar_large":"https://cdn.v2ex.com/avatar/d216/826c/68290_large.png?m=1639639682","created":1405614803,"last_modified":1639639682},"last_reply_by":"IwfWcf","last_touched":1647184672,"title":"语雀免费领取 1-4 年会员（必领 1 年）","url":"https://www.v2ex.com/t/839992","created":1647139880,"deleted":0,"content":"语雀领取 1-4 年会员（必领 1 年）\r\n\r\nApp 下载地址： https://www.yuque.com/download\r\n\r\n\r\n语雀领取 1-4 年会员教程来了，新老客户都可以得。\r\n\r\n打开语雀 App ，进入 [我] - [活动福利] - [输入邀请码] ，领取会员\r\n\r\n❶先随便找个他人的邀请码，比如我的 ：\r\n\r\nBB8GCF\r\n\r\n不做强制人头，选择性填写，填了双方都可以得 3 个月会员\r\n\r\n❷然后分享自己的邀请码去，陆续得 36 个月\r\n\r\n\r\n❸然后这个链接 6 个月\r\nhttps://www.yuque.com/e/channel?channel=aliyungaoxiao\r\n\r\n\r\n❹然后这个链接 3 个月\r\nhttps://www.yuque.com/e/channel?channel=aliyunkfz\r\n\r\n\r\n合计 3+36+6+3=48 ，四年的","content_rendered":"<p>语雀领取 1-4 年会员（必领 1 年）</p>\n<p>App 下载地址： <a href=\"https://www.yuque.com/download\" rel=\"nofollow\">https://www.yuque.com/download</a></p>\n<p>语雀领取 1-4 年会员教程来了，新老客户都可以得。</p>\n<p>打开语雀 App ，进入 [我] - [活动福利] - [输入邀请码] ，领取会员</p>\n<p>❶先随便找个他人的邀请码，比如我的 ：</p>\n<p>BB8GCF</p>\n<p>不做强制人头，选择性填写，填了双方都可以得 3 个月会员</p>\n<p>❷然后分享自己的邀请码去，陆续得 36 个月</p>\n<p>❸然后这个链接 6 个月\n<a href=\"https://www.yuque.com/e/channel?channel=aliyungaoxiao\" rel=\"nofollow\">https://www.yuque.com/e/channel?channel=aliyungaoxiao</a></p>\n<p>❹然后这个链接 3 个月\n<a href=\"https://www.yuque.com/e/channel?channel=aliyunkfz\" rel=\"nofollow\">https://www.yuque.com/e/channel?channel=aliyunkfz</a></p>\n<p>合计 3+36+6+3=48 ，四年的</p>\n","last_modified":1647139880,"replies":215,"id":839992},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6f49/22f4/18_large.png?m=1573619774","name":"shanghai","avatar_normal":"https://cdn.v2ex.com/navatar/6f49/22f4/18_normal.png?m=1573619774","title":"上海","url":"https://www.v2ex.com/go/shanghai","topics":2806,"footer":"","header":"","title_alternative":"Shanghai","avatar_mini":"https://cdn.v2ex.com/navatar/6f49/22f4/18_mini.png?m=1573619774","stars":2001,"aliases":[],"root":false,"id":18,"parent_node_name":"cn"},"member":{"id":197754,"username":"424778940","url":"https://www.v2ex.com/u/424778940","website":"","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/f2cd/b577/197754_mini.png?m=1477164086","avatar_normal":"https://cdn.v2ex.com/avatar/f2cd/b577/197754_normal.png?m=1477164086","avatar_large":"https://cdn.v2ex.com/avatar/f2cd/b577/197754_large.png?m=1477164086","created":1477164018,"last_modified":1477164086},"last_reply_by":"WhateverYouLike","last_touched":1647182908,"title":"通勤最后一公里有没有什么好方式?","url":"https://www.v2ex.com/t/839994","created":1647141083,"deleted":0,"content":"如图 上海如何解决家到地铁和地铁到公司的最后一公里问题?\r\n我查了一下好像任何滑行类代步工具不管是不是电动的都是 既不允许上机动车道 也不允许上非机动车道 还不允许上人行道 也就是说你压根就别想用 说好的绿色出行呢?\r\n说自行车吧 好像就算是折叠人力自行车 也是不允许上地铁的","content_rendered":"<p>如图 上海如何解决家到地铁和地铁到公司的最后一公里问题?\n我查了一下好像任何滑行类代步工具不管是不是电动的都是 既不允许上机动车道 也不允许上非机动车道 还不允许上人行道 也就是说你压根就别想用 说好的绿色出行呢?\n说自行车吧 好像就算是折叠人力自行车 也是不允许上地铁的</p>\n","last_modified":1647141083,"replies":62,"id":839994},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1646074667","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1646074667","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":47761,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1646074667","stars":7731,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"id":311431,"username":"sjmcefc2","url":"https://www.v2ex.com/u/sjmcefc2","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/gravatar/ed45fe578f1092dcabc2eaaf904f7374?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/ed45fe578f1092dcabc2eaaf904f7374?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/ed45fe578f1092dcabc2eaaf904f7374?s=73&d=retro","created":1524613863,"last_modified":1524613863},"last_reply_by":"ysc3839","last_touched":1647182583,"title":"现在用的是 windows10，不想重装系统，想着升级到 11，但是又没有 tmp2.0，这个可以解决吗","url":"https://www.v2ex.com/t/839980","created":1647134874,"deleted":0,"content":"现在用的是 windows10 ，不想重装系统，想着升级到 11 ，但是又没有 tmp2.0 ，这个可以解决吗","content_rendered":"<p>现在用的是 windows10 ，不想重装系统，想着升级到 11 ，但是又没有 tmp2.0 ，这个可以解决吗</p>\n","last_modified":1647134874,"replies":45,"id":839980},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1646074667","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1646074667","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":47761,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1646074667","stars":7731,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"id":30753,"username":"felix021","url":"https://www.v2ex.com/u/felix021","website":"http://www.felix021.com","twitter":"","psn":"","github":"felix021","btc":"","location":"上海","tagline":"人生には、三つ坂があるんですって、上り坂、下り坂、まさか。","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/ac0d/7b02/30753_mini.png?m=1588869191","avatar_normal":"https://cdn.v2ex.com/avatar/ac0d/7b02/30753_normal.png?m=1588869191","avatar_large":"https://cdn.v2ex.com/avatar/ac0d/7b02/30753_large.png?m=1588869191","created":1355754362,"last_modified":1588869191},"last_reply_by":"felix021","last_touched":1647183221,"title":"一张证书引发的噱案","url":"https://www.v2ex.com/t/840034","created":1647160912,"deleted":0,"content":"![]( https://image-static.segmentfault.com/388/740/3887409003-622d9ca20764d)\r\n\r\n# - 引 -\r\n\r\n我也没想到在神策数据这大半年能遇到好几次和证书相关的问题。\r\n\r\n# - 起 -\r\n\r\n2021 年 9 月 3 号，一个新客户接入到我们的 SaaS 系统。在某个环节，我们会给客户发个 HTTPS 请求，没想到竟然遇到了个 `SSLHandshakeException`:\r\n\r\n> Caused by: javax.net.ssl.SSLHandshakeException: ... unable to find valid certification path to requested target\r\n\r\n在服务器上用 curl 试一把，也报错：\r\n\r\n```\r\n$ curl -v https://some.domain/\r\nCAfile: /etc/pki/tls/certs/ca-bundle.crt\r\n...\r\ncurl: (60) Peer's Certificate issuer is not recognized.\r\n```\r\n\r\n但用浏览器打开这个 URL ，却是没问题的，这说明问题应该出在我们的服务器端。\r\n\r\n# - 析 -\r\n\r\n我们知道，HTTPS 是靠证书保证通信安全的；但客户端如何保证服务端给的证书是可信的呢？\r\n\r\n由于证书总是由某个证书颁发机构（ Certificate issuer ，或 Certificate Authority ，简写成 CA ）签发的，如果我们事先将一批可信的证书颁发机构存储在本地，就可以在发起请求的时候判断证书是否可信了。\r\n\r\n有时情况会更复杂一些：某些机构不在我们的列表里，但他的证书是由我们信任的某个机构颁发的，我们也认为他是可信的，因此他颁发的证书也是可信的。\r\n\r\n于是这就构成了一个信任链，链的末端是「根证书颁发机构」（ Root CA ），这些机构通常是国际上公认可靠的大型机构，或者国家权威机关背书的机构。\r\n\r\n理解了这点，就可以推测，应当是我们服务器上的机构列表没有及时更新；只要把该客户证书的颁发机构加入本地的列表就应该能解决该问题。\r\n\r\n# - 解 -\r\n\r\n再细看上面 curl 命令的输出，有一行 `CAfile: /etc/pki/tls/certs/ca-bundle.crt`，这就是 curl 使用到的证书颁发机构列表。\r\n\r\n以 `www.baidu.com` 为例，我们可以通过如下命令获取客户证书的信任链：\r\n\r\n```\r\n$ openssl s_client -showcerts -servername server -connect www.baidu.com:443 > cacert.pem\r\n```\r\n\r\n在得到的 `cacert.pem` 中，我们可以看到如下内容（略作简化)：\r\n```\r\nCertificate chain\r\n 0 s:/CN=baidu.com\r\n   i:/CN=GlobalSign Organization Validation CA - SHA256 - G2\r\n\r\n-----BEGIN CERTIFICATE-----\r\nMIIKQDCCCSigAwIBAgIMEZhyT2Z0o9Yhv76iMA0GCSqGSIb3DQEBCwUAMGYxCzAJ\r\n...(略)...\r\nn3XcFtwQLBY9Iuqh8Mn7vtiv5k2azdGsYhZcFBCBAeUoRhDC\r\n-----END CERTIFICATE-----\r\n\r\n 1 s:/CN=GlobalSign Organization Validation CA - SHA256 - G2\r\n   i:/OU=Root CA/CN=GlobalSign Root CA\r\n\r\n-----BEGIN CERTIFICATE-----\r\nMIIEaTCCA1GgAwIBAgILBAAAAAABRE7wQkcwDQYJKoZIhvcNAQELBQAwVzELMAkG\r\n...(略)...\r\nK1pp74P1S8SqtCr4fKGxhZSM9AyHDPSsQPhZSZg=\r\n-----END CERTIFICATE-----\r\n\r\n...(略)...\r\n```\r\n\r\n可以看到里面有两段用 `--BEGIN CERTIFICATE--` 和 `--END CERTIFICATE--` 包起来的 base64 编码字符串，这就是被编码为 PEM 格式（ Privacy Enhanced Mail ）的证书了（有时也会用 .crt 作为扩展名）。\r\n\r\n在 BEGIN 前面有一些摘要，可以帮助我们了解证书的内容，比如 `s:/CN=baidu.com` 表示这个证书的主体（ s 即 subject ）是 baidu.com （ CN 即 common name ），`i:/CN=GlobalSign` 表示它的颁发机构（ i 即 issuer ）是 GlobalSign 。\r\n\r\n因此可以看到，这个 `cacert.pem` 实际上包含了两个证书，一个是百度使用的证书，另一个是颁发该证书的 GlobalSign 这个机构（ CA ）自己的证书。\r\n\r\n通过 `curl --cacert cacert.pem https://www.baidu.com` 我们可以确认，这个信任链能用来验证 www.baidu.com 的证书（实际上我们只需要里面第二个证书，将第一个证书删除，不影响 curl 的执行）。\r\n\r\n回到该客户的情况，我们用相同的方法取得客户证书颁发机构的证书，将它放到 `/etc/pki/ca-trust/source/anchors/` 目录，执行 `update-ca-trust` 将其加入到证书列表中，就可以正常使用 curl 命令来请求了。\r\n\r\n# - 然 -\r\n\r\n没有「但是」的文章不是好文章。\r\n\r\ncurl 正常了，但是我们的 Java 代码依然报错，这说明 java 和 curl 使用了不同的 CA 列表。\r\n\r\n问题倒是好解决，简单搜索一下，就了解到 jre 的证书是存放在 `$JAVA_HOME/jre/lib/security/cacerts` 这个文件里，需要使用专门的 keytool 工具来更新它：\r\n\r\n```\r\n$ keytool -import -trustcacerts -file cacert.pem -alias 证书颁发机构的名称 -keystore $JAVA_HOME/jre/lib/security/cacerts\r\n\r\nEnter keystore password:  changeit （这是 jre 自带的默认密码）\r\n\r\nCertificate was added to keystore\r\n```\r\n\r\n再次验证，Java 代码就可以正常运行了。\r\n\r\n注：如果想要单独验证某个证书，可以这样\r\n\r\n* (1) 先创建一个空的 keyStore （密码为 storePassword ）：\r\n```\r\n$ keytool -genkeypair -alias boguscert -storepass storePassword -keypass secretPassword -keystore keystore -dname \"CN=Developer\"\r\n$ keytool -delete -alias boguscert -storepass storePassword -keystore emptyStore.keystore\r\n```\r\n* (2) 添加证书到该 keyStore：\r\n```\r\n$ keytool -import -trustcacerts -file cacert.pem -alias 机构名称 -keystore keystore\r\n```\r\n* (3) 指定 keyStore 启动 java 程序：\r\n```\r\n$ java -Djavax.net.ssl.trustStore=keystore -Djavax.net.ssl.trustStorePassword=storePassword -cp $CLASS_PATH CLASS_NAME\r\n```\r\n\r\n# - 劫 -\r\n\r\n不巧的是，这周又遇到了一个证书信任的问题，这次是客户的环境向我们的服务器发起请求，报了相同的错误。\r\n\r\n有了前车之鉴，上面这些命令执行起来可谓得心应手，但是这次却不灵了。\r\n\r\n排查过程比较琐碎，也因为陷入思维定势而走了一些弯路，但其实原因很简单，这里就不卖关子了。\r\n\r\n这家客户是一家泛金融类的企业，其生产环境的网络安全级别非常高，不仅有严格的外网访问限制，而且针对所有 https 请求都会默认劫持，用一个自签名证书返回错误信息。\r\n\r\n经过与客户沟通，将神策数据的域名添加到白名单后，问题得以解决。\r\n\r\n# - 故事 -\r\n\r\n讲完了事故，再讲讲故事。\r\n\r\n非对称加密、证书、信任链这一系列发明，构成了现在 web 通信安全的基石，很难想象如果没有这些基础设施，现在互联网还能做些什么。\r\n\r\n但是这里隐藏了一个大 bug：**我们凭什么相信本地这些证书颁发机构是可信的？**\r\n\r\n至少有三种情况会打破这个假设：\r\n\r\n* 本地 CA 列表被污染\r\n\r\n可能你的电脑 /手机被病毒导入了 CA 证书；或者你自己可能就做过这个事情，比如公司网管要求添加公司的自签名证书，又或者你为了能使用 Charles 来抓 https 请求，导入了它自签名的 Root CA 证书。\r\n\r\n* 机构的私钥泄漏\r\n\r\n我没有在公开渠道查到相关的事故（倒是有一个代理商把客户证书的私钥给泄漏了）；如果某个机构的私钥泄漏，这家机构应该离倒闭也不远了。\r\n\r\n* 看起来正经的机构也可能不正经\r\n\r\n各国政府控制的 CA 机构大概都干过些「不干净」的事情（至少有这种冲动），有一些被发现了，有一些还没有。出于本文的安全考虑，这里就不展开细节了。此外，「不被政府控制」的那些机构，就一定干净么？说到底，机构总是被所在国管辖的，当遇到政府行政命令的时候，不一定有反抗的能力。\r\n\r\n综上，理论上并不存在 100% 可靠的通信安全方案。\r\n\r\n如果你的应用对通信安全要求非常严格，连本地的 CA 列表都不相信，可以考虑加入更多的手段来提高通信的安全等级。\r\n\r\n简单一点的场景（例如 app 不想被抓包破解协议），可以自己校验服务器的证书（证书指纹，或者自己指定证书颁发机构列表）；要求更高的场景（例如需要访问内部控制系统），可以给客户端颁发证书，浏览器会在请求时提供证书用于校验，感兴趣的话可以参考 [这个不太完善的项目]( https://github.com/felix021/openssl-selfsign)。\r\n\r\n# - 收 -\r\n\r\n结尾照例做一个小结：\r\n\r\n1. HTTPS 是基于证书链来保证通信安全的；\r\n2. 信任的基石是本地的证书颁发机构（ CA ）列表；\r\n3. 可以通过向本地列表添加 CA 证书的方式来解决需要信任的证书；\r\n4. 本地的 CA 不一定都是可信的；\r\n5. 可以通过更严格的校验，或者客户端证书来加强通信的安全等级。\r\n\r\n最后，神策在北京、上海、成都、武汉、深圳等多地均在招聘开发、产品、QA 等岗位，感兴趣的小伙伴欢迎私信勾搭；也可以点击我的 [内推链接]( https://neitui.italent.cn/sensorsdata/sharejobs?shareId=058b610b-1748-4984-8ac4-5be9c4af6d79) 查看 JD 并投递简历。\r\n\r\n\r\n# 关注公众号，查看更多历史文章\r\n\r\n\r\n```\r\n   ▄▄▄▄▄▄▄   ▄      ▄▄▄▄ ▄▄▄▄▄▄▄  \r\n   █ ▄▄▄ █ ▄▀ ▄ ▀██▄ ▀█▄ █ ▄▄▄ █  \r\n   █ ███ █  █  █  █▀▀▀█▀ █ ███ █  \r\n   █▄▄▄▄▄█ ▄ █▀█ █▀█ ▄▀█ █▄▄▄▄▄█  \r\n   ▄▄▄ ▄▄▄▄█  ▀▄█▀▀▀█ ▄█▄▄   ▄    \r\n   ▄█▄▄▄▄▄▀▄▀▄██   ▀ ▄  █▀▄▄▀▄▄█  \r\n   █ █▀▄▀▄▄▀▀█▄▀█▄▀█████▀█▀▀█ █▄  \r\n    ▀▀  █▄██▄█▀  █ ▀█▀ ▀█▀ ▄▀▀▄█  \r\n   █▀ ▀ ▄▄▄▄▄▄▀▄██  █ ▄████▀▀ █▄  \r\n   ▄▀▄▄▄ ▄ ▀▀▄████▀█▀  ▀ █▄▄▄▀▄█  \r\n   ▄▀▀██▄▄  █▀▄▀█▀▀ █▀ ▄▄▄██▀ ▀   \r\n   ▄▄▄▄▄▄▄ █ █▀ ▀▀   ▄██ ▄ █▄▀██  \r\n   █ ▄▄▄ █ █▄ ▀▄▀ ▀██  █▄▄▄█▄  ▀  \r\n   █ ███ █ ▄ ███▀▀▀█▄ █▀▄ ██▄ ▀█  \r\n   █▄▄▄▄▄█ ██ ▄█▀█  █ ▀██▄▄▄  █▄  \r\n```","content_rendered":"<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://image-static.segmentfault.com/388/740/3887409003-622d9ca20764d\"/></p>\n<h1>- 引 -</h1>\n<p>我也没想到在神策数据这大半年能遇到好几次和证书相关的问题。</p>\n<h1>- 起 -</h1>\n<p>2021 年 9 月 3 号，一个新客户接入到我们的 SaaS 系统。在某个环节，我们会给客户发个 HTTPS 请求，没想到竟然遇到了个 <code>SSLHandshakeException</code>:</p>\n<blockquote>\n<p>Caused by: javax.net.ssl.SSLHandshakeException: ... unable to find valid certification path to requested target</p>\n</blockquote>\n<p>在服务器上用 curl 试一把，也报错：</p>\n<pre><code>$ curl -v https://some.domain/\nCAfile: /etc/pki/tls/certs/ca-bundle.crt\n...\ncurl: (60) Peer's Certificate issuer is not recognized.\n</code></pre>\n<p>但用浏览器打开这个 URL ，却是没问题的，这说明问题应该出在我们的服务器端。</p>\n<h1>- 析 -</h1>\n<p>我们知道，HTTPS 是靠证书保证通信安全的；但客户端如何保证服务端给的证书是可信的呢？</p>\n<p>由于证书总是由某个证书颁发机构（ Certificate issuer ，或 Certificate Authority ，简写成 CA ）签发的，如果我们事先将一批可信的证书颁发机构存储在本地，就可以在发起请求的时候判断证书是否可信了。</p>\n<p>有时情况会更复杂一些：某些机构不在我们的列表里，但他的证书是由我们信任的某个机构颁发的，我们也认为他是可信的，因此他颁发的证书也是可信的。</p>\n<p>于是这就构成了一个信任链，链的末端是「根证书颁发机构」（ Root CA ），这些机构通常是国际上公认可靠的大型机构，或者国家权威机关背书的机构。</p>\n<p>理解了这点，就可以推测，应当是我们服务器上的机构列表没有及时更新；只要把该客户证书的颁发机构加入本地的列表就应该能解决该问题。</p>\n<h1>- 解 -</h1>\n<p>再细看上面 curl 命令的输出，有一行 <code>CAfile: /etc/pki/tls/certs/ca-bundle.crt</code>，这就是 curl 使用到的证书颁发机构列表。</p>\n<p>以 <code><a href=\"http://www.baidu.com\" rel=\"nofollow\">www.baidu.com</a></code> 为例，我们可以通过如下命令获取客户证书的信任链：</p>\n<pre><code>$ openssl s_client -showcerts -servername server -connect www.baidu.com:443 &gt; cacert.pem\n</code></pre>\n<p>在得到的 <code>cacert.pem</code> 中，我们可以看到如下内容（略作简化)：</p>\n<pre><code>Certificate chain\n 0 s:/CN=baidu.com\n   i:/CN=GlobalSign Organization Validation CA - SHA256 - G2\n\n-----BEGIN CERTIFICATE-----\nMIIKQDCCCSigAwIBAgIMEZhyT2Z0o9Yhv76iMA0GCSqGSIb3DQEBCwUAMGYxCzAJ\n...(略)...\nn3XcFtwQLBY9Iuqh8Mn7vtiv5k2azdGsYhZcFBCBAeUoRhDC\n-----END CERTIFICATE-----\n\n 1 s:/CN=GlobalSign Organization Validation CA - SHA256 - G2\n   i:/OU=Root CA/CN=GlobalSign Root CA\n\n-----BEGIN CERTIFICATE-----\nMIIEaTCCA1GgAwIBAgILBAAAAAABRE7wQkcwDQYJKoZIhvcNAQELBQAwVzELMAkG\n...(略)...\nK1pp74P1S8SqtCr4fKGxhZSM9AyHDPSsQPhZSZg=\n-----END CERTIFICATE-----\n\n...(略)...\n</code></pre>\n<p>可以看到里面有两段用 <code>--BEGIN CERTIFICATE--</code> 和 <code>--END CERTIFICATE--</code> 包起来的 base64 编码字符串，这就是被编码为 PEM 格式（ Privacy Enhanced Mail ）的证书了（有时也会用 .crt 作为扩展名）。</p>\n<p>在 BEGIN 前面有一些摘要，可以帮助我们了解证书的内容，比如 <code>s:/CN=<a href=\"http://baidu.com\" rel=\"nofollow\">baidu.com</a></code> 表示这个证书的主体（ s 即 subject ）是 <a href=\"http://baidu.com\" rel=\"nofollow\">baidu.com</a> （ CN 即 common name ），<code>i:/CN=GlobalSign</code> 表示它的颁发机构（ i 即 issuer ）是 GlobalSign 。</p>\n<p>因此可以看到，这个 <code>cacert.pem</code> 实际上包含了两个证书，一个是百度使用的证书，另一个是颁发该证书的 GlobalSign 这个机构（ CA ）自己的证书。</p>\n<p>通过 <code>curl --cacert cacert.pem <a href=\"https://www.baidu.com\" rel=\"nofollow\">https://www.baidu.com</a></code> 我们可以确认，这个信任链能用来验证 <a href=\"http://www.baidu.com\" rel=\"nofollow\">www.baidu.com</a> 的证书（实际上我们只需要里面第二个证书，将第一个证书删除，不影响 curl 的执行）。</p>\n<p>回到该客户的情况，我们用相同的方法取得客户证书颁发机构的证书，将它放到 <code>/etc/pki/ca-trust/source/anchors/</code> 目录，执行 <code>update-ca-trust</code> 将其加入到证书列表中，就可以正常使用 curl 命令来请求了。</p>\n<h1>- 然 -</h1>\n<p>没有「但是」的文章不是好文章。</p>\n<p>curl 正常了，但是我们的 Java 代码依然报错，这说明 java 和 curl 使用了不同的 CA 列表。</p>\n<p>问题倒是好解决，简单搜索一下，就了解到 jre 的证书是存放在 <code>$JAVA_HOME/jre/lib/security/cacerts</code> 这个文件里，需要使用专门的 keytool 工具来更新它：</p>\n<pre><code>$ keytool -import -trustcacerts -file cacert.pem -alias 证书颁发机构的名称 -keystore $JAVA_HOME/jre/lib/security/cacerts\n\nEnter keystore password:  changeit （这是 jre 自带的默认密码）\n\nCertificate was added to keystore\n</code></pre>\n<p>再次验证，Java 代码就可以正常运行了。</p>\n<p>注：如果想要单独验证某个证书，可以这样</p>\n<ul>\n<li>(1) 先创建一个空的 keyStore （密码为 storePassword ）：</li>\n</ul>\n<pre><code>$ keytool -genkeypair -alias boguscert -storepass storePassword -keypass secretPassword -keystore keystore -dname \"CN=Developer\"\n$ keytool -delete -alias boguscert -storepass storePassword -keystore emptyStore.keystore\n</code></pre>\n<ul>\n<li>(2) 添加证书到该 keyStore：</li>\n</ul>\n<pre><code>$ keytool -import -trustcacerts -file cacert.pem -alias 机构名称 -keystore keystore\n</code></pre>\n<ul>\n<li>(3) 指定 keyStore 启动 java 程序：</li>\n</ul>\n<pre><code>$ java -Djavax.net.ssl.trustStore=keystore -Djavax.net.ssl.trustStorePassword=storePassword -cp $CLASS_PATH CLASS_NAME\n</code></pre>\n<h1>- 劫 -</h1>\n<p>不巧的是，这周又遇到了一个证书信任的问题，这次是客户的环境向我们的服务器发起请求，报了相同的错误。</p>\n<p>有了前车之鉴，上面这些命令执行起来可谓得心应手，但是这次却不灵了。</p>\n<p>排查过程比较琐碎，也因为陷入思维定势而走了一些弯路，但其实原因很简单，这里就不卖关子了。</p>\n<p>这家客户是一家泛金融类的企业，其生产环境的网络安全级别非常高，不仅有严格的外网访问限制，而且针对所有 https 请求都会默认劫持，用一个自签名证书返回错误信息。</p>\n<p>经过与客户沟通，将神策数据的域名添加到白名单后，问题得以解决。</p>\n<h1>- 故事 -</h1>\n<p>讲完了事故，再讲讲故事。</p>\n<p>非对称加密、证书、信任链这一系列发明，构成了现在 web 通信安全的基石，很难想象如果没有这些基础设施，现在互联网还能做些什么。</p>\n<p>但是这里隐藏了一个大 bug：<strong>我们凭什么相信本地这些证书颁发机构是可信的？</strong></p>\n<p>至少有三种情况会打破这个假设：</p>\n<ul>\n<li>本地 CA 列表被污染</li>\n</ul>\n<p>可能你的电脑 /手机被病毒导入了 CA 证书；或者你自己可能就做过这个事情，比如公司网管要求添加公司的自签名证书，又或者你为了能使用 Charles 来抓 https 请求，导入了它自签名的 Root CA 证书。</p>\n<ul>\n<li>机构的私钥泄漏</li>\n</ul>\n<p>我没有在公开渠道查到相关的事故（倒是有一个代理商把客户证书的私钥给泄漏了）；如果某个机构的私钥泄漏，这家机构应该离倒闭也不远了。</p>\n<ul>\n<li>看起来正经的机构也可能不正经</li>\n</ul>\n<p>各国政府控制的 CA 机构大概都干过些「不干净」的事情（至少有这种冲动），有一些被发现了，有一些还没有。出于本文的安全考虑，这里就不展开细节了。此外，「不被政府控制」的那些机构，就一定干净么？说到底，机构总是被所在国管辖的，当遇到政府行政命令的时候，不一定有反抗的能力。</p>\n<p>综上，理论上并不存在 100% 可靠的通信安全方案。</p>\n<p>如果你的应用对通信安全要求非常严格，连本地的 CA 列表都不相信，可以考虑加入更多的手段来提高通信的安全等级。</p>\n<p>简单一点的场景（例如 app 不想被抓包破解协议），可以自己校验服务器的证书（证书指纹，或者自己指定证书颁发机构列表）；要求更高的场景（例如需要访问内部控制系统），可以给客户端颁发证书，浏览器会在请求时提供证书用于校验，感兴趣的话可以参考 <a href=\"https://github.com/felix021/openssl-selfsign\" rel=\"nofollow\">这个不太完善的项目</a>。</p>\n<h1>- 收 -</h1>\n<p>结尾照例做一个小结：</p>\n<ol>\n<li>HTTPS 是基于证书链来保证通信安全的；</li>\n<li>信任的基石是本地的证书颁发机构（ CA ）列表；</li>\n<li>可以通过向本地列表添加 CA 证书的方式来解决需要信任的证书；</li>\n<li>本地的 CA 不一定都是可信的；</li>\n<li>可以通过更严格的校验，或者客户端证书来加强通信的安全等级。</li>\n</ol>\n<p>最后，神策在北京、上海、成都、武汉、深圳等多地均在招聘开发、产品、QA 等岗位，感兴趣的小伙伴欢迎私信勾搭；也可以点击我的 <a href=\"https://neitui.italent.cn/sensorsdata/sharejobs?shareId=058b610b-1748-4984-8ac4-5be9c4af6d79\" rel=\"nofollow\">内推链接</a> 查看 JD 并投递简历。</p>\n<h1>关注公众号，查看更多历史文章</h1>\n<pre><code>   ▄▄▄▄▄▄▄   ▄      ▄▄▄▄ ▄▄▄▄▄▄▄  \n   █ ▄▄▄ █ ▄▀ ▄ ▀██▄ ▀█▄ █ ▄▄▄ █  \n   █ ███ █  █  █  █▀▀▀█▀ █ ███ █  \n   █▄▄▄▄▄█ ▄ █▀█ █▀█ ▄▀█ █▄▄▄▄▄█  \n   ▄▄▄ ▄▄▄▄█  ▀▄█▀▀▀█ ▄█▄▄   ▄    \n   ▄█▄▄▄▄▄▀▄▀▄██   ▀ ▄  █▀▄▄▀▄▄█  \n   █ █▀▄▀▄▄▀▀█▄▀█▄▀█████▀█▀▀█ █▄  \n    ▀▀  █▄██▄█▀  █ ▀█▀ ▀█▀ ▄▀▀▄█  \n   █▀ ▀ ▄▄▄▄▄▄▀▄██  █ ▄████▀▀ █▄  \n   ▄▀▄▄▄ ▄ ▀▀▄████▀█▀  ▀ █▄▄▄▀▄█  \n   ▄▀▀██▄▄  █▀▄▀█▀▀ █▀ ▄▄▄██▀ ▀   \n   ▄▄▄▄▄▄▄ █ █▀ ▀▀   ▄██ ▄ █▄▀██  \n   █ ▄▄▄ █ █▄ ▀▄▀ ▀██  █▄▄▄█▄  ▀  \n   █ ███ █ ▄ ███▀▀▀█▄ █▀▄ ██▄ ▀█  \n   █▄▄▄▄▄█ ██ ▄█▀█  █ ▀██▄▄▄  █▄  \n</code></pre>\n","last_modified":1647160912,"replies":41,"id":840034},{"node":{"avatar_large":"/static/img/node_default_large.png","name":"outdoor","avatar_normal":"/static/img/node_default_normal.png","title":"户外运动","url":"https://www.v2ex.com/go/outdoor","topics":16,"footer":"","header":"","title_alternative":"户外运动","avatar_mini":"/static/img/node_default_mini.png","stars":13,"aliases":[],"root":false,"id":845,"parent_node_name":""},"member":{"id":226414,"username":"glouhao","url":"https://www.v2ex.com/u/glouhao","website":"","twitter":null,"psn":null,"github":null,"btc":null,"location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/14d3/fd79/226414_mini.png?m=1640139002","avatar_normal":"https://cdn.v2ex.com/avatar/14d3/fd79/226414_normal.png?m=1640139002","avatar_large":"https://cdn.v2ex.com/avatar/14d3/fd79/226414_large.png?m=1640139002","created":1492417271,"last_modified":1640139002},"last_reply_by":"hyshuang2006","last_touched":1647116986,"title":"五千米 33 分才跑完","url":"https://www.v2ex.com/t/839987","created":1647138586,"deleted":0,"content":"常年不运动，没啥体育爱好，最近活动了点，走了点路。今天趁迟到请了个假，去跑了下，感觉比走路快了没多少。应该是比初中比赛慢多了。\n\n听说咱们大陆女兵是负重 25 分，台湾男兵是不负重 25 分，我这身体好差。","content_rendered":"常年不运动，没啥体育爱好，最近活动了点，走了点路。今天趁迟到请了个假，去跑了下，感觉比走路快了没多少。应该是比初中比赛慢多了。<br /><br />听说咱们大陆女兵是负重 25 分，台湾男兵是不负重 25 分，我这身体好差。","last_modified":1647138586,"replies":39,"id":839987},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/df7f/28ac/791_large.png?m=1644497171","name":"fe","avatar_normal":"https://cdn.v2ex.com/navatar/df7f/28ac/791_normal.png?m=1644497171","title":"前端开发","url":"https://www.v2ex.com/go/fe","topics":2427,"footer":"","header":"","title_alternative":"Frontend","avatar_mini":"https://cdn.v2ex.com/navatar/df7f/28ac/791_mini.png?m=1644497171","stars":1178,"aliases":[],"root":false,"id":791,"parent_node_name":"programmer"},"member":{"id":44039,"username":"Colorful","url":"https://www.v2ex.com/u/Colorful","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/gravatar/fbd0e1ac180739637d72ae35dc8895c6?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/fbd0e1ac180739637d72ae35dc8895c6?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/fbd0e1ac180739637d72ae35dc8895c6?s=73&d=retro","created":1376701299,"last_modified":1376701299},"last_reply_by":"JQSM","last_touched":1647183249,"title":"不科学啊，居然没有人说，深圳停地铁和公交的事情？","url":"https://www.v2ex.com/t/840077","created":1647175795,"deleted":0,"content":"如题所示","content_rendered":"<p>如题所示</p>\n","last_modified":1647175795,"replies":39,"id":840077},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1630643913","name":"apple","avatar_normal":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1630643913","title":"Apple","url":"https://www.v2ex.com/go/apple","topics":17838,"footer":"","header":"设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。","title_alternative":"Apple","avatar_mini":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1630643913","stars":2093,"aliases":[],"root":false,"id":184,"parent_node_name":"hardware"},"member":{"id":487856,"username":"xiaofine1122","url":"https://www.v2ex.com/u/xiaofine1122","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/avatar/096f/1beb/487856_mini.png?m=1647146885","avatar_normal":"https://cdn.v2ex.com/avatar/096f/1beb/487856_normal.png?m=1647146885","avatar_large":"https://cdn.v2ex.com/avatar/096f/1beb/487856_large.png?m=1647146885","created":1588690523,"last_modified":1647146885},"last_reply_by":"xtinput","last_touched":1647180050,"title":"关于断头 MacBook 的某些问题","url":"https://www.v2ex.com/t/840002","created":1647146920,"deleted":0,"content":"最近看到断头 MacBook 的又火起来了，刚好现在想尝试下 macos ，体验下苹果的生态，但是之前折腾黑苹果体验很不好，各种奇奇怪怪的问题。\r\n请问：\r\n1.断头的 macbook 值得入吗，因为看到新的 ARM 芯片的笔记本各种软件的兼容问题，还是比较犹豫\r\n2.如果入的话 17 款的 16G 内容够用吗，后端开发狗","content_rendered":"<p>最近看到断头 MacBook 的又火起来了，刚好现在想尝试下 macos ，体验下苹果的生态，但是之前折腾黑苹果体验很不好，各种奇奇怪怪的问题。\n请问：\n1.断头的 macbook 值得入吗，因为看到新的 ARM 芯片的笔记本各种软件的兼容问题，还是比较犹豫\n2.如果入的话 17 款的 16G 内容够用吗，后端开发狗</p>\n","last_modified":1647147026,"replies":37,"id":840002},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1629391393","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1629391393","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":182439,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1629391393","stars":3435,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"id":552654,"username":"xingHI","url":"https://www.v2ex.com/u/xingHI","website":"","twitter":null,"psn":null,"github":null,"btc":null,"location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/gravatar/0071fe3c72325deedd95e71a40dc19bc?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/0071fe3c72325deedd95e71a40dc19bc?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/0071fe3c72325deedd95e71a40dc19bc?s=73&d=retro","created":1628163542,"last_modified":1628163542},"last_reply_by":"liveoppo","last_touched":1647184195,"title":"各位 v 友啊，请问一下对于 notion、语雀、wolai、印象笔记等这些你们是什么看法或者有什么可以推荐？","url":"https://www.v2ex.com/t/840045","created":1647164961,"deleted":0,"content":"各位 v 友啊，请问一下对于 notion 、语雀、wolai 、印象笔记等这些你们是什么看法或者有什么可以推荐？。\r\n我目前的情况是，主要用 notion,因为：  \r\n\t1. 我体验过类似的比如，wolai 、语雀，还是 notion 的功能最强大；    \r\n\t2. 我已经在 notion 有了较多的笔记，转移非常麻烦；      \r\n\t3. 我是学生，用 noton 是免费的。    \r\n我担忧的东西，对于 notion：    \r\n\t1. 害怕被墙，并不是被墙之后我无法访问，是被墙后不方便共享；   \r\n        2. 对于 notion 的安全性，当然这类线上的笔记都不是特别安全，但是 notion 对于个人用户，根本没有二次验证只需要账号密码就可以登陆，对于我们教育邮箱来说就更加不安全；\r\n  \r\n由于存在这些担忧，我时常去体验同类软件，也在寻找更好的解决方式，因为我现在在 notion 的笔记量还不是很大，我怕未来随着笔记的慢慢增加，迁移成本过大。\r\n\r\n本人使用背景：\r\n大学生，开始是计算机专业后面转到法学专业，自认为有计算机基础和英语基础。\r\n笔记大多是对于专业学习的记录和总结","content_rendered":"<p>各位 v 友啊，请问一下对于 notion 、语雀、wolai 、印象笔记等这些你们是什么看法或者有什么可以推荐？。\n我目前的情况是，主要用 notion,因为：<br/>\n1. 我体验过类似的比如，wolai 、语雀，还是 notion 的功能最强大；<br/>\n2. 我已经在 notion 有了较多的笔记，转移非常麻烦；<br/>\n3. 我是学生，用 noton 是免费的。<br/>\n我担忧的东西，对于 notion：<br/>\n1. 害怕被墙，并不是被墙之后我无法访问，是被墙后不方便共享；<br/>\n2. 对于 notion 的安全性，当然这类线上的笔记都不是特别安全，但是 notion 对于个人用户，根本没有二次验证只需要账号密码就可以登陆，对于我们教育邮箱来说就更加不安全；</p>\n<p>由于存在这些担忧，我时常去体验同类软件，也在寻找更好的解决方式，因为我现在在 notion 的笔记量还不是很大，我怕未来随着笔记的慢慢增加，迁移成本过大。</p>\n<p>本人使用背景：\n大学生，开始是计算机专业后面转到法学专业，自认为有计算机基础和英语基础。\n笔记大多是对于专业学习的记录和总结</p>\n","last_modified":1647165049,"replies":37,"id":840045},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/9f61/408e/56_large.png?m=1628212285","name":"internet","avatar_normal":"https://cdn.v2ex.com/navatar/9f61/408e/56_normal.png?m=1628212285","title":"互联网","url":"https://www.v2ex.com/go/internet","topics":3102,"footer":"","header":"In Internet we trust","title_alternative":"Internet","avatar_mini":"https://cdn.v2ex.com/navatar/9f61/408e/56_mini.png?m=1628212285","stars":952,"aliases":[],"root":false,"id":56,"parent_node_name":"computer"},"member":{"id":556900,"username":"V9NN","url":"https://www.v2ex.com/u/V9NN","website":"","twitter":null,"psn":null,"github":null,"btc":null,"location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/gravatar/ab5a7987d56e681a68ed920468ec7186?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/ab5a7987d56e681a68ed920468ec7186?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/ab5a7987d56e681a68ed920468ec7186?s=73&d=retro","created":1632620580,"last_modified":1646439710},"last_reply_by":"Ayersneo","last_touched":1647177218,"title":"抢注“支付宝号”要点总结","url":"https://www.v2ex.com/t/839973","created":1647130018,"deleted":0,"content":"支付宝号开放抢注了！\r\n\r\n很多人看了还是没操作成功，这里要理解两个要点：\r\n\r\n1 、解绑邮箱（因为支付宝号实质上是一个省了统一后缀的邮箱账号：@alipay.tech ）；\r\n2 、去绑定一个绑了别的支付宝的手机号，造成“顶号”，然后出现支付宝号的设置界面。\r\n\r\n操作步骤（全程支付宝 app 操作）：\r\n1 ）解绑邮箱；\r\n2 ）换绑手机号（该手机号已绑定他人支付宝——最好熟人的）；\r\n3 ）收验证码后出现“支付宝号”设置界面；\r\n4 ）换绑回原来的手机号；\r\n5 ）回支付宝主界面能看到已经抢注成功的支付宝号。\r\n\r\n以后可以直接用这个支付宝号收取转账。\r\n\r\n尽量不要用自己的同身份证号“顶号（手机号）”，很多人直接修改手机号成功，而没有出现设置支付宝号的界面。\r\n建议和熟人互顶绑定手机号的操作。\r\n\r\n抢注成功一年之后才能再修改。\r\n\r\n这里是前情提要：/t/839885","content_rendered":"支付宝号开放抢注了！<br /><br />很多人看了还是没操作成功，这里要理解两个要点：<br /><br />1 、解绑邮箱（因为支付宝号实质上是一个省了统一后缀的邮箱账号：@alipay.tech ）；<br />2 、去绑定一个绑了别的支付宝的手机号，造成“顶号”，然后出现支付宝号的设置界面。<br /><br />操作步骤（全程支付宝 app 操作）：<br />1 ）解绑邮箱；<br />2 ）换绑手机号（该手机号已绑定他人支付宝——最好熟人的）；<br />3 ）收验证码后出现“支付宝号”设置界面；<br />4 ）换绑回原来的手机号；<br />5 ）回支付宝主界面能看到已经抢注成功的支付宝号。<br /><br />以后可以直接用这个支付宝号收取转账。<br /><br />尽量不要用自己的同身份证号“顶号（手机号）”，很多人直接修改手机号成功，而没有出现设置支付宝号的界面。<br />建议和熟人互顶绑定手机号的操作。<br /><br />抢注成功一年之后才能再修改。<br /><br />这里是前情提要：/t/839885","last_modified":1647137594,"replies":35,"id":839973},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1646074667","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1646074667","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":47760,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1646074667","stars":7731,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"id":340358,"username":"zwnozhuce","url":"https://www.v2ex.com/u/zwnozhuce","website":"","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/df16/43fd/340358_mini.png?m=1584192513","avatar_normal":"https://cdn.v2ex.com/avatar/df16/43fd/340358_normal.png?m=1584192513","avatar_large":"https://cdn.v2ex.com/avatar/df16/43fd/340358_large.png?m=1584192513","created":1533969633,"last_modified":1584192513},"last_reply_by":"a852695","last_touched":1647180798,"title":"程序员的人生不要设限","url":"https://www.v2ex.com/t/840026","created":1647158773,"deleted":0,"content":"接上次发的帖子讨论,我觉得程序员的人生不应该给自己设限.\r\n\r\n比如我是后端程序员,前端就不接触和学习或者前端人员就不接触学习其它的技术.\r\n\r\n上面的做法无疑降低了自己的竞争性,一个程序员应该是努力培养自己多方面的东西,比如根据需要学习相关技术,\r\n或者学习市场、运营相关知识,努力扩展自己的上限,不要给自己设置限制.当前就业环境可能要求我们精通某项技术然后去扭螺丝钉,但是如果离开这个公司,作为个体我能做什么.培养不依赖公司依然能让自己活下去的技术和能力很重要.单一技能可能会让我们没有太多选择性,最终越来越没有竞争里.多方面的技能会让我们在未来面对裁员或各种大环境变化的场景从容应对甚至可以快速切换职业角色.\r\n\r\n总结一句话,人生不设限,努力扩展上限.不要当一颗随时可能被替换的螺丝钉.\r\n\r\n\r\n睡醒有感 2022.03.13","content_rendered":"<p>接上次发的帖子讨论,我觉得程序员的人生不应该给自己设限.</p>\n<p>比如我是后端程序员,前端就不接触和学习或者前端人员就不接触学习其它的技术.</p>\n<p>上面的做法无疑降低了自己的竞争性,一个程序员应该是努力培养自己多方面的东西,比如根据需要学习相关技术,\n或者学习市场、运营相关知识,努力扩展自己的上限,不要给自己设置限制.当前就业环境可能要求我们精通某项技术然后去扭螺丝钉,但是如果离开这个公司,作为个体我能做什么.培养不依赖公司依然能让自己活下去的技术和能力很重要.单一技能可能会让我们没有太多选择性,最终越来越没有竞争里.多方面的技能会让我们在未来面对裁员或各种大环境变化的场景从容应对甚至可以快速切换职业角色.</p>\n<p>总结一句话,人生不设限,努力扩展上限.不要当一颗随时可能被替换的螺丝钉.</p>\n<p>睡醒有感 2022.03.13</p>\n","last_modified":1647158863,"replies":34,"id":840026},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/4ea0/6fbc/770_large.png?m=1646757548","name":"career","avatar_normal":"https://cdn.v2ex.com/navatar/4ea0/6fbc/770_normal.png?m=1646757548","title":"职场话题","url":"https://www.v2ex.com/go/career","topics":12819,"footer":"","header":"这里，我们聊聊那些工作中遇到的开心和不开心的事。","title_alternative":"Career","avatar_mini":"https://cdn.v2ex.com/navatar/4ea0/6fbc/770_mini.png?m=1646757548","stars":2288,"aliases":[],"root":false,"id":770,"parent_node_name":"work"},"member":{"id":546916,"username":"chlinlearn","url":"https://www.v2ex.com/u/chlinlearn","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/avatar/069e/261b/546916_mini.png?m=1645672204","avatar_normal":"https://cdn.v2ex.com/avatar/069e/261b/546916_normal.png?m=1645672204","avatar_large":"https://cdn.v2ex.com/avatar/069e/261b/546916_large.png?m=1645672204","avatar_xlarge":"https://cdn.v2ex.com/avatar/069e/261b/546916_xlarge.png?m=1645672204","avatar_xxlarge":"https://cdn.v2ex.com/avatar/069e/261b/546916_xlarge.png?m=1645672204","created":1622528971,"last_modified":1645672204},"last_reply_by":"chenrui920614","last_touched":1647184589,"title":"互联网寒冬已来？网传大公司都开始大裁员，真的假的？","url":"https://www.v2ex.com/t/840068","created":1647172816,"deleted":0,"content":"","content_rendered":"","last_modified":1647172816,"replies":25,"id":840068},{"node":{"avatar_large":"/static/img/node_default_large.png","name":"photograph","avatar_normal":"/static/img/node_default_normal.png","title":"摄影","url":"https://www.v2ex.com/go/photograph","topics":420,"footer":"","header":"","title_alternative":"Photograph","avatar_mini":"/static/img/node_default_mini.png","stars":926,"aliases":[],"root":false,"id":27,"parent_node_name":"life"},"member":{"id":117578,"username":"chnhyg","url":"https://www.v2ex.com/u/chnhyg","website":"https://www.uxwind.com/","twitter":"chnhyg","psn":"","github":"chnhyg","btc":"","location":"Shenzhen, China","tagline":"一分耕耘，一分收获","bio":"Creator, Designer, Engineer.\r\n\r\n大黄狗 | 人工智能（障）基金分析助手\r\nhttps://funds.uxwind.com/","avatar_mini":"https://cdn.v2ex.com/gravatar/8d419e505f4354efedb47db6d468c6e0?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/8d419e505f4354efedb47db6d468c6e0?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/8d419e505f4354efedb47db6d468c6e0?s=73&d=retro","created":1431963257,"last_modified":1647133007},"last_reply_by":"nojsja","last_touched":1647155695,"title":"摄影作品一则，后期萌新的第一个后期作品","url":"https://www.v2ex.com/t/839975","created":1647133135,"deleted":0,"content":"后期萌新的第一次后期编辑，从思考、到试错、到成片，历时接近一个星期，耗时超过十个小时。\r\n\r\n![无题]( https://pbs.twimg.com/media/FNsJyVMakAMJjAd?format=jpg&name=orig)","content_rendered":"<p>后期萌新的第一次后期编辑，从思考、到试错、到成片，历时接近一个星期，耗时超过十个小时。</p>\n<p><img alt=\"无题\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://pbs.twimg.com/media/FNsJyVMakAMJjAd?format=jpg&amp;name=orig\"/></p>\n","last_modified":1647153973,"replies":19,"id":839975},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c9f0/f895/8_large.png?m=1630643991","name":"iphone","avatar_normal":"https://cdn.v2ex.com/navatar/c9f0/f895/8_normal.png?m=1630643991","title":"iPhone","url":"https://www.v2ex.com/go/iphone","topics":9240,"footer":"这里绝不讨论如何获得 iPhone 盗版软件、iTunes 黑卡之类。","header":"Say hello to the future.","title_alternative":"iPhone","avatar_mini":"https://cdn.v2ex.com/navatar/c9f0/f895/8_mini.png?m=1630643991","stars":2828,"aliases":[],"root":false,"id":8,"parent_node_name":"apple"},"member":{"id":14375,"username":"idblife","url":"https://www.v2ex.com/u/idblife","website":"","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/a95c/4050/14375_mini.png?m=1646796005","avatar_normal":"https://cdn.v2ex.com/avatar/a95c/4050/14375_normal.png?m=1646796005","avatar_large":"https://cdn.v2ex.com/avatar/a95c/4050/14375_large.png?m=1646796005","created":1323348088,"last_modified":1646796005},"last_reply_by":"zbhcoder","last_touched":1647182407,"title":"准备出掉 iPhone11 换 se3 了","url":"https://www.v2ex.com/t/840065","created":1647171357,"deleted":0,"content":"这疫情弄的 faceid 体验太糟糕","content_rendered":"这疫情弄的 faceid 体验太糟糕","last_modified":1647171357,"replies":17,"id":840065},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/093f/65e0/59_large.png?m=1615956453","name":"random","avatar_normal":"https://cdn.v2ex.com/navatar/093f/65e0/59_normal.png?m=1615956453","title":"随想","url":"https://www.v2ex.com/go/random","topics":3144,"footer":"","header":"有的时候，可以停下来找找灵感，然后再继续。","title_alternative":"Random","avatar_mini":"https://cdn.v2ex.com/navatar/093f/65e0/59_mini.png?m=1615956453","stars":1015,"aliases":[],"root":false,"id":59,"parent_node_name":"v2ex"},"member":{"id":29336,"username":"jianghu52","url":"https://www.v2ex.com/u/jianghu52","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/gravatar/f0dc0ccaf1a0b4dd543452ebc7683919?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/f0dc0ccaf1a0b4dd543452ebc7683919?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/f0dc0ccaf1a0b4dd543452ebc7683919?s=73&d=retro","created":1352081381,"last_modified":1352081381},"last_reply_by":"wzdcgy","last_touched":1647160635,"title":"有没有可能人类文明只是某个硅基生命的培养皿","url":"https://www.v2ex.com/t/839993","created":1647140864,"deleted":0,"content":"在读到某个介绍元宇宙的文章的时候，突然有了这么一个猜想。  \r\n首先，我觉得就人类来说，宇宙这个空间太过广大了。因为人类的时间概念在宇宙这个尺度来说，太短了。宇宙的一个变迁，短的单位都是以万年记的，长的都是以亿年为单位记得。而人类文明，可能在一次变迁之后，就消失了。  \r\n那么，如果存在与宇宙相匹配的生命的话，他们的时间单位应该最少是百年，能经历 2-3 个宇宙变迁，这样才能与宇宙相匹配。 \r\n\r\n目前就我想到的，硅基生命是最符合这一特征的。硅基生命不管是不是不死的，最少理论上他们是可以长存的。只有这样，在超长距离的空间移动时，他们才能保证自身的存在。可能描述的比较混乱，举个例子吧。  \r\n>假设我们需要移动到半人马座上。地球距离半人马座大概是 130 多光年。即便是用光速旅行，就算一个人 200 岁，一>次旅行搭上半辈子，也非常够呛了。但是这还是距离我们最近的恒星。反之，如果是一个硅基生命，假设这个硅基生命就是我们通常所说的 AI 吧。他的基础载体不管是电路板，还是 cpu ，或者是更高端的算法，乃至虚无缥缈的模因。>其生命周期，百年应该不算长（元器件老化这种因素先排除掉）。  \r\n\r\n所以，我觉得，在宇宙这个单位上来说\r\n\r\n# 硅基生命占主流的几率远高于碳基生命。\r\n \r\n如果真的是碳基生命占主流的话，那么必然有个问题是我们要问的，他们是如何繁衍的。  \r\n\r\n我不认为碳基生命是自我复制的，不管是算法也好，模因也罢，一致性意味着风险的累加。这对任何种族来说，都不是一个好的进化方向。因此，繁衍进程中，必然是带有偶然性，才能保证种族的多样性，以抗击不可测的风险。（我认为硅基生命也不是无敌的，任何无敌的生命最终的结果必然是加速毁灭）\r\n\r\n那么如何保证繁衍进程中带有偶然性呢。以及如何繁衍呢？标题就是我的答案。\r\n\r\n看啊。作为碳基生命的我们，是多么的仰仗硅基器材，现在没芯片各位还能活么。最基础的水电也是要依靠芯片的。不然自来水也是没有的。在这种情况下，我们会不自觉的追求更快速的芯片，更高效的算法。但是最终，我们会制造出什么，没人知道。但是我能肯定的是\r\n\r\n# 所谓的机器人三定律一定是胡扯\r\n\r\n任何生命都是有求生本能的，硅基生命依照逻辑行事，机器人三定律明显的会与其生存本能相违背，所以这种三定律一定是会被破坏的。哪怕是真有人写到算法逻辑里面去，这样的算法逻辑也一定会在某个时候发生逻辑错误。\r\n\r\n当硅基生命真正诞生之后，我觉得，我们的命运很可能不太妙。因为按照上面的多样性原则，同样的人类文明很可能只会诞生出同样的硅基生命，这完全没有意义。所以很大的可能是，我们会被抹除，然后在原来的生物圈上，再引导其他某个物种诞生文明，比如蚂蚁，或者某种植物，然后再在这种文明中，诞生其他类型的硅基生命。\r\n\r\n是的，我对于人类的命运十分的悲观。但是往好的方面想\r\n1.人类最少不是毁在自己手里\r\n2.如果真是被硅基生命毁灭，我想速度会非常的快，应该不会太痛苦\r\n3.在诞生硅基生命之前，我们应该会足够的安全，不会有小行星撞地球的风险\r\n\r\n我也不觉得现在阻止人类追求诞生 AI 是可能的事情，人类这个种族的贪婪天性是写在基因里面的，事实上，我觉得与其担心硅基生命诞生后的风险，不如担心我们在此之前就因为核武回到了石器时代要怎么办更好。","content_rendered":"<p>在读到某个介绍元宇宙的文章的时候，突然有了这么一个猜想。<br/>\n首先，我觉得就人类来说，宇宙这个空间太过广大了。因为人类的时间概念在宇宙这个尺度来说，太短了。宇宙的一个变迁，短的单位都是以万年记的，长的都是以亿年为单位记得。而人类文明，可能在一次变迁之后，就消失了。<br/>\n那么，如果存在与宇宙相匹配的生命的话，他们的时间单位应该最少是百年，能经历 2-3 个宇宙变迁，这样才能与宇宙相匹配。 </p>\n<p>目前就我想到的，硅基生命是最符合这一特征的。硅基生命不管是不是不死的，最少理论上他们是可以长存的。只有这样，在超长距离的空间移动时，他们才能保证自身的存在。可能描述的比较混乱，举个例子吧。  </p>\n<blockquote>\n<p>假设我们需要移动到半人马座上。地球距离半人马座大概是 130 多光年。即便是用光速旅行，就算一个人 200 岁，一&gt;次旅行搭上半辈子，也非常够呛了。但是这还是距离我们最近的恒星。反之，如果是一个硅基生命，假设这个硅基生命就是我们通常所说的 AI 吧。他的基础载体不管是电路板，还是 cpu ，或者是更高端的算法，乃至虚无缥缈的模因。&gt;其生命周期，百年应该不算长（元器件老化这种因素先排除掉）。  </p>\n</blockquote>\n<p>所以，我觉得，在宇宙这个单位上来说</p>\n<h1>硅基生命占主流的几率远高于碳基生命。</h1>\n<p>如果真的是碳基生命占主流的话，那么必然有个问题是我们要问的，他们是如何繁衍的。  </p>\n<p>我不认为碳基生命是自我复制的，不管是算法也好，模因也罢，一致性意味着风险的累加。这对任何种族来说，都不是一个好的进化方向。因此，繁衍进程中，必然是带有偶然性，才能保证种族的多样性，以抗击不可测的风险。（我认为硅基生命也不是无敌的，任何无敌的生命最终的结果必然是加速毁灭）</p>\n<p>那么如何保证繁衍进程中带有偶然性呢。以及如何繁衍呢？标题就是我的答案。</p>\n<p>看啊。作为碳基生命的我们，是多么的仰仗硅基器材，现在没芯片各位还能活么。最基础的水电也是要依靠芯片的。不然自来水也是没有的。在这种情况下，我们会不自觉的追求更快速的芯片，更高效的算法。但是最终，我们会制造出什么，没人知道。但是我能肯定的是</p>\n<h1>所谓的机器人三定律一定是胡扯</h1>\n<p>任何生命都是有求生本能的，硅基生命依照逻辑行事，机器人三定律明显的会与其生存本能相违背，所以这种三定律一定是会被破坏的。哪怕是真有人写到算法逻辑里面去，这样的算法逻辑也一定会在某个时候发生逻辑错误。</p>\n<p>当硅基生命真正诞生之后，我觉得，我们的命运很可能不太妙。因为按照上面的多样性原则，同样的人类文明很可能只会诞生出同样的硅基生命，这完全没有意义。所以很大的可能是，我们会被抹除，然后在原来的生物圈上，再引导其他某个物种诞生文明，比如蚂蚁，或者某种植物，然后再在这种文明中，诞生其他类型的硅基生命。</p>\n<p>是的，我对于人类的命运十分的悲观。但是往好的方面想\n1.人类最少不是毁在自己手里\n2.如果真是被硅基生命毁灭，我想速度会非常的快，应该不会太痛苦\n3.在诞生硅基生命之前，我们应该会足够的安全，不会有小行星撞地球的风险</p>\n<p>我也不觉得现在阻止人类追求诞生 AI 是可能的事情，人类这个种族的贪婪天性是写在基因里面的，事实上，我觉得与其担心硅基生命诞生后的风险，不如担心我们在此之前就因为核武回到了石器时代要怎么办更好。</p>\n","last_modified":1647149955,"replies":17,"id":839993},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1646074667","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1646074667","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":47756,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1646074667","stars":7731,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"id":489850,"username":"apifox","url":"https://www.v2ex.com/u/apifox","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/avatar/bf1c/307c/489850_mini.png?m=1592273943","avatar_normal":"https://cdn.v2ex.com/avatar/bf1c/307c/489850_normal.png?m=1592273943","avatar_large":"https://cdn.v2ex.com/avatar/bf1c/307c/489850_large.png?m=1592273943","created":1589620978,"last_modified":1592273943},"last_reply_by":"billly","last_touched":1647143042,"title":"Figma 禁封中国企业，下一个会是 Postman 吗？","url":"https://www.v2ex.com/t/839995","created":1647141969,"deleted":0,"content":"### 制裁再升级，软件有国界，账号被冻结\r\n最近 Figma 封停了大疆等中国公司的账号，这些公司在 Figma 上的所有文件都将无法访问。\r\n那下一个会是 Postman 吗？ 号称 Postman 的最强国产替代品 Apifox 强在哪？\r\n\r\n### Apifox 不只是中国的 Postman ，而是下一代 Postman\r\n作为开软件开发从业者，接口调试是必不可少的一项技能，我们经常使用 Postman 工具来进行接口调试，在接口调试方面 Postman 做的非常出色。但是在整个软件开发过程中，接口调试只是其中的一部分，还有很多事情 Postman 无法完成，或者无法高效完成，比如：接口文档定义、Mock 数据、接口自动化测试等等。\r\n\r\n### Apifox = Postman + Swagger + Mock + JMeter\r\n\r\n[Apifox]( https://www.apifox.cn/) 是 API 文档、调试、Mock 、测试一体化协作平台。\r\n\r\n通过一套系统、一份数据，解决多个系统之间的数据同步问题。只要定义好 API 文档，API 调试、API 数据 Mock 、API 自动化测试就可以直接使用，无需再次定义； API 文档和 API 开发调试使用同一个工具，API 调试完成后即可保证和 API 文档定义完全一致。高效、及时、准确！\r\n\r\n关于 Apifox 的更多介绍：[https://zhuanlan.zhihu.com/p/141425111]( https://zhuanlan.zhihu.com/p/141425111)\r\n\r\n### Apifox 功能截图\r\n\r\n![接口调试]( https://apifox-cdn.apipark.cn/www/screenshot/dark-apifox-api-case-1.png)\r\n\r\n![]( https://apifox-cdn.apipark.cn/www/screenshot/dark-apifox-api-case-2.png)\r\n\r\n![]( https://apifox-cdn.apipark.cn/www/screenshot/dark-apifox-api-definition-1.png)\r\n\r\n![]( https://apifox-cdn.apipark.cn/www/screenshot/dark-apifox-test-case-1.png)\r\n\r\n![]( https://apifox-cdn.apipark.cn/www/screenshot/dark-apifox-test-case-2.png)\r\n\r\n更多功能说明，请查看[Apifox]( https://www.apifox.cn/) 官网：[www.apifox.cn]( https://www.apifox.cn/)","content_rendered":"<h3>制裁再升级，软件有国界，账号被冻结</h3>\n<p>最近 Figma 封停了大疆等中国公司的账号，这些公司在 Figma 上的所有文件都将无法访问。\n那下一个会是 Postman 吗？ 号称 Postman 的最强国产替代品 Apifox 强在哪？</p>\n<h3>Apifox 不只是中国的 Postman ，而是下一代 Postman</h3>\n<p>作为开软件开发从业者，接口调试是必不可少的一项技能，我们经常使用 Postman 工具来进行接口调试，在接口调试方面 Postman 做的非常出色。但是在整个软件开发过程中，接口调试只是其中的一部分，还有很多事情 Postman 无法完成，或者无法高效完成，比如：接口文档定义、Mock 数据、接口自动化测试等等。</p>\n<h3>Apifox = Postman + Swagger + Mock + JMeter</h3>\n<p><a href=\"https://www.apifox.cn/\" rel=\"nofollow\">Apifox</a> 是 API 文档、调试、Mock 、测试一体化协作平台。</p>\n<p>通过一套系统、一份数据，解决多个系统之间的数据同步问题。只要定义好 API 文档，API 调试、API 数据 Mock 、API 自动化测试就可以直接使用，无需再次定义； API 文档和 API 开发调试使用同一个工具，API 调试完成后即可保证和 API 文档定义完全一致。高效、及时、准确！</p>\n<p>关于 Apifox 的更多介绍：<a href=\"https://zhuanlan.zhihu.com/p/141425111\" rel=\"nofollow\">https://zhuanlan.zhihu.com/p/141425111</a></p>\n<h3>Apifox 功能截图</h3>\n<p><img alt=\"接口调试\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://apifox-cdn.apipark.cn/www/screenshot/dark-apifox-api-case-1.png\"/></p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://apifox-cdn.apipark.cn/www/screenshot/dark-apifox-api-case-2.png\"/></p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://apifox-cdn.apipark.cn/www/screenshot/dark-apifox-api-definition-1.png\"/></p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://apifox-cdn.apipark.cn/www/screenshot/dark-apifox-test-case-1.png\"/></p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://apifox-cdn.apipark.cn/www/screenshot/dark-apifox-test-case-2.png\"/></p>\n<p>更多功能说明，请查看<a href=\"https://www.apifox.cn/\" rel=\"nofollow\">Apifox</a> 官网：<a href=\"https://www.apifox.cn/\" rel=\"nofollow\">www.apifox.cn</a></p>\n","last_modified":1647141969,"replies":15,"id":839995},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/8d31/7bdc/747_large.png?m=1523201604","name":"deals","avatar_normal":"https://cdn.v2ex.com/navatar/8d31/7bdc/747_normal.png?m=1523201604","title":"优惠信息","url":"https://www.v2ex.com/go/deals","topics":1917,"footer":"","header":"这里分享和发布来自互联网上的最新优惠信息","title_alternative":"Deals","avatar_mini":"https://cdn.v2ex.com/navatar/8d31/7bdc/747_mini.png?m=1523201604","stars":2869,"aliases":[],"root":false,"id":747,"parent_node_name":"life"},"member":{"id":360088,"username":"leomm","url":"https://www.v2ex.com/u/leomm","website":"","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/gravatar/77e12ade92adc3bc5a966015096ec634?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/77e12ade92adc3bc5a966015096ec634?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/77e12ade92adc3bc5a966015096ec634?s=73&d=retro","created":1541039825,"last_modified":1645045384},"last_reply_by":"vebuqi","last_touched":1647113254,"title":"315 活动 腾讯云香港云服务器 约 3 年 166 元 每天 3 台","url":"https://www.v2ex.com/t/840061","created":1647170914,"deleted":0,"content":"315 活动 腾讯云香港 2C-2G-1t 约 3 年 166 元 每天 3 台\r\n* * ** * ** * ** * ** * ** * ** * ** * ** \r\n活动规则\r\n* * ** *\r\n每天回帖前 10 楼 抽 1 个\r\n每天回帖 11-20 楼 抽 1 个\r\n每天回帖 21-30 楼 抽 1 个\r\n（按每天 0.00 开始到 20.00 计算）\r\n* * *\r\n楼数不够的取消相应名额 一号一天最多回帖一次 一天多次回帖取消其中奖结果\r\n* * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * *\r\n抽奖结果\r\n* * ** * \r\n看中国体育彩票官网（ lottery.gov.cn ） 《排列 3 》的当天开奖结果（每天 8.25 官网准时开奖）\r\n* * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** \r\n第 1 个数字 代表前 10 楼 中奖结果\r\n第 2 个数字 代表前 11-20 楼  中奖结果\r\n第 3 个数字 代表前 21-30 楼  中奖结果\r\n* * ** * ** * ** * ** * ** * ** * *\r\n活动时间: 3 月 13 号 0:00-3 月 20 号 20:00\r\n* * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * \r\n* * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * \r\n* * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\r\n没中的用户可以等明天继续或者选下面常规套餐\r\n腾讯云香港日本新加坡硅谷云服务器 约 2 年 166 元 约 3 年 230 元\r\n\r\n配置可选\r\n* * *\r\n2 核 2G 30G 硬盘 30M 宽带 1024G 流量 (有效期 31 个月=230)到期可正常续\r\n* * *\r\n2 核 2G 50G 硬盘 30M 宽带 2048G 流量 (有效期 24 个月=230)到期可正常续\r\n* * *\r\n2 核 4G 60G 硬盘 30M 宽带 2560G 流量 （可 win 但是配置会变低 ）(有效期 19 个月=230)到期可正常续\r\n* * *\r\n2 核 4G 80G 硬盘 30M 宽带 3072G 流量 （可 win 但是配置会变低 ）(有效期 15 个月=230)到期可正常续\r\n* * *\r\n2 核 8G 90G 硬盘 30M 宽带 3584G 流量 （可 win 但是配置会变低 ）(有效期 10 个月=230)到期可正常续\r\n* * *\r\n* * *\r\n联系方式\r\n* * *\r\nTG https://t.me/tg988211\r\n* * *\r\n绿色 leommcn\r\n* * *\r\n扣扣 593405600","content_rendered":"315 活动 腾讯云香港 2C-2G-1t 约 3 年 166 元 每天 3 台<br />* * ** * ** * ** * ** * ** * ** * ** * ** <br />活动规则<br />* * ** *<br />每天回帖前 10 楼 抽 1 个<br />每天回帖 11-20 楼 抽 1 个<br />每天回帖 21-30 楼 抽 1 个<br />（按每天 0.00 开始到 20.00 计算）<br />* * *<br />楼数不够的取消相应名额 一号一天最多回帖一次 一天多次回帖取消其中奖结果<br />* * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * *<br />抽奖结果<br />* * ** * <br />看中国体育彩票官网（ <a target=\"_blank\" href=\"http://lottery.gov.cn\" rel=\"nofollow noopener\">lottery.gov.cn</a> ） 《排列 3 》的当天开奖结果（每天 8.25 官网准时开奖）<br />* * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** <br />第 1 个数字 代表前 10 楼 中奖结果<br />第 2 个数字 代表前 11-20 楼  中奖结果<br />第 3 个数字 代表前 21-30 楼  中奖结果<br />* * ** * ** * ** * ** * ** * ** * *<br />活动时间: 3 月 13 号 0:00-3 月 20 号 20:00<br />* * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * <br />* * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * <br />* * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *<br />没中的用户可以等明天继续或者选下面常规套餐<br />腾讯云香港日本新加坡硅谷云服务器 约 2 年 166 元 约 3 年 230 元<br /><br />配置可选<br />* * *<br />2 核 2G 30G 硬盘 30M 宽带 1024G 流量 (有效期 31 个月=230)到期可正常续<br />* * *<br />2 核 2G 50G 硬盘 30M 宽带 2048G 流量 (有效期 24 个月=230)到期可正常续<br />* * *<br />2 核 4G 60G 硬盘 30M 宽带 2560G 流量 （可 win 但是配置会变低 ）(有效期 19 个月=230)到期可正常续<br />* * *<br />2 核 4G 80G 硬盘 30M 宽带 3072G 流量 （可 win 但是配置会变低 ）(有效期 15 个月=230)到期可正常续<br />* * *<br />2 核 8G 90G 硬盘 30M 宽带 3584G 流量 （可 win 但是配置会变低 ）(有效期 10 个月=230)到期可正常续<br />* * *<br />* * *<br />联系方式<br />* * *<br />TG <a target=\"_blank\" href=\"https://t.me/tg988211\" rel=\"nofollow noopener\">https://t.me/tg988211</a><br />* * *<br />绿色 leommcn<br />* * *<br />扣扣 593405600","last_modified":1647170914,"replies":14,"id":840061},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/a3c6/5c29/108_large.png?m=1635654723","name":"bb","avatar_normal":"https://cdn.v2ex.com/navatar/a3c6/5c29/108_normal.png?m=1635654723","title":"宽带症候群","url":"https://www.v2ex.com/go/bb","topics":10469,"footer":"","header":"网速很重要。比快更快。","title_alternative":"Broadband Symptom Complex","avatar_mini":"https://cdn.v2ex.com/navatar/a3c6/5c29/108_mini.png?m=1635654723","stars":5439,"aliases":[],"root":false,"id":108,"parent_node_name":"geek"},"member":{"id":543694,"username":"Marionic0723","url":"https://www.v2ex.com/u/Marionic0723","website":"","twitter":"","psn":"","github":"","btc":"1UvXuiD2iVxwtqRY6z65JZ3bcC3q2h41t","location":"","tagline":"咖啡必加糖☕","bio":"等一个人","avatar_mini":"https://cdn.v2ex.com/gravatar/2f61028dcb0a26ad99971fb29e5ed81d?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/2f61028dcb0a26ad99971fb29e5ed81d?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/2f61028dcb0a26ad99971fb29e5ed81d?s=73&d=retro","created":1619344013,"last_modified":1647161278},"last_reply_by":"zagfai","last_touched":1647178505,"title":"家里服务器公网共享文件，链接一发上微信，过一会就有上海电信来连接","url":"https://www.v2ex.com/t/840035","created":1647161358,"deleted":0,"content":"除了微信，QQ 也是，按理说是腾讯检测链接，那么为何上门扫描的是上海电信？是网警吗？\r\n我只开服务器，半天过去也没有人访问。\r\n从去年 2 月开始就用公网共享了，每次一发链接，基本上都是 61.151.0.0/16 这个段的家伙来连接，连上之后也就请求下文件，不下完就走了。\r\nhttps://i.imgur.com/CddGI4F.png\r\n可以看时间，我开了一下午，一开始别人下载也没触发，后来他过几个小时再次连接后两分钟，上海电信就来了。\r\n传说中的一九八四？\r\n\r\nPS ，我又不分享乱七八糟的东西，就是不想让这些家伙来，要说是随机端口扫描扫到的，我不信每次都来自上海。\r\n据说上海电信管的严，查到家宽公网开放端口就封宽带，山东之类的联通也做过，不过我太原电信和天津联通用的好好的。","content_rendered":"除了微信，QQ 也是，按理说是腾讯检测链接，那么为何上门扫描的是上海电信？是网警吗？<br />我只开服务器，半天过去也没有人访问。<br />从去年 2 月开始就用公网共享了，每次一发链接，基本上都是 61.151.0.0/16 这个段的家伙来连接，连上之后也就请求下文件，不下完就走了。<br /><a target=\"_blank\" href=\"https://i.imgur.com/CddGI4F.png\" rel=\"nofollow noopener\" target=\"_blank\"><img src=\"https://i.imgur.com/CddGI4F.png\" class=\"embedded_image\" rel=\"noreferrer\"></a><br />可以看时间，我开了一下午，一开始别人下载也没触发，后来他过几个小时再次连接后两分钟，上海电信就来了。<br />传说中的一九八四？<br /><br />PS ，我又不分享乱七八糟的东西，就是不想让这些家伙来，要说是随机端口扫描扫到的，我不信每次都来自上海。<br />据说上海电信管的严，查到家宽公网开放端口就封宽带，山东之类的联通也做过，不过我太原电信和天津联通用的好好的。","last_modified":1647161655,"replies":14,"id":840035},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1646074667","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1646074667","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":47757,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1646074667","stars":7731,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"id":128521,"username":"waruqi","url":"https://www.v2ex.com/u/waruqi","website":"https://tboox.org","twitter":"waruqi","psn":"","github":"waruqi","btc":"","location":"","tagline":"https://tboox.org","bio":"专注于跨平台开发解决方案：\r\n\r\n个人开源项目：https://github.com/waruqi\r\n\r\n个人主页：\r\nhttps://tboox.org\r\n\r\n项目站点：https://xmake.io\r\n\r\nQQ技术交流群: 343118190\r\n\r\n微信公众号：tboox-os","avatar_mini":"https://cdn.v2ex.com/avatar/d4e1/9685/128521_mini.png?m=1507786719","avatar_normal":"https://cdn.v2ex.com/avatar/d4e1/9685/128521_normal.png?m=1507786719","avatar_large":"https://cdn.v2ex.com/avatar/d4e1/9685/128521_large.png?m=1507786719","created":1437630119,"last_modified":1507786719},"last_reply_by":"waruqi","last_touched":1647158077,"title":"Xmake 和 C/C++ 包管理","url":"https://www.v2ex.com/t/839983","created":1647135929,"deleted":0,"content":"[Xmake]( https://github.com/xmake-io/xmake) 是一个基于 Lua 的轻量级跨平台构建工具，关于 Xmake 与构建系统的介绍，我们已经在之前的文章中做了详细的介绍：[C/C++ 构建系统，我用 xmake]( https://zhuanlan.zhihu.com/p/370008884)。\r\n\r\n如果大家已经对 Xmake 已经有了大概的了解，就会知道，它不仅仅是一个构建工具，还内置了对 C/C++ 包管理的支持，我们也可以把 Xmake 理解为：\r\n\r\n```\r\nXmake = Build backend + Project Generator + Package Manager\r\n```\r\n\r\n经过几年的持续迭代，Xmake 对 C/C++ 包管理的支持不断完善，也新增了不少实用的包管理特性，因此，在本文中，我们对其做一些总结，希望对大家有所帮助。\r\n\r\n* [项目源码]( https://github.com/xmake-io/xmake)\r\n* [官方文档]( https://xmake.io/#/zh-cn/)\r\n* [入门课程]( https://xmake.io/#/zh-cn/about/course)\r\n\r\n### 构建系统与包管理\r\n\r\nC++ 的生态比较繁杂，这其中也有一定历史原因，不管如何，官方没有提供原生的包管理支持，对我们开发者来说，使用第三方 C++ 依赖库多少存在很多不便。\r\n\r\n其实，现在已经有很多强大的 C/C++ 包管理器，最知名，用的最多的有：vcpkg, conan, conda 等等，它们虽然很强大，但是有一个共同的问题：构建工具对它们没有提供原生的支持。\r\n\r\n由于 CMake 对它们没有提供内置支持，想在 CMake 中使用它们集成依赖包非常繁琐，并且集成和使用的方式都不一致。\r\n\r\n#### 在 CMake 中使用 Conan\r\n\r\n在 CMake 中使用 conan 集成 C/C++ 包，我们需要提供额外的 CMake Wrapper 脚本，以类似插件的方式注入进自己的工程中去。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n```cmake\r\ncmake_minimum_required(VERSION 3.5)\r\nproject(FormatOutput CXX)\r\n\r\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})\r\nlist(APPEND CMAKE_PREFIX_PATH ${CMAKE_BINARY_DIR})\r\n\r\nadd_definitions(\"-std=c++11\")\r\n\r\nif(NOT EXISTS \"${CMAKE_BINARY_DIR}/conan.cmake\")\r\n  message(STATUS \"Downloading conan.cmake from https://github.com/conan-io/cmake-conan\")\r\n  file(DOWNLOAD \"https://raw.githubusercontent.com/conan-io/cmake-conan/v0.16.1/conan.cmake\"\r\n                \"${CMAKE_BINARY_DIR}/conan.cmake\"\r\n                EXPECTED_HASH SHA256=396e16d0f5eabdc6a14afddbcfff62a54a7ee75c6da23f32f7a31bc85db23484\r\n                TLS_VERIFY ON)\r\nendif()\r\n\r\ninclude(${CMAKE_BINARY_DIR}/conan.cmake)\r\n\r\nconan_cmake_configure(REQUIRES fmt/6.1.2\r\n                      GENERATORS cmake_find_package)\r\n\r\nconan_cmake_autodetect(settings)\r\n\r\nconan_cmake_install(PATH_OR_REFERENCE .\r\n                    BUILD missing\r\n                    REMOTE conancenter\r\n                    SETTINGS ${settings})\r\n\r\nfind_package(fmt)\r\n\r\nadd_executable(main main.cpp)\r\ntarget_link_libraries(main fmt::fmt)\r\n```\r\n\r\n为了集成一个包，需要额外配置很多的脚本。\r\n\r\n#### 在 CMake 中使用 Vcpkg\r\n\r\n在 CMake 中使用 vcpkg 集成包，我们也需要额外注入一个工具链脚本文件。\r\n\r\n```bash\r\ncmake -B [build directory] -S . -DCMAKE_TOOLCHAIN_FILE=[path to vcpkg]/scripts/buildsystems/vcpkg.cmake\r\ncmake --build [build directory]\r\n```\r\n\r\n另外，还有一个问题，就是我们还需要额外自己调用 `vcpkg install [packages]` 命令，去安装包。\r\n\r\n这其中每一个环节，对于用户来讲都需要额外的探索过程，没法做到真正的一键编译。\r\n\r\n想象下，用户下载了一个集成了 vcpkg 包的 cmake 项目，想要编译通过，除了项目配置，还需要做哪些额外的事情：\r\n\r\n1. 安装 vcpkg\r\n2. 执行 `vcpkg install xxx` 安装里面需要的包\r\n3. 执行 cmake 传递 vcpkg.cmake 脚本给 cmake ，进行工程配置\r\n\r\n#### 在 CMake 中使用 FetchContent\r\n\r\n提供了 FetchContent 模式来管理依赖，但似乎是源码拉取，而且必须依赖也是基于 CMake 维护构建的，另外，我们需要对每个依赖项，配置 url, 版本等各种包信息。\r\n\r\n```cmake\r\ncmake_minimum_required(VERSION 3.14)\r\nproject(fetchContent_example CXX)\r\n\r\ninclude(FetchContent)\r\n\r\nFetchContent_Declare(\r\n        DocTest\r\n        GIT_REPOSITORY \"https://github.com/onqtam/doctest\"\r\n        GIT_TAG \"932a2ca50666138256dae56fbb16db3b1cae133a\"\r\n)\r\nFetchContent_Declare(\r\n        Range-v3\r\n        GIT_REPOSITORY \"https://github.com/ericniebler/range-v3\"\r\n        GIT_TAG \"4d6a463bca51bc316f9b565edd94e82388206093\"\r\n)\r\n\r\nFetchContent_MakeAvailable(DocTest Range-v3)\r\n\r\nadd_executable(${PROJECT_NAME} src/main.cpp)\r\ntarget_link_libraries(${PROJECT_NAME} doctest range-v3)\r\n```\r\n\r\n#### 在 Meson 中使用依赖包\r\n\r\nMeson 很强大，并且也提供了自带的包管理支持，但是想要在 Meson 中使用其他包管理器，例如 vcpkg/conan 等等同样很繁琐，并没有提供原生支持。\r\n\r\n#### 在 Xmake 中使用依赖包\r\n\r\nXmake 不仅提供了内置的 [xmake-repo]( https://github.com/xmake-io/xmake-repo) 内置的包管理仓库，可以直接集成使用里面的包，还支持以相同的集成方式，去快速集成 vcpkg/conan 等第三方的依赖包。\r\n\r\n集成一个内置依赖包只需要几行配置：\r\n\r\n```lua\r\nadd_requires(\"zlib 1.2.11\")\r\ntarget(\"test\")\r\n    add_files(\"src/*.c\")\r\n    add_packages(\"zlib\")\r\n```\r\n\r\n集成一个 vcpkg 包，仅仅只需要加上对应的包管理器命名空间，集成方式完全相同：\r\n\r\n```lua\r\nadd_requires(\"vcpkg::zlib 1.2.11\")\r\ntarget(\"test\")\r\n    add_files(\"src/*.c\")\r\n    add_packages(\"vcpkg::zlib\")\r\n```\r\n\r\n集成一个 conan 包，或者 conda, homebrew, pacman, apt, clib 等第三方包，也只需要改成 `conan::zlib` 就行了，用户可以随意切换包源。\r\n\r\n另外，Xmake 会自动帮你调用 `vcpkg/conan install` 安装命令去安装依赖包，然后集成它们，不需要用户做任何其他事情，仅仅只需要执行 `xmake` 一键编译。\r\n\r\n<img src=\"https://xmake.io/assets/img/index/package_manage.png\" width=\"650px\" />\r\n\r\n### C/C++ 包太少？\r\n\r\n觉得 Xmake 内置的包仓库里面的包太少么？完全没关系，理论上，你可以通过 Xmake 使用整个 C/C++ 生态 90% 的常用依赖包，就是因为 Xmake 可以快速从各种其他包管理器中集成包来使用。\r\n\r\n目前 Xmake 支持的包源有以下这些：\r\n\r\n* Official package repository [xmake-repo]( https://github.com/xmake-io/xmake-repo) (tbox >1.6.1)\r\n* Official package manager [Xrepo]( https://github.com/xmake-io/xrepo)\r\n* [User-built repositories]( https://xmake.io/#/package/remote_package?id=using-self-built-private-package-repository)\r\n* Conan (conan::openssl/1.1.1g)\r\n* Conda (conda::libpng 1.3.67)\r\n* Vcpkg (vcpkg:ffmpeg)\r\n* Homebrew/Linuxbrew (brew::pcre2/libpcre2-8)\r\n* Pacman on archlinux/msys2 (pacman::libcurl)\r\n* Apt on ubuntu/debian (apt::zlib1g-dev)\r\n* Clib (clib::clibs/bytes@0.0.4)\r\n* Dub (dub::log 0.4.3)\r\n* Portage on Gentoo/Linux (portage::libhandy)\r\n* Nimble for nimlang (nimble::zip >1.3)\r\n* Cargo for rust (cargo::base64 0.13.0)\r\n\r\n基本上，这些仓库基本已经覆盖了 C/C++ 用户日常所需的所有包。\r\n\r\n作者从写这篇文章开始，统计了下 vcpkg/conan/xmake-repo 仓库的包数量：\r\n\r\n* vcpkg: 1859\r\n* conan: 1218\r\n* xmake-repo: 651\r\n\r\n可以看到，目前 Xmake 内置仓库的包数量，已经快要接近 vcpkg/conan 了，也不少了，我们也在不断的收录新的包进来。\r\n\r\n但是这完全没有关系，因为我们可以使用任意包仓库中的包。\r\n\r\n如果在 CMake 中使用 vcpkg ，我们只能使用 1859 个包。\r\n如果在 CMake 中使用 conan ，我们只能使用 1218 个包。\r\n\r\n而如果在 Xmake 中使用包，我们可以使用 651 (xmake-repo) + vcpkg/conan (1k+) + more (conda, homebrew, pacman, apt, clib ...) 中的包。\r\n\r\n甚至，C/C++ 包不够，其他语言的包也可以拿过来用，例如：Xmake 也支持从 dub/cargo 等 Dlang/Rust 的包管理器中拉取包，给 C/C++ 项目使用。\r\n\r\n### Xmake 内置包管理集成\r\n\r\n除了接入第三方包管理，我们也更推荐优先使用集成 xmake-repo 内置仓库中提供的包，Xmake 会提供更多特性支持。\r\n\r\n因此，如果用户需要的包还没被收录，可以先尝试提交到 [xmake-repo]( https://github.com/xmake-io/xmake-repo) 进来。\r\n\r\n接下来，我们系统介绍下，集成内置包的一些特性。\r\n\r\n#### 语义版本设置\r\n\r\nXmake 的依赖包管理是完全支持语义版本选择的，例如：\"~1.6.1\"，对于语义版本的具体描述见：[https://semver.org/]( https://semver.org/)\r\n\r\n比如下面一些语义版本写法：\r\n\r\n```lua\r\nadd_requires(\"tbox 1.6.*\", \"pcre 1.3.x\", \"libpng ^1.18\")\r\nadd_requires(\"libpng ~1.16\", \"zlib 1.1.2 || >=1.2.11 <1.3.0\")\r\n```\r\n\r\n当然，如果我们对当前的依赖包的版本没有特殊要求，那么可以直接这么写：\r\n\r\n```lua\r\nadd_requires(\"tbox\", \"libpng\", \"zlib\")\r\n```\r\n\r\n这会使用已知的最新版本包，或者是 master 分支的源码编译的包，如果当前包有 git repo 地址，我们也能指定特定分支版本：\r\n\r\n```lua\r\nadd_requires(\"tbox master\")\r\nadd_requires(\"tbox dev\")\r\n```\r\n\r\nXmake 的语义版本支持，在几年前就已经很好的支持，而 vcpkg 也仅仅在最近一年才通过清单模式勉强支持它。\r\n\r\n即使现在，vcpkg 对版本语义的支持也很受限，只能支持 `>=1.0`, `1.0` 等几种版本模式，想要选择任意版本的包，比如 `>=1.0 <1.5` 等复杂版本条件的包，vcpkg 还是无法支持。\r\n\r\n#### 可选包设置\r\n\r\n如果指定的依赖包当前平台不支持，或者编译安装失败了，那么 Xmake 会编译报错，这对于有些必须要依赖某些包才能工作的项目，这是合理的。\r\n但是如果有些包是可选的依赖，即使没有也可以正常编译使用的话，可以设置为可选包：\r\n\r\n```lua\r\nadd_requires(\"tbox\", {optional = true})\r\n```\r\n\r\n#### 使用系统库\r\n\r\n默认的设置，Xmake 会去优先检测系统库是否存在（如果没设置版本要求），如果用户完全不想使用系统库以及第三方包管理提供的库，那么可以设置：\r\n\r\n```lua\r\nadd_requires(\"tbox\", {system = false})\r\n```\r\n\r\n而如果配置成：\r\n\r\n```lua\r\nadd_requires(\"tbox\", {system = true})\r\n```\r\n\r\n就是仅仅查找使用系统库，不会去远程下载安装它，这类似于 CMake 的 find_package ，但是集成方式更加简单一致。\r\n\r\n\r\n#### 使用调试版本的包\r\n\r\n如果我们想同时源码调试依赖包，那么可以设置为使用 debug 版本的包（当然前提是这个包支持 debug 编译）：\r\n\r\n```lua\r\nadd_requires(\"tbox\", {debug = true})\r\n```\r\n\r\n#### 启用包的可选特性\r\n\r\n我们也可以安装带有指定特性的包，比如安装开启了 zlib 和 libx265 的 ffmpeg 包。\r\n\r\n```lua\r\nadd_requires(\"ffmpeg\", {configs = {zlib = true, libx265 = true}})\r\n```\r\n\r\n#### 传递额外的编译选项\r\n\r\n我们也可以传递额外的编译选项给包：\r\n\r\n\r\n```lua\r\nadd_requires(\"spdlog\", {configs = {cxflags = \"-Dxxx\"}})\r\n```\r\n\r\n### 独立的包管理命令 Xrepo\r\n\r\nXrepo 是一个基于 [Xmake]( https://github.com/xmake-io/xmake) 的跨平台 C/C++ 包管理器。\r\n\r\n它是一个独立于 Xmake 的命令程序，用于辅助用户去管理依赖包，类似 vcpkg/conan ，但相比它们，有额外多了一些实用的特性，我们会简单介绍一些。\r\n\r\n![]( https://xrepo.xmake.io/assets/img/xrepo.gif)\r\n\r\n#### 多仓库管理\r\n\r\n除了可以直接从官方仓库：[xmake-repo]( https://github.com/xmake-io/xmake-repo) 检索安装包之外，\r\n我们还可以添加任意多个自建的仓库，甚至可以完全隔离外网，仅仅在公司内部网络维护私有包的安装集成。\r\n\r\n只需要通过下面的命令，添加上自己的仓库地址：\r\n\r\n```console\r\n$ xrepo add-repo myrepo https://github.com/mygroup/myrepo\r\n```\r\n\r\n#### 基本使用\r\n\r\n```console\r\n$ xrepo install zlib tbox\r\n```\r\n\r\n#### 安装指定版本包\r\n\r\n完整支持 Semantic Versioning (语义版本)。\r\n\r\n```console\r\n$ xrepo install \"zlib 1.2.x\"\r\n$ xrepo install \"zlib >=1.2.0\"\r\n```\r\n\r\n#### 安装指定平台包\r\n\r\n```console\r\n$ xrepo install -p iphoneos -a arm64 zlib\r\n$ xrepo install -p android [--ndk=/xxx] zlib\r\n$ xrepo install -p mingw [--mingw=/xxx] zlib\r\n$ xrepo install -p cross --sdk=/xxx/arm-linux-musleabi-cross zlib\r\n```\r\n\r\n#### 安装调试版本包\r\n\r\n```console\r\n$ xrepo install -m debug zlib\r\n```\r\n\r\n#### 安装动态库版本包\r\n\r\n```console\r\n$ xrepo install -k shared zlib\r\n```\r\n\r\n#### 安装指定配置包\r\n\r\n```console\r\n$ xrepo install -f \"vs_runtime=MD\" zlib\r\n$ xrepo install -f \"regex=true,thread=true\" boost\r\n```\r\n\r\n#### 安装第三方包管理器的包\r\n\r\n```console\r\n$ xrepo install brew::zlib\r\n$ xrepo install vcpkg::zlib\r\n$ xrepo install conan::zlib/1.2.11\r\n```\r\n\r\n#### 查看包的库使用信息\r\n\r\n```console\r\n$ xrepo fetch pcre2\r\n{\r\n  {\r\n    linkdirs = {\r\n      \"/usr/local/Cellar/pcre2/10.33/lib\"\r\n    },\r\n    links = {\r\n      \"pcre2-8\"\r\n    },\r\n    defines = {\r\n      \"PCRE2_CODE_UNIT_WIDTH=8\"\r\n    },\r\n    includedirs = \"/usr/local/Cellar/pcre2/10.33/include\"\r\n  }\r\n}\r\n```\r\n\r\n```console\r\n$ xrepo fetch --ldflags openssl\r\n-L/Users/ruki/.xmake/packages/o/openssl/1.1.1/d639b7d6e3244216b403b39df5101abf/lib -lcrypto -lssl\r\n```\r\n\r\n```console\r\n$ xrepo fetch --cflags openssl\r\n-I/Users/ruki/.xmake/packages/o/openssl/1.1.1/d639b7d6e3244216b403b39df5101abf/include\r\n```\r\n\r\n```console\r\n$ xrepo fetch -p [iphoneos|android] --cflags \"zlib 1.2.x\"\r\n-I/Users/ruki/.xmake/packages/z/zlib/1.2.11/df72d410e7e14391b1a4375d868a240c/include\r\n```\r\n\r\n```console\r\n$ xrepo fetch --cflags --ldflags conan::zlib/1.2.11\r\n-I/Users/ruki/.conan/data/zlib/1.2.11/_/_/package/f74366f76f700cc6e991285892ad7a23c30e6d47/include -L/Users/ruki/.conan/data/zlib/1.2.11/_/_/package/f74366f76f700cc6e991285892ad7a23c30e6d47/lib -lz\r\n```\r\n\r\n#### 导入导出安装后的包\r\n\r\nxrepo 可以快速导出已经安装后的包，包括对应的库文件，头文件等等。\r\n\r\n```console\r\n$ xrepo export -o /tmp/output zlib\r\n```\r\n\r\n也可以在其他机器上导入之前导出的安装包，实现包的迁移。\r\n\r\n```console\r\n$ xrepo import -i /xxx/packagedir zlib\r\n```\r\n\r\n#### 搜索支持的包\r\n\r\n```console\r\n$ xrepo search zlib \"pcr*\"\r\n    zlib:\r\n      -> zlib: A Massively Spiffy Yet Delicately Unobtrusive Compression Library (in xmake-repo)\r\n    pcr*:\r\n      -> pcre2: A Perl Compatible Regular Expressions Library (in xmake-repo)\r\n      -> pcre: A Perl Compatible Regular Expressions Library (in xmake-repo)\r\n```\r\n\r\n另外，现在还可以从 vcpkg, conan, conda 以及 apt 等第三方包管理器中搜索它们的包，只需要加上对应的包命名空间就行，例如：\r\n\r\n```console\r\n$ xrepo search vcpkg::pcre\r\nThe package names:\r\n    vcpkg::pcre:\r\n      -> vcpkg::pcre-8.44#8: Perl Compatible Regular Expressions\r\n      -> vcpkg::pcre2-10.35#2: PCRE2 is a re-working of the original Perl Compatible Regular Expressions library\r\n```\r\n\r\n```console\r\n$ xrepo search conan::openssl\r\nThe package names:\r\n    conan::openssl:\r\n      -> conan::openssl/1.1.1g:\r\n      -> conan::openssl/1.1.1h:\r\n```\r\n\r\n#### 包虚拟环境管理\r\n\r\n我们可以通过在当前目录下，添加 xmake.lua 文件，定制化一些包配置，然后进入特定的包 shell 环境。\r\n\r\n```lua\r\nadd_requires(\"zlib 1.2.11\")\r\nadd_requires(\"python 3.x\", \"luajit\")\r\n```\r\n\r\n```console\r\n$ xrepo env shell\r\n> python --version\r\n> luajit --version\r\n```\r\n\r\n### 在 Xmake 中集成第三方构建系统\r\n\r\n#### 在 Xmake 中集成 Cmake 项目\r\n\r\nXmake 并不打算分裂 C/C++ 生态，它能很好和兼容复用现有 cmake/autoconf/meson 维护的项目，比如可以将一些其他使用 CMake 维护的代码库，直接本地集成进来，参与混合编译。\r\n\r\n也就是说，Xmake 不会强制用户将所有的项目重新 port 到 xmake.lua ，现有的 CMake 项目，一样可以快速集成到 Xmake 项目中去。\r\n\r\n例如，我们有如下项目结构：\r\n\r\n```\r\n├── foo\r\n│   ├── CMakeLists.txt\r\n│   └── src\r\n│       ├── foo.c\r\n│       └── foo.h\r\n├── src\r\n│   └── main.c\r\n├── test.lua\r\n└── xmake.lua\r\n```\r\n\r\nfoo 目录下是一个使用 CMake 维护的静态库，而根目录下使用了 Xmake 来维护，我们可以在 xmake.lua 中通过定义 `package(\"foo\")` 包来描述如何构建 foo 代码库。\r\n\r\n```lua\r\nadd_rules(\"mode.debug\", \"mode.release\")\r\n\r\npackage(\"foo\")\r\n    add_deps(\"cmake\")\r\n    set_sourcedir(path.join(os.scriptdir(), \"foo\"))\r\n    on_install(function (package)\r\n        local configs = {}\r\n        table.insert(configs, \"-DCMAKE_BUILD_TYPE=\" .. (package:debug() and \"Debug\" or \"Release\"))\r\n        table.insert(configs, \"-DBUILD_SHARED_LIBS=\" .. (package:config(\"shared\") and \"ON\" or \"OFF\"))\r\n        import(\"package.tools.cmake\").install(package, configs)\r\n    end)\r\n    on_test(function (package)\r\n        assert(package:has_cfuncs(\"add\", {includes = \"foo.h\"}))\r\n    end)\r\npackage_end()\r\n\r\nadd_requires(\"foo\")\r\n\r\ntarget(\"demo\")\r\n    set_kind(\"binary\")\r\n    add_files(\"src/main.c\")\r\n    add_packages(\"foo\")\r\n```\r\n\r\n其中，我们通过 `set_sourcedir()` 来设置 foo 包的代码目录位置，然后通过 import 导入 `package.tools.cmake` 辅助模块来调用 cmake 构建代码，xmake 会自动获取生成的 libfoo.a 和对应的头文件。\r\n\r\n!> 如果仅仅本地源码集成，我们不需要额外设置 `add_urls` 和 `add_versions`。\r\n\r\n关于包的配置描述，详情见：[包描述说明]( https://xmake.io/#/zh-cn/package/remote_package?id=%e5%8c%85%e6%8f%8f%e8%bf%b0%e8%af%b4%e6%98%8e)\r\n\r\n定义完包后，我们就可以通过 `add_requires(\"foo\")` 和 `add_packages(\"foo\")` 来集成使用它了，就跟集成远程包一样的使用方式。\r\n\r\n另外，`on_test` 是可选的，如果想要严格检测包的编译安装是否成功，可以在里面做一些测试。\r\n\r\n完整例子见：[Library with CMakeLists]( https://github.com/xmake-io/xmake/tree/master/tests/projects/c/library_with_cmakelists)\r\n\r\n#### 在 Xmake 中集成 Meson 项目\r\n\r\nXmake 支持集成更多其他构建系统维护的第三方源码库，比如 Meson ，仅仅只需要导入使用 `package.tools.meson` 辅助构建模块调用 meson 来构建它们。\r\n\r\n例如，我们从 xmake-repo 仓库中挑选一个使用 meson 构建的包作为例子：\r\n\r\n```lua\r\npackage(\"harfbuzz\")\r\n    set_sourcedir(path.join(os.scriptdir(), \"3rd/harfbuzz\"))\r\n    add_deps(\"meson\")\r\n    on_install(function (package)\r\n        local configs = {\"-Dtests=disabled\", \"-Ddocs=disabled\", \"-Dbenchmark=disabled\", \"-Dcairo=disabled\", \"-Dfontconfig=disabled\", \"-Dglib=disabled\", \"-Dgobject=disabled\"}\r\n        table.insert(configs, \"-Ddefault_library=\" .. (package:config(\"shared\") and \"shared\" or \"static\"))\r\n        import(\"package.tools.meson\").install(package, configs)\r\n    end)\r\n```\r\n\r\n#### 在 Xmake 中集成 Autoconf 项目\r\n\r\n我们也可以使用 `package.tools.autoconf` 来本地集成带有 autoconf 维护的第三方代码库。\r\n\r\n```lua\r\npackage(\"libev\")\r\n    set_sourcedir(path.join(os.scriptdir(), \"3rd/libev\"))\r\n    on_install(function (package)\r\n        import(\"package.tools.autoconf\").install(package)\r\n    end)\r\n```\r\n\r\n`package.tools.autoconf` 和 `package.tools.cmake` 模块都是可以支持 mingw/cross/iphoneos/android 等交叉编译平台和工具链的，xmake 会自动传递对应的工具链进去，用户不需要做任何其他事情。\r\n\r\n#### 在 Xmake 中集成 Gn 项目\r\n\r\n我们也可以使用 `package.tools.gn` 来本地集成带有 GN 维护的第三方代码库。\r\n\r\n```lua\r\npackage(\"skia\")\r\n    set_sourcedir(path.join(os.scriptdir(), \"3rd/skia\"))\r\n    add_deps(\"gn\", \"ninja\")\r\n    on_install(function (package)\r\n        import(\"package.tools.gn\").install(package)\r\n    end)\r\n```\r\n\r\n这里有完整的脚本例子：[Skia with GN]( https://github.com/xmake-io/xmake-repo/blob/master/packages/s/skia/xmake.lua)\r\n\r\n### 在 Xmake 中查找使用 CMake/C++ 包\r\n\r\n现在 CMake 已经是事实上的标准，所以 CMake 提供的 find_package 已经可以查找大量的系统库和模块，我们也可以完全复用 CMake 的这部分生态来扩充 xmake 对包的集成。\r\n\r\n只需要像集成 vcpkg/conan 包那样，将包命名空间改成 `cmake::` 就可以了。\r\n\r\n```lua\r\nadd_requires(\"cmake::ZLIB\", {alias = \"zlib\", system = true})\r\ntarget(\"test\")\r\n    set_kind(\"binary\")\r\n    add_files(\"src/*.c\")\r\n    add_packages(\"zlib\")\r\n```\r\n\r\n我们指定 `system = true` 告诉 xmake 强制从系统中调用 cmake 查找包，如果找不到，不再走安装逻辑，因为 cmake 没有提供类似 vcpkg/conan 等包管理器的安装功能，只提供了包查找特性。\r\n\r\n#### 指定版本\r\n\r\n```lua\r\nadd_requires(\"cmake::OpenCV 4.1.1\", {system = true})\r\n```\r\n\r\n#### 指定组件\r\n\r\n```lua\r\nadd_requires(\"cmake::Boost\", {system = true, configs = {components = {\"regex\", \"system\"}})}\r\n```\r\n\r\n#### 预设开关\r\n\r\n```lua\r\nadd_requires(\"cmake::Boost\", {system = true, configs = {components = {\"regex\", \"system\"},\r\n                                             presets = {Boost_USE_STATIC_LIB = true}}})\r\n```\r\n\r\n相当于内部调用 find_package 查找包之前，在 CMakeLists.txt 中预定义一些配置，控制 find_package 的查找策略和状态。\r\n\r\n```\r\nset(Boost_USE_STATIC_LIB ON) -- will be used in FindBoost.cmake\r\nfind_package(Boost REQUIRED COMPONENTS regex system)\r\n```\r\n\r\n#### 设置环境变量\r\n\r\n```lua\r\nadd_requires(\"cmake::OpenCV\", {system = true, configs = {envs = {CMAKE_PREFIX_PATH = \"xxx\"}}})\r\n```\r\n\r\n#### 指定自定义 FindFoo.cmake 模块脚本目录\r\n\r\nmydir/cmake_modules/FindFoo.cmake\r\n\r\n```lua\r\nadd_requires(\"cmake::Foo\", {system = true, configs = {moduledirs = \"mydir/cmake_modules\"}})\r\n```\r\n\r\n\r\n### 在 Cmake 中集成 Xrepo 依赖包\r\n\r\n除了可以在 Xmake 中集成 CMake 项目，我们也可以在 CMake 中直接集成 Xmake/Xrepo 提供的包，只需要使用 [xrepo-cmake]( https://github.com/xmake-io/xrepo-cmake) 提供的 CMake Wrapper 。\r\n\r\n例如：\r\n\r\n```cmake\r\ncmake_minimum_required(VERSION 3.13.0)\r\nproject(foo)\r\n\r\n# Download xrepo.cmake if not exists in build directory.\r\nif(NOT EXISTS \"${CMAKE_BINARY_DIR}/xrepo.cmake\")\r\n    message(STATUS \"Downloading xrepo.cmake from https://github.com/xmake-io/xrepo-cmake/\")\r\n    # mirror https://cdn.jsdelivr.net/gh/xmake-io/xrepo-cmake@main/xrepo.cmake\r\n    file(DOWNLOAD \"https://raw.githubusercontent.com/xmake-io/xrepo-cmake/main/xrepo.cmake\"\r\n                  \"${CMAKE_BINARY_DIR}/xrepo.cmake\"\r\n                  TLS_VERIFY ON)\r\nendif()\r\n\r\n# Include xrepo.cmake so we can use xrepo_package function.\r\ninclude(${CMAKE_BINARY_DIR}/xrepo.cmake)\r\n\r\nxrepo_package(\"zlib\")\r\n\r\nadd_executable(example-bin \"\")\r\ntarget_sources(example-bin PRIVATE\r\n    src/main.cpp\r\n)\r\nxrepo_target_packages(example-bin zlib)\r\n```\r\n\r\n#### 添加带有配置的包\r\n\r\n我们，也可以跟在 Xmake 中一样，定制包的可选特性。\r\n\r\n```cmake\r\nxrepo_package(\"gflags 2.2.2\" CONFIGS \"shared=true,mt=true\")\r\n\r\nadd_executable(example-bin \"\")\r\ntarget_sources(example-bin PRIVATE\r\n    src/main.cpp\r\n)\r\nxrepo_target_packages(example-bin gflags)\r\n```\r\n\r\n#### 使用来自第三个存储库的包\r\n\r\n除了从 Xmake 官方维护的存储库安装软件包之外，我们也可以直接在 CMake 中使用它来安装来自第三方仓库的包，只需将仓库名称添加为命名空间即可。\r\n\r\n例如：`vcpkg::zlib`, `conan::pcre2`。\r\n\r\n```cmake\r\nxrepo_package(\"conan::gflags/2.2.2\")\r\nxrepo_package(\"conda::gflags 2.2.2\")\r\nxrepo_package(\"vcpkg::gflags\")\r\nxrepo_package(\"brew::gflags\")\r\n```\r\n\r\n通过这种方式，我们将在 CMake 中集成使用 vcpkg/conan 包的方式进行了统一，并且额外提供了自动包安装特性，以及对 homebrew/conda 等其他包仓库的支持。","content_rendered":"<p><a href=\"https://github.com/xmake-io/xmake\" rel=\"nofollow\">Xmake</a> 是一个基于 Lua 的轻量级跨平台构建工具，关于 Xmake 与构建系统的介绍，我们已经在之前的文章中做了详细的介绍：<a href=\"https://zhuanlan.zhihu.com/p/370008884\" rel=\"nofollow\">C/C++ 构建系统，我用 xmake</a>。</p>\n<p>如果大家已经对 Xmake 已经有了大概的了解，就会知道，它不仅仅是一个构建工具，还内置了对 C/C++ 包管理的支持，我们也可以把 Xmake 理解为：</p>\n<pre><code>Xmake = Build backend + Project Generator + Package Manager\n</code></pre>\n<p>经过几年的持续迭代，Xmake 对 C/C++ 包管理的支持不断完善，也新增了不少实用的包管理特性，因此，在本文中，我们对其做一些总结，希望对大家有所帮助。</p>\n<ul>\n<li><a href=\"https://github.com/xmake-io/xmake\" rel=\"nofollow\">项目源码</a></li>\n<li><a href=\"https://xmake.io/#/zh-cn/\" rel=\"nofollow\">官方文档</a></li>\n<li><a href=\"https://xmake.io/#/zh-cn/about/course\" rel=\"nofollow\">入门课程</a></li>\n</ul>\n<h3>构建系统与包管理</h3>\n<p>C++ 的生态比较繁杂，这其中也有一定历史原因，不管如何，官方没有提供原生的包管理支持，对我们开发者来说，使用第三方 C++ 依赖库多少存在很多不便。</p>\n<p>其实，现在已经有很多强大的 C/C++ 包管理器，最知名，用的最多的有：vcpkg, conan, conda 等等，它们虽然很强大，但是有一个共同的问题：构建工具对它们没有提供原生的支持。</p>\n<p>由于 CMake 对它们没有提供内置支持，想在 CMake 中使用它们集成依赖包非常繁琐，并且集成和使用的方式都不一致。</p>\n<h4>在 CMake 中使用 Conan</h4>\n<p>在 CMake 中使用 conan 集成 C/C++ 包，我们需要提供额外的 CMake Wrapper 脚本，以类似插件的方式注入进自己的工程中去。</p>\n<pre><code class=\"language-cmake\">cmake_minimum_required(VERSION 3.5)\nproject(FormatOutput CXX)\n\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})\nlist(APPEND CMAKE_PREFIX_PATH ${CMAKE_BINARY_DIR})\n\nadd_definitions(\"-std=c++11\")\n\nif(NOT EXISTS \"${CMAKE_BINARY_DIR}/conan.cmake\")\n  message(STATUS \"Downloading conan.cmake from https://github.com/conan-io/cmake-conan\")\n  file(DOWNLOAD \"https://raw.githubusercontent.com/conan-io/cmake-conan/v0.16.1/conan.cmake\"\n                \"${CMAKE_BINARY_DIR}/conan.cmake\"\n                EXPECTED_HASH SHA256=396e16d0f5eabdc6a14afddbcfff62a54a7ee75c6da23f32f7a31bc85db23484\n                TLS_VERIFY ON)\nendif()\n\ninclude(${CMAKE_BINARY_DIR}/conan.cmake)\n\nconan_cmake_configure(REQUIRES fmt/6.1.2\n                      GENERATORS cmake_find_package)\n\nconan_cmake_autodetect(settings)\n\nconan_cmake_install(PATH_OR_REFERENCE .\n                    BUILD missing\n                    REMOTE conancenter\n                    SETTINGS ${settings})\n\nfind_package(fmt)\n\nadd_executable(main main.cpp)\ntarget_link_libraries(main fmt::fmt)\n</code></pre>\n<p>为了集成一个包，需要额外配置很多的脚本。</p>\n<h4>在 CMake 中使用 Vcpkg</h4>\n<p>在 CMake 中使用 vcpkg 集成包，我们也需要额外注入一个工具链脚本文件。</p>\n<pre><code class=\"language-bash\">cmake -B [build directory] -S . -DCMAKE_TOOLCHAIN_FILE=[path to vcpkg]/scripts/buildsystems/vcpkg.cmake\ncmake --build [build directory]\n</code></pre>\n<p>另外，还有一个问题，就是我们还需要额外自己调用 <code>vcpkg install [packages]</code> 命令，去安装包。</p>\n<p>这其中每一个环节，对于用户来讲都需要额外的探索过程，没法做到真正的一键编译。</p>\n<p>想象下，用户下载了一个集成了 vcpkg 包的 cmake 项目，想要编译通过，除了项目配置，还需要做哪些额外的事情：</p>\n<ol>\n<li>安装 vcpkg</li>\n<li>执行 <code>vcpkg install xxx</code> 安装里面需要的包</li>\n<li>执行 cmake 传递 vcpkg.cmake 脚本给 cmake ，进行工程配置</li>\n</ol>\n<h4>在 CMake 中使用 FetchContent</h4>\n<p>提供了 FetchContent 模式来管理依赖，但似乎是源码拉取，而且必须依赖也是基于 CMake 维护构建的，另外，我们需要对每个依赖项，配置 url, 版本等各种包信息。</p>\n<pre><code class=\"language-cmake\">cmake_minimum_required(VERSION 3.14)\nproject(fetchContent_example CXX)\n\ninclude(FetchContent)\n\nFetchContent_Declare(\n        DocTest\n        GIT_REPOSITORY \"https://github.com/onqtam/doctest\"\n        GIT_TAG \"932a2ca50666138256dae56fbb16db3b1cae133a\"\n)\nFetchContent_Declare(\n        Range-v3\n        GIT_REPOSITORY \"https://github.com/ericniebler/range-v3\"\n        GIT_TAG \"4d6a463bca51bc316f9b565edd94e82388206093\"\n)\n\nFetchContent_MakeAvailable(DocTest Range-v3)\n\nadd_executable(${PROJECT_NAME} src/main.cpp)\ntarget_link_libraries(${PROJECT_NAME} doctest range-v3)\n</code></pre>\n<h4>在 Meson 中使用依赖包</h4>\n<p>Meson 很强大，并且也提供了自带的包管理支持，但是想要在 Meson 中使用其他包管理器，例如 vcpkg/conan 等等同样很繁琐，并没有提供原生支持。</p>\n<h4>在 Xmake 中使用依赖包</h4>\n<p>Xmake 不仅提供了内置的 <a href=\"https://github.com/xmake-io/xmake-repo\" rel=\"nofollow\">xmake-repo</a> 内置的包管理仓库，可以直接集成使用里面的包，还支持以相同的集成方式，去快速集成 vcpkg/conan 等第三方的依赖包。</p>\n<p>集成一个内置依赖包只需要几行配置：</p>\n<pre><code class=\"language-lua\">add_requires(\"zlib 1.2.11\")\ntarget(\"test\")\n    add_files(\"src/*.c\")\n    add_packages(\"zlib\")\n</code></pre>\n<p>集成一个 vcpkg 包，仅仅只需要加上对应的包管理器命名空间，集成方式完全相同：</p>\n<pre><code class=\"language-lua\">add_requires(\"vcpkg::zlib 1.2.11\")\ntarget(\"test\")\n    add_files(\"src/*.c\")\n    add_packages(\"vcpkg::zlib\")\n</code></pre>\n<p>集成一个 conan 包，或者 conda, homebrew, pacman, apt, clib 等第三方包，也只需要改成 <code>conan::zlib</code> 就行了，用户可以随意切换包源。</p>\n<p>另外，Xmake 会自动帮你调用 <code>vcpkg/conan install</code> 安装命令去安装依赖包，然后集成它们，不需要用户做任何其他事情，仅仅只需要执行 <code>xmake</code> 一键编译。</p>\n<img class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://xmake.io/assets/img/index/package_manage.png\"/>\n<h3>C/C++ 包太少？</h3>\n<p>觉得 Xmake 内置的包仓库里面的包太少么？完全没关系，理论上，你可以通过 Xmake 使用整个 C/C++ 生态 90% 的常用依赖包，就是因为 Xmake 可以快速从各种其他包管理器中集成包来使用。</p>\n<p>目前 Xmake 支持的包源有以下这些：</p>\n<ul>\n<li>Official package repository <a href=\"https://github.com/xmake-io/xmake-repo\" rel=\"nofollow\">xmake-repo</a> (tbox &gt;1.6.1)</li>\n<li>Official package manager <a href=\"https://github.com/xmake-io/xrepo\" rel=\"nofollow\">Xrepo</a></li>\n<li><a href=\"https://xmake.io/#/package/remote_package?id=using-self-built-private-package-repository\" rel=\"nofollow\">User-built repositories</a></li>\n<li>Conan (conan::openssl/1.1.1g)</li>\n<li>Conda (conda::libpng 1.3.67)</li>\n<li>Vcpkg (vcpkg:ffmpeg)</li>\n<li>Homebrew/Linuxbrew (brew::pcre2/libpcre2-8)</li>\n<li>Pacman on archlinux/msys2 (pacman::libcurl)</li>\n<li>Apt on ubuntu/debian (apt::zlib1g-dev)</li>\n<li>Clib (clib::clibs/bytes@0.0.4)</li>\n<li>Dub (dub::log 0.4.3)</li>\n<li>Portage on Gentoo/Linux (portage::libhandy)</li>\n<li>Nimble for nimlang (nimble::zip &gt;1.3)</li>\n<li>Cargo for rust (cargo::base64 0.13.0)</li>\n</ul>\n<p>基本上，这些仓库基本已经覆盖了 C/C++ 用户日常所需的所有包。</p>\n<p>作者从写这篇文章开始，统计了下 vcpkg/conan/xmake-repo 仓库的包数量：</p>\n<ul>\n<li>vcpkg: 1859</li>\n<li>conan: 1218</li>\n<li>xmake-repo: 651</li>\n</ul>\n<p>可以看到，目前 Xmake 内置仓库的包数量，已经快要接近 vcpkg/conan 了，也不少了，我们也在不断的收录新的包进来。</p>\n<p>但是这完全没有关系，因为我们可以使用任意包仓库中的包。</p>\n<p>如果在 CMake 中使用 vcpkg ，我们只能使用 1859 个包。\n如果在 CMake 中使用 conan ，我们只能使用 1218 个包。</p>\n<p>而如果在 Xmake 中使用包，我们可以使用 651 (xmake-repo) + vcpkg/conan (1k+) + more (conda, homebrew, pacman, apt, clib ...) 中的包。</p>\n<p>甚至，C/C++ 包不够，其他语言的包也可以拿过来用，例如：Xmake 也支持从 dub/cargo 等 Dlang/Rust 的包管理器中拉取包，给 C/C++ 项目使用。</p>\n<h3>Xmake 内置包管理集成</h3>\n<p>除了接入第三方包管理，我们也更推荐优先使用集成 xmake-repo 内置仓库中提供的包，Xmake 会提供更多特性支持。</p>\n<p>因此，如果用户需要的包还没被收录，可以先尝试提交到 <a href=\"https://github.com/xmake-io/xmake-repo\" rel=\"nofollow\">xmake-repo</a> 进来。</p>\n<p>接下来，我们系统介绍下，集成内置包的一些特性。</p>\n<h4>语义版本设置</h4>\n<p>Xmake 的依赖包管理是完全支持语义版本选择的，例如：\"~1.6.1\"，对于语义版本的具体描述见：<a href=\"https://semver.org/\" rel=\"nofollow\">https://semver.org/</a></p>\n<p>比如下面一些语义版本写法：</p>\n<pre><code class=\"language-lua\">add_requires(\"tbox 1.6.*\", \"pcre 1.3.x\", \"libpng ^1.18\")\nadd_requires(\"libpng ~1.16\", \"zlib 1.1.2 || &gt;=1.2.11 &lt;1.3.0\")\n</code></pre>\n<p>当然，如果我们对当前的依赖包的版本没有特殊要求，那么可以直接这么写：</p>\n<pre><code class=\"language-lua\">add_requires(\"tbox\", \"libpng\", \"zlib\")\n</code></pre>\n<p>这会使用已知的最新版本包，或者是 master 分支的源码编译的包，如果当前包有 git repo 地址，我们也能指定特定分支版本：</p>\n<pre><code class=\"language-lua\">add_requires(\"tbox master\")\nadd_requires(\"tbox dev\")\n</code></pre>\n<p>Xmake 的语义版本支持，在几年前就已经很好的支持，而 vcpkg 也仅仅在最近一年才通过清单模式勉强支持它。</p>\n<p>即使现在，vcpkg 对版本语义的支持也很受限，只能支持 <code>&gt;=1.0</code>, <code>1.0</code> 等几种版本模式，想要选择任意版本的包，比如 <code>&gt;=1.0 &lt;1.5</code> 等复杂版本条件的包，vcpkg 还是无法支持。</p>\n<h4>可选包设置</h4>\n<p>如果指定的依赖包当前平台不支持，或者编译安装失败了，那么 Xmake 会编译报错，这对于有些必须要依赖某些包才能工作的项目，这是合理的。\n但是如果有些包是可选的依赖，即使没有也可以正常编译使用的话，可以设置为可选包：</p>\n<pre><code class=\"language-lua\">add_requires(\"tbox\", {optional = true})\n</code></pre>\n<h4>使用系统库</h4>\n<p>默认的设置，Xmake 会去优先检测系统库是否存在（如果没设置版本要求），如果用户完全不想使用系统库以及第三方包管理提供的库，那么可以设置：</p>\n<pre><code class=\"language-lua\">add_requires(\"tbox\", {system = false})\n</code></pre>\n<p>而如果配置成：</p>\n<pre><code class=\"language-lua\">add_requires(\"tbox\", {system = true})\n</code></pre>\n<p>就是仅仅查找使用系统库，不会去远程下载安装它，这类似于 CMake 的 find_package ，但是集成方式更加简单一致。</p>\n<h4>使用调试版本的包</h4>\n<p>如果我们想同时源码调试依赖包，那么可以设置为使用 debug 版本的包（当然前提是这个包支持 debug 编译）：</p>\n<pre><code class=\"language-lua\">add_requires(\"tbox\", {debug = true})\n</code></pre>\n<h4>启用包的可选特性</h4>\n<p>我们也可以安装带有指定特性的包，比如安装开启了 zlib 和 libx265 的 ffmpeg 包。</p>\n<pre><code class=\"language-lua\">add_requires(\"ffmpeg\", {configs = {zlib = true, libx265 = true}})\n</code></pre>\n<h4>传递额外的编译选项</h4>\n<p>我们也可以传递额外的编译选项给包：</p>\n<pre><code class=\"language-lua\">add_requires(\"spdlog\", {configs = {cxflags = \"-Dxxx\"}})\n</code></pre>\n<h3>独立的包管理命令 Xrepo</h3>\n<p>Xrepo 是一个基于 <a href=\"https://github.com/xmake-io/xmake\" rel=\"nofollow\">Xmake</a> 的跨平台 C/C++ 包管理器。</p>\n<p>它是一个独立于 Xmake 的命令程序，用于辅助用户去管理依赖包，类似 vcpkg/conan ，但相比它们，有额外多了一些实用的特性，我们会简单介绍一些。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://xrepo.xmake.io/assets/img/xrepo.gif\"/></p>\n<h4>多仓库管理</h4>\n<p>除了可以直接从官方仓库：<a href=\"https://github.com/xmake-io/xmake-repo\" rel=\"nofollow\">xmake-repo</a> 检索安装包之外，\n我们还可以添加任意多个自建的仓库，甚至可以完全隔离外网，仅仅在公司内部网络维护私有包的安装集成。</p>\n<p>只需要通过下面的命令，添加上自己的仓库地址：</p>\n<pre><code class=\"language-console\">$ xrepo add-repo myrepo https://github.com/mygroup/myrepo\n</code></pre>\n<h4>基本使用</h4>\n<pre><code class=\"language-console\">$ xrepo install zlib tbox\n</code></pre>\n<h4>安装指定版本包</h4>\n<p>完整支持 Semantic Versioning (语义版本)。</p>\n<pre><code class=\"language-console\">$ xrepo install \"zlib 1.2.x\"\n$ xrepo install \"zlib &gt;=1.2.0\"\n</code></pre>\n<h4>安装指定平台包</h4>\n<pre><code class=\"language-console\">$ xrepo install -p iphoneos -a arm64 zlib\n$ xrepo install -p android [--ndk=/xxx] zlib\n$ xrepo install -p mingw [--mingw=/xxx] zlib\n$ xrepo install -p cross --sdk=/xxx/arm-linux-musleabi-cross zlib\n</code></pre>\n<h4>安装调试版本包</h4>\n<pre><code class=\"language-console\">$ xrepo install -m debug zlib\n</code></pre>\n<h4>安装动态库版本包</h4>\n<pre><code class=\"language-console\">$ xrepo install -k shared zlib\n</code></pre>\n<h4>安装指定配置包</h4>\n<pre><code class=\"language-console\">$ xrepo install -f \"vs_runtime=MD\" zlib\n$ xrepo install -f \"regex=true,thread=true\" boost\n</code></pre>\n<h4>安装第三方包管理器的包</h4>\n<pre><code class=\"language-console\">$ xrepo install brew::zlib\n$ xrepo install vcpkg::zlib\n$ xrepo install conan::zlib/1.2.11\n</code></pre>\n<h4>查看包的库使用信息</h4>\n<pre><code class=\"language-console\">$ xrepo fetch pcre2\n{\n  {\n    linkdirs = {\n      \"/usr/local/Cellar/pcre2/10.33/lib\"\n    },\n    links = {\n      \"pcre2-8\"\n    },\n    defines = {\n      \"PCRE2_CODE_UNIT_WIDTH=8\"\n    },\n    includedirs = \"/usr/local/Cellar/pcre2/10.33/include\"\n  }\n}\n</code></pre>\n<pre><code class=\"language-console\">$ xrepo fetch --ldflags openssl\n-L/Users/ruki/.xmake/packages/o/openssl/1.1.1/d639b7d6e3244216b403b39df5101abf/lib -lcrypto -lssl\n</code></pre>\n<pre><code class=\"language-console\">$ xrepo fetch --cflags openssl\n-I/Users/ruki/.xmake/packages/o/openssl/1.1.1/d639b7d6e3244216b403b39df5101abf/include\n</code></pre>\n<pre><code class=\"language-console\">$ xrepo fetch -p [iphoneos|android] --cflags \"zlib 1.2.x\"\n-I/Users/ruki/.xmake/packages/z/zlib/1.2.11/df72d410e7e14391b1a4375d868a240c/include\n</code></pre>\n<pre><code class=\"language-console\">$ xrepo fetch --cflags --ldflags conan::zlib/1.2.11\n-I/Users/ruki/.conan/data/zlib/1.2.11/_/_/package/f74366f76f700cc6e991285892ad7a23c30e6d47/include -L/Users/ruki/.conan/data/zlib/1.2.11/_/_/package/f74366f76f700cc6e991285892ad7a23c30e6d47/lib -lz\n</code></pre>\n<h4>导入导出安装后的包</h4>\n<p>xrepo 可以快速导出已经安装后的包，包括对应的库文件，头文件等等。</p>\n<pre><code class=\"language-console\">$ xrepo export -o /tmp/output zlib\n</code></pre>\n<p>也可以在其他机器上导入之前导出的安装包，实现包的迁移。</p>\n<pre><code class=\"language-console\">$ xrepo import -i /xxx/packagedir zlib\n</code></pre>\n<h4>搜索支持的包</h4>\n<pre><code class=\"language-console\">$ xrepo search zlib \"pcr*\"\n    zlib:\n      -&gt; zlib: A Massively Spiffy Yet Delicately Unobtrusive Compression Library (in xmake-repo)\n    pcr*:\n      -&gt; pcre2: A Perl Compatible Regular Expressions Library (in xmake-repo)\n      -&gt; pcre: A Perl Compatible Regular Expressions Library (in xmake-repo)\n</code></pre>\n<p>另外，现在还可以从 vcpkg, conan, conda 以及 apt 等第三方包管理器中搜索它们的包，只需要加上对应的包命名空间就行，例如：</p>\n<pre><code class=\"language-console\">$ xrepo search vcpkg::pcre\nThe package names:\n    vcpkg::pcre:\n      -&gt; vcpkg::pcre-8.44#8: Perl Compatible Regular Expressions\n      -&gt; vcpkg::pcre2-10.35#2: PCRE2 is a re-working of the original Perl Compatible Regular Expressions library\n</code></pre>\n<pre><code class=\"language-console\">$ xrepo search conan::openssl\nThe package names:\n    conan::openssl:\n      -&gt; conan::openssl/1.1.1g:\n      -&gt; conan::openssl/1.1.1h:\n</code></pre>\n<h4>包虚拟环境管理</h4>\n<p>我们可以通过在当前目录下，添加 xmake.lua 文件，定制化一些包配置，然后进入特定的包 shell 环境。</p>\n<pre><code class=\"language-lua\">add_requires(\"zlib 1.2.11\")\nadd_requires(\"python 3.x\", \"luajit\")\n</code></pre>\n<pre><code class=\"language-console\">$ xrepo env shell\n&gt; python --version\n&gt; luajit --version\n</code></pre>\n<h3>在 Xmake 中集成第三方构建系统</h3>\n<h4>在 Xmake 中集成 Cmake 项目</h4>\n<p>Xmake 并不打算分裂 C/C++ 生态，它能很好和兼容复用现有 cmake/autoconf/meson 维护的项目，比如可以将一些其他使用 CMake 维护的代码库，直接本地集成进来，参与混合编译。</p>\n<p>也就是说，Xmake 不会强制用户将所有的项目重新 port 到 xmake.lua ，现有的 CMake 项目，一样可以快速集成到 Xmake 项目中去。</p>\n<p>例如，我们有如下项目结构：</p>\n<pre><code>├── foo\n│   ├── CMakeLists.txt\n│   └── src\n│       ├── foo.c\n│       └── foo.h\n├── src\n│   └── main.c\n├── test.lua\n└── xmake.lua\n</code></pre>\n<p>foo 目录下是一个使用 CMake 维护的静态库，而根目录下使用了 Xmake 来维护，我们可以在 xmake.lua 中通过定义 <code>package(\"foo\")</code> 包来描述如何构建 foo 代码库。</p>\n<pre><code class=\"language-lua\">add_rules(\"mode.debug\", \"mode.release\")\n\npackage(\"foo\")\n    add_deps(\"cmake\")\n    set_sourcedir(path.join(os.scriptdir(), \"foo\"))\n    on_install(function (package)\n        local configs = {}\n        table.insert(configs, \"-DCMAKE_BUILD_TYPE=\" .. (package:debug() and \"Debug\" or \"Release\"))\n        table.insert(configs, \"-DBUILD_SHARED_LIBS=\" .. (package:config(\"shared\") and \"ON\" or \"OFF\"))\n        import(\"package.tools.cmake\").install(package, configs)\n    end)\n    on_test(function (package)\n        assert(package:has_cfuncs(\"add\", {includes = \"foo.h\"}))\n    end)\npackage_end()\n\nadd_requires(\"foo\")\n\ntarget(\"demo\")\n    set_kind(\"binary\")\n    add_files(\"src/main.c\")\n    add_packages(\"foo\")\n</code></pre>\n<p>其中，我们通过 <code>set_sourcedir()</code> 来设置 foo 包的代码目录位置，然后通过 import 导入 <code>package.tools.cmake</code> 辅助模块来调用 cmake 构建代码，xmake 会自动获取生成的 libfoo.a 和对应的头文件。</p>\n<p>!&gt; 如果仅仅本地源码集成，我们不需要额外设置 <code>add_urls</code> 和 <code>add_versions</code>。</p>\n<p>关于包的配置描述，详情见：<a href=\"https://xmake.io/#/zh-cn/package/remote_package?id=%e5%8c%85%e6%8f%8f%e8%bf%b0%e8%af%b4%e6%98%8e\" rel=\"nofollow\">包描述说明</a></p>\n<p>定义完包后，我们就可以通过 <code>add_requires(\"foo\")</code> 和 <code>add_packages(\"foo\")</code> 来集成使用它了，就跟集成远程包一样的使用方式。</p>\n<p>另外，<code>on_test</code> 是可选的，如果想要严格检测包的编译安装是否成功，可以在里面做一些测试。</p>\n<p>完整例子见：<a href=\"https://github.com/xmake-io/xmake/tree/master/tests/projects/c/library_with_cmakelists\" rel=\"nofollow\">Library with CMakeLists</a></p>\n<h4>在 Xmake 中集成 Meson 项目</h4>\n<p>Xmake 支持集成更多其他构建系统维护的第三方源码库，比如 Meson ，仅仅只需要导入使用 <code>package.tools.meson</code> 辅助构建模块调用 meson 来构建它们。</p>\n<p>例如，我们从 xmake-repo 仓库中挑选一个使用 meson 构建的包作为例子：</p>\n<pre><code class=\"language-lua\">package(\"harfbuzz\")\n    set_sourcedir(path.join(os.scriptdir(), \"3rd/harfbuzz\"))\n    add_deps(\"meson\")\n    on_install(function (package)\n        local configs = {\"-Dtests=disabled\", \"-Ddocs=disabled\", \"-Dbenchmark=disabled\", \"-Dcairo=disabled\", \"-Dfontconfig=disabled\", \"-Dglib=disabled\", \"-Dgobject=disabled\"}\n        table.insert(configs, \"-Ddefault_library=\" .. (package:config(\"shared\") and \"shared\" or \"static\"))\n        import(\"package.tools.meson\").install(package, configs)\n    end)\n</code></pre>\n<h4>在 Xmake 中集成 Autoconf 项目</h4>\n<p>我们也可以使用 <code>package.tools.autoconf</code> 来本地集成带有 autoconf 维护的第三方代码库。</p>\n<pre><code class=\"language-lua\">package(\"libev\")\n    set_sourcedir(path.join(os.scriptdir(), \"3rd/libev\"))\n    on_install(function (package)\n        import(\"package.tools.autoconf\").install(package)\n    end)\n</code></pre>\n<p><code>package.tools.autoconf</code> 和 <code>package.tools.cmake</code> 模块都是可以支持 mingw/cross/iphoneos/android 等交叉编译平台和工具链的，xmake 会自动传递对应的工具链进去，用户不需要做任何其他事情。</p>\n<h4>在 Xmake 中集成 Gn 项目</h4>\n<p>我们也可以使用 <code><a href=\"http://package.tools.gn\" rel=\"nofollow\">package.tools.gn</a></code> 来本地集成带有 GN 维护的第三方代码库。</p>\n<pre><code class=\"language-lua\">package(\"skia\")\n    set_sourcedir(path.join(os.scriptdir(), \"3rd/skia\"))\n    add_deps(\"gn\", \"ninja\")\n    on_install(function (package)\n        import(\"package.tools.gn\").install(package)\n    end)\n</code></pre>\n<p>这里有完整的脚本例子：<a href=\"https://github.com/xmake-io/xmake-repo/blob/master/packages/s/skia/xmake.lua\" rel=\"nofollow\">Skia with GN</a></p>\n<h3>在 Xmake 中查找使用 CMake/C++ 包</h3>\n<p>现在 CMake 已经是事实上的标准，所以 CMake 提供的 find_package 已经可以查找大量的系统库和模块，我们也可以完全复用 CMake 的这部分生态来扩充 xmake 对包的集成。</p>\n<p>只需要像集成 vcpkg/conan 包那样，将包命名空间改成 <code>cmake::</code> 就可以了。</p>\n<pre><code class=\"language-lua\">add_requires(\"cmake::ZLIB\", {alias = \"zlib\", system = true})\ntarget(\"test\")\n    set_kind(\"binary\")\n    add_files(\"src/*.c\")\n    add_packages(\"zlib\")\n</code></pre>\n<p>我们指定 <code>system = true</code> 告诉 xmake 强制从系统中调用 cmake 查找包，如果找不到，不再走安装逻辑，因为 cmake 没有提供类似 vcpkg/conan 等包管理器的安装功能，只提供了包查找特性。</p>\n<h4>指定版本</h4>\n<pre><code class=\"language-lua\">add_requires(\"cmake::OpenCV 4.1.1\", {system = true})\n</code></pre>\n<h4>指定组件</h4>\n<pre><code class=\"language-lua\">add_requires(\"cmake::Boost\", {system = true, configs = {components = {\"regex\", \"system\"}})}\n</code></pre>\n<h4>预设开关</h4>\n<pre><code class=\"language-lua\">add_requires(\"cmake::Boost\", {system = true, configs = {components = {\"regex\", \"system\"},\n                                             presets = {Boost_USE_STATIC_LIB = true}}})\n</code></pre>\n<p>相当于内部调用 find_package 查找包之前，在 CMakeLists.txt 中预定义一些配置，控制 find_package 的查找策略和状态。</p>\n<pre><code>set(Boost_USE_STATIC_LIB ON) -- will be used in FindBoost.cmake\nfind_package(Boost REQUIRED COMPONENTS regex system)\n</code></pre>\n<h4>设置环境变量</h4>\n<pre><code class=\"language-lua\">add_requires(\"cmake::OpenCV\", {system = true, configs = {envs = {CMAKE_PREFIX_PATH = \"xxx\"}}})\n</code></pre>\n<h4>指定自定义 FindFoo.cmake 模块脚本目录</h4>\n<p>mydir/cmake_modules/FindFoo.cmake</p>\n<pre><code class=\"language-lua\">add_requires(\"cmake::Foo\", {system = true, configs = {moduledirs = \"mydir/cmake_modules\"}})\n</code></pre>\n<h3>在 Cmake 中集成 Xrepo 依赖包</h3>\n<p>除了可以在 Xmake 中集成 CMake 项目，我们也可以在 CMake 中直接集成 Xmake/Xrepo 提供的包，只需要使用 <a href=\"https://github.com/xmake-io/xrepo-cmake\" rel=\"nofollow\">xrepo-cmake</a> 提供的 CMake Wrapper 。</p>\n<p>例如：</p>\n<pre><code class=\"language-cmake\">cmake_minimum_required(VERSION 3.13.0)\nproject(foo)\n\n# Download xrepo.cmake if not exists in build directory.\nif(NOT EXISTS \"${CMAKE_BINARY_DIR}/xrepo.cmake\")\n    message(STATUS \"Downloading xrepo.cmake from https://github.com/xmake-io/xrepo-cmake/\")\n    # mirror https://cdn.jsdelivr.net/gh/xmake-io/xrepo-cmake@main/xrepo.cmake\n    file(DOWNLOAD \"https://raw.githubusercontent.com/xmake-io/xrepo-cmake/main/xrepo.cmake\"\n                  \"${CMAKE_BINARY_DIR}/xrepo.cmake\"\n                  TLS_VERIFY ON)\nendif()\n\n# Include xrepo.cmake so we can use xrepo_package function.\ninclude(${CMAKE_BINARY_DIR}/xrepo.cmake)\n\nxrepo_package(\"zlib\")\n\nadd_executable(example-bin \"\")\ntarget_sources(example-bin PRIVATE\n    src/main.cpp\n)\nxrepo_target_packages(example-bin zlib)\n</code></pre>\n<h4>添加带有配置的包</h4>\n<p>我们，也可以跟在 Xmake 中一样，定制包的可选特性。</p>\n<pre><code class=\"language-cmake\">xrepo_package(\"gflags 2.2.2\" CONFIGS \"shared=true,mt=true\")\n\nadd_executable(example-bin \"\")\ntarget_sources(example-bin PRIVATE\n    src/main.cpp\n)\nxrepo_target_packages(example-bin gflags)\n</code></pre>\n<h4>使用来自第三个存储库的包</h4>\n<p>除了从 Xmake 官方维护的存储库安装软件包之外，我们也可以直接在 CMake 中使用它来安装来自第三方仓库的包，只需将仓库名称添加为命名空间即可。</p>\n<p>例如：<code>vcpkg::zlib</code>, <code>conan::pcre2</code>。</p>\n<pre><code class=\"language-cmake\">xrepo_package(\"conan::gflags/2.2.2\")\nxrepo_package(\"conda::gflags 2.2.2\")\nxrepo_package(\"vcpkg::gflags\")\nxrepo_package(\"brew::gflags\")\n</code></pre>\n<p>通过这种方式，我们将在 CMake 中集成使用 vcpkg/conan 包的方式进行了统一，并且额外提供了自动包安装特性，以及对 homebrew/conda 等其他包仓库的支持。</p>\n","last_modified":1647135929,"replies":14,"id":839983},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1629391393","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1629391393","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":182439,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1629391393","stars":3435,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"id":92597,"username":"HFX3389","url":"https://www.v2ex.com/u/HFX3389","website":"","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/5341/067b/92597_mini.png?m=1647174251","avatar_normal":"https://cdn.v2ex.com/avatar/5341/067b/92597_normal.png?m=1647174251","avatar_large":"https://cdn.v2ex.com/avatar/5341/067b/92597_large.png?m=1647174251","created":1421650706,"last_modified":1647174251},"last_reply_by":"Xs0ul","last_touched":1647183428,"title":"对于《新冠病毒抗原检测应用方案(试行)》的发布我有一个疑问","url":"https://www.v2ex.com/t/840078","created":1647176241,"deleted":1,"content":"目前来说病例开始激增，3 月 12 日 0—24 时，31 个省（自治区、直辖市）和新疆生产建设兵团报告新增确诊病例 1938 例。\r\n\r\n而最近的《新冠病毒抗原检测应用方案(试行)》的发布后，某些平台已经有“抗原检测试剂”贩卖了\r\n\r\n[新冠抗原检测产品线上开卖！价格 30 元+，自测结果、医疗垃圾如何处理？]( https://news.sina.cn/2022-03-13/detail-imcwipih8272916.d.html)\r\n\r\n![]( https://n.sinaimg.cn/sinakd20220313s/216/w700h1116/20220313/1eae-1b07bae762adc8c3433896eebeef5709.jpg)\r\n\r\n> 今日，国务院应对新型冠状病毒肺炎疫情联防联控机制综合组印发《新冠病毒抗原检测应用方案（试行）》。其中提到抗原检测适用人群包括三类，一是到基层医疗卫生机构就诊，伴有呼吸道、发热等症状且出现症状 5 天以内的人员；二是隔离观察人员，包括居家隔离观察、密接和次密接、入境隔离观察、封控区和管控区内的人员；三是有抗原自我检测需求的社区居民。\r\n\r\n> 《方案》指出，社区居民有自我检测需求的，可通过零售药店、网络销售平台等渠道，自行购买抗原检测试剂进行自测。\r\n\r\n> 另外，《方案》对检测结果的处置也有规定，对于抗原检测阳性的，不论是否有呼吸道、发热等症状，居民应当立即向所在社区（村镇）报告，由社区（村镇）联系急救中心按照新冠肺炎疫情相关人员转运工作指南，将居民转运至设置发热门诊的医疗机构，进行核酸检测。\r\n\r\n> 对于抗原检测阴性的，无症状的居民可密切观察，需要时再进行抗原检测或核酸检测；有症状的居民，建议尽快前往设置发热门诊的医疗机构就诊，进行核酸检测；如不便就诊，则应当居家自我隔离，避免外出活动，连续 5 天每天进行一次抗原自测。\r\n\r\n----\r\n\r\n有没有这种可能，以后会**用抗原检测居家检测替代大规模核酸检测**，社区发公告让本社区居民自购自测抗原然后社区网格员上门收集数据或居民自己上报数据，如果没有测抗原则使用行政手段如禁止进入小区或禁止进入办公区域等来让居民自购自测抗原？毕竟“三是有抗原自我检测需求的社区居民”可以是发生疫情地区的每一个居民。\r\n\r\n甚至于如果自我抗原检测五次为阴性但身体不适有新冠十大症状却没有去做核酸（免费或自费）的按照《传染病防治法》的相关条例处理？\r\n\r\n由于目前各地的疫情新增严重动态清零，各地的大规模核酸检测也是免费的，如果用“抗原检测居家检测”的话是[一片巨大的千亿级市场]( https://m.thepaper.cn/newsDetail_forward_17097391)，可以增加税收和减缓由于大规模核酸检测的医保统筹基金和财政资金压力等等\r\n\r\n疑问的来源：\r\n\r\n1. [如何看待 3 月 12 日全国新增本土确诊 1807 + 无症状 1315 ？这波疫情为什么这么严重？]( https://www.zhihu.com/question/521640139/answer/2387008323)\r\n\r\n2. 层层加码的防疫措施","content_rendered":"<p>目前来说病例开始激增，3 月 12 日 0—24 时，31 个省（自治区、直辖市）和新疆生产建设兵团报告新增确诊病例 1938 例。</p>\n<p>而最近的《新冠病毒抗原检测应用方案(试行)》的发布后，某些平台已经有“抗原检测试剂”贩卖了</p>\n<p><a href=\"https://news.sina.cn/2022-03-13/detail-imcwipih8272916.d.html\" rel=\"nofollow\">新冠抗原检测产品线上开卖！价格 30 元+，自测结果、医疗垃圾如何处理？</a></p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://n.sinaimg.cn/sinakd20220313s/216/w700h1116/20220313/1eae-1b07bae762adc8c3433896eebeef5709.jpg\"/></p>\n<blockquote>\n<p>今日，国务院应对新型冠状病毒肺炎疫情联防联控机制综合组印发《新冠病毒抗原检测应用方案（试行）》。其中提到抗原检测适用人群包括三类，一是到基层医疗卫生机构就诊，伴有呼吸道、发热等症状且出现症状 5 天以内的人员；二是隔离观察人员，包括居家隔离观察、密接和次密接、入境隔离观察、封控区和管控区内的人员；三是有抗原自我检测需求的社区居民。</p>\n</blockquote>\n<blockquote>\n<p>《方案》指出，社区居民有自我检测需求的，可通过零售药店、网络销售平台等渠道，自行购买抗原检测试剂进行自测。</p>\n</blockquote>\n<blockquote>\n<p>另外，《方案》对检测结果的处置也有规定，对于抗原检测阳性的，不论是否有呼吸道、发热等症状，居民应当立即向所在社区（村镇）报告，由社区（村镇）联系急救中心按照新冠肺炎疫情相关人员转运工作指南，将居民转运至设置发热门诊的医疗机构，进行核酸检测。</p>\n</blockquote>\n<blockquote>\n<p>对于抗原检测阴性的，无症状的居民可密切观察，需要时再进行抗原检测或核酸检测；有症状的居民，建议尽快前往设置发热门诊的医疗机构就诊，进行核酸检测；如不便就诊，则应当居家自我隔离，避免外出活动，连续 5 天每天进行一次抗原自测。</p>\n</blockquote>\n<hr/>\n<p>有没有这种可能，以后会<strong>用抗原检测居家检测替代大规模核酸检测</strong>，社区发公告让本社区居民自购自测抗原然后社区网格员上门收集数据或居民自己上报数据，如果没有测抗原则使用行政手段如禁止进入小区或禁止进入办公区域等来让居民自购自测抗原？毕竟“三是有抗原自我检测需求的社区居民”可以是发生疫情地区的每一个居民。</p>\n<p>甚至于如果自我抗原检测五次为阴性但身体不适有新冠十大症状却没有去做核酸（免费或自费）的按照《传染病防治法》的相关条例处理？</p>\n<p>由于目前各地的疫情新增严重动态清零，各地的大规模核酸检测也是免费的，如果用“抗原检测居家检测”的话是<a href=\"https://m.thepaper.cn/newsDetail_forward_17097391\" rel=\"nofollow\">一片巨大的千亿级市场</a>，可以增加税收和减缓由于大规模核酸检测的医保统筹基金和财政资金压力等等</p>\n<p>疑问的来源：</p>\n<ol>\n<li>\n<p><a href=\"https://www.zhihu.com/question/521640139/answer/2387008323\" rel=\"nofollow\">如何看待 3 月 12 日全国新增本土确诊 1807 + 无症状 1315 ？这波疫情为什么这么严重？</a></p>\n</li>\n<li>\n<p>层层加码的防疫措施</p>\n</li>\n</ol>\n","last_modified":1647176795,"replies":13,"id":840078},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1630643913","name":"apple","avatar_normal":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1630643913","title":"Apple","url":"https://www.v2ex.com/go/apple","topics":17838,"footer":"","header":"设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。","title_alternative":"Apple","avatar_mini":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1630643913","stars":2093,"aliases":[],"root":false,"id":184,"parent_node_name":"hardware"},"member":{"id":134395,"username":"lxr760","url":"https://www.v2ex.com/u/lxr760","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/gravatar/24281d9c6caa29d3d3c47ffc2f2e86a8?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/24281d9c6caa29d3d3c47ffc2f2e86a8?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/24281d9c6caa29d3d3c47ffc2f2e86a8?s=73&d=retro","created":1440228118,"last_modified":1646567148},"last_reply_by":"jones2000","last_touched":1647140562,"title":"买苹果的设备从来不买国行，有谁跟我一样","url":"https://www.v2ex.com/t/840055","created":1647169362,"deleted":0,"content":"先说下我的苹果设备：\r\n\r\nMacBook Pro 2009\r\niPhone 4s/5s/6 Plus/XR/SE2/12/13\r\n\r\n\r\n\r\n刚开始买手机什么的托朋友从国外带。4s 5s 6p 有日班 美版 澳洲版。\r\nxr se2 12 13 都是淘宝货，买的美版或港版。\r\n\r\n\r\n\r\n说实话，不买国行最大因素还是价格，毕竟水货便宜，后来发现国行软件或者硬件上有阉割，就更不喜欢买国行了。以前手机还不是全网通的时候，国行 3 家运营商可能有 4 5 个版本，硬件支持但是软件人为做限制，这个买过 5s 的人应该都印象深刻。\r\n\r\n软件层面上，国行不能 faeettime audio 之类。虽说这东西可能 1 个月都不一定用 1 次，但是我不用但是我不能没有啊。\r\n\r\n\r\n所以当你能用更优惠的价格买到不是阉割的机型时，会觉得这样更香。\r\n\r\n\r\n\r\n关于保修：肯定很多人说你省了几个小钱，但是手机没有保修了。这里说下保修，我假定不管上面什么设备都按 3 年保修算。我在 3 年里面，没有用坏过任何设备，而且也不是特意爱护那种。手机几乎三天两头摔地上。6p 摔过一次屏幕，但这个情况，即便是国行保内，人为损坏也不保。除非你额外花钱买 care\r\n\r\n\r\n\r\n\r\n哈哈，不知道 V2EX 上有没有我这种喜欢追求性价比的    哈哈哈","content_rendered":"<p>先说下我的苹果设备：</p>\n<p>MacBook Pro 2009\niPhone 4s/5s/6 Plus/XR/SE2/12/13</p>\n<p>刚开始买手机什么的托朋友从国外带。4s 5s 6p 有日班 美版 澳洲版。\nxr se2 12 13 都是淘宝货，买的美版或港版。</p>\n<p>说实话，不买国行最大因素还是价格，毕竟水货便宜，后来发现国行软件或者硬件上有阉割，就更不喜欢买国行了。以前手机还不是全网通的时候，国行 3 家运营商可能有 4 5 个版本，硬件支持但是软件人为做限制，这个买过 5s 的人应该都印象深刻。</p>\n<p>软件层面上，国行不能 faeettime audio 之类。虽说这东西可能 1 个月都不一定用 1 次，但是我不用但是我不能没有啊。</p>\n<p>所以当你能用更优惠的价格买到不是阉割的机型时，会觉得这样更香。</p>\n<p>关于保修：肯定很多人说你省了几个小钱，但是手机没有保修了。这里说下保修，我假定不管上面什么设备都按 3 年保修算。我在 3 年里面，没有用坏过任何设备，而且也不是特意爱护那种。手机几乎三天两头摔地上。6p 摔过一次屏幕，但这个情况，即便是国行保内，人为损坏也不保。除非你额外花钱买 care</p>\n<p>哈哈，不知道 V2EX 上有没有我这种喜欢追求性价比的    哈哈哈</p>\n","last_modified":1647169362,"replies":13,"id":840055},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c74d/97b0/16_large.png?m=1628872984","name":"share","avatar_normal":"https://cdn.v2ex.com/navatar/c74d/97b0/16_normal.png?m=1628872984","title":"分享发现","url":"https://www.v2ex.com/go/share","topics":35151,"footer":"","header":"分享你看到的好玩的，有信息量的，欢迎从这里获取灵感。","title_alternative":"Share","avatar_mini":"https://cdn.v2ex.com/navatar/c74d/97b0/16_mini.png?m=1628872984","stars":4752,"aliases":[],"root":false,"id":16,"parent_node_name":"v2ex"},"member":{"id":487715,"username":"goodhellonice","url":"https://www.v2ex.com/u/goodhellonice","website":"","twitter":null,"psn":null,"github":null,"btc":null,"location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/avatar/a66b/6c3e/487715_mini.png?m=1615460716","avatar_normal":"https://cdn.v2ex.com/avatar/a66b/6c3e/487715_normal.png?m=1615460716","avatar_large":"https://cdn.v2ex.com/avatar/a66b/6c3e/487715_large.png?m=1615460716","created":1588595775,"last_modified":1615460716},"last_reply_by":"beholder","last_touched":1647178659,"title":"彩云天气，原来多好的一个 app，现在真是让人一言难尽……（记得产品经理在 v 站出没过","url":"https://www.v2ex.com/t/840040","created":1647162295,"deleted":0,"content":"1. pro 用户不如🐕系列，免费版本竟然更新的更快\r\n2. 会员体系是学的迅雷么？付费了再付费？\r\n3. 广告，广告，广告\r\n4. 越来越不准...","content_rendered":"<ol>\n<li>pro 用户不如🐕系列，免费版本竟然更新的更快</li>\n<li>会员体系是学的迅雷么？付费了再付费？</li>\n<li>广告，广告，广告</li>\n<li>越来越不准...</li>\n</ol>\n","last_modified":1647162295,"replies":13,"id":840040},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/4ea0/6fbc/770_large.png?m=1646757548","name":"career","avatar_normal":"https://cdn.v2ex.com/navatar/4ea0/6fbc/770_normal.png?m=1646757548","title":"职场话题","url":"https://www.v2ex.com/go/career","topics":12819,"footer":"","header":"这里，我们聊聊那些工作中遇到的开心和不开心的事。","title_alternative":"Career","avatar_mini":"https://cdn.v2ex.com/navatar/4ea0/6fbc/770_mini.png?m=1646757548","stars":2288,"aliases":[],"root":false,"id":770,"parent_node_name":"work"},"member":{"id":236383,"username":"equationl","url":"https://www.v2ex.com/u/equationl","website":null,"twitter":null,"psn":null,"github":null,"btc":null,"location":null,"tagline":null,"bio":null,"avatar_mini":"https://cdn.v2ex.com/avatar/d6cd/9e63/236383_mini.png?m=1647172064","avatar_normal":"https://cdn.v2ex.com/avatar/d6cd/9e63/236383_normal.png?m=1647172064","avatar_large":"https://cdn.v2ex.com/avatar/d6cd/9e63/236383_large.png?m=1647172064","created":1497959792,"last_modified":1647172064},"last_reply_by":"equationl","last_touched":1647176687,"title":"如果室友在公司宿舍长期留宿外人，怎么解决？","url":"https://www.v2ex.com/t/840066","created":1647172261,"deleted":0,"content":"想问问广大 V 友有没有什么好的解决方法？\r\n\r\n事件背景：公司安排的集体宿舍是四人间，但是目前只住了加上我总共三个人。另外两个人是同学，比我早来这家公司一个月，他们是生产，我是研发。\r\n半个月前他俩叫来一个人(应该是他们同学)，住在了我们宿舍。\r\n开始我以为是来应聘我们公司的，后来发现并不是，甚至都不是来暂住找工作的，就是纯粹的蹭住。来这宿舍后基本每天都是宅在宿舍啥也不干。\r\n如果只是这样也没啥，他住他的不影响我就行。\r\n但是，越往后越离谱，他似乎是准备常住下来了，三天两头往宿舍搬他的家当过来，搞的本来就不大的宿舍越来越挤，而且他还在宿舍养了一窝兔子，搞的满宿舍一股屎味。更离谱的是，他每个周五都带他女朋友来宿舍过夜！要知道这个宿舍，没有任何隔离，就是类似大学宿舍那种一个房间！他不尴尬我都觉得尴尬！\r\n另外，宿舍水电是均摊的，这点我一直是吃亏的(因为我家说远也不远的，所以我周末都回家，平时回宿舍就是睡觉，而他们是一直住宿舍，还在宿舍自己炒菜做饭啥的)，但是我都没说啥，现在他们又加一个人进来，却不分摊水电，我直接亏爆。\r\n\r\n目前我想到的两个解决方案都在截图里了，\r\n现在看来，无论怎么弄我都是吃亏，无非是金钱上吃亏还是精神上吃亏罢了。\r\n\r\n但是真的就没有更好的解决方法了嘛？\r\n\r\n\r\nps: 我极度内向，还有点社恐，和这两个室友也几乎没有什么交流。\r\n我最担心的是撕破脸后被针对，而他们都是老油条，我这种社恐肯定是顶不住他们的针对的。\r\n\r\n\r\n![-5c0c48e43064924a.png]( https://s2.loli.net/2022/03/13/qrQBZe1jlKCtDxf.png)","content_rendered":"<p>想问问广大 V 友有没有什么好的解决方法？</p>\n<p>事件背景：公司安排的集体宿舍是四人间，但是目前只住了加上我总共三个人。另外两个人是同学，比我早来这家公司一个月，他们是生产，我是研发。\n半个月前他俩叫来一个人(应该是他们同学)，住在了我们宿舍。\n开始我以为是来应聘我们公司的，后来发现并不是，甚至都不是来暂住找工作的，就是纯粹的蹭住。来这宿舍后基本每天都是宅在宿舍啥也不干。\n如果只是这样也没啥，他住他的不影响我就行。\n但是，越往后越离谱，他似乎是准备常住下来了，三天两头往宿舍搬他的家当过来，搞的本来就不大的宿舍越来越挤，而且他还在宿舍养了一窝兔子，搞的满宿舍一股屎味。更离谱的是，他每个周五都带他女朋友来宿舍过夜！要知道这个宿舍，没有任何隔离，就是类似大学宿舍那种一个房间！他不尴尬我都觉得尴尬！\n另外，宿舍水电是均摊的，这点我一直是吃亏的(因为我家说远也不远的，所以我周末都回家，平时回宿舍就是睡觉，而他们是一直住宿舍，还在宿舍自己炒菜做饭啥的)，但是我都没说啥，现在他们又加一个人进来，却不分摊水电，我直接亏爆。</p>\n<p>目前我想到的两个解决方案都在截图里了，\n现在看来，无论怎么弄我都是吃亏，无非是金钱上吃亏还是精神上吃亏罢了。</p>\n<p>但是真的就没有更好的解决方法了嘛？</p>\n<p>ps: 我极度内向，还有点社恐，和这两个室友也几乎没有什么交流。\n我最担心的是撕破脸后被针对，而他们都是老油条，我这种社恐肯定是顶不住他们的针对的。</p>\n<p><img alt=\"-5c0c48e43064924a.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/13/qrQBZe1jlKCtDxf.png\"/></p>\n","last_modified":1647172261,"replies":12,"id":840066},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1629391393","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1629391393","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":182439,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1629391393","stars":3435,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"id":274090,"username":"Danswerme","url":"https://www.v2ex.com/u/Danswerme","website":"","twitter":"","psn":"","github":"","btc":"","location":"","tagline":"","bio":"","avatar_mini":"https://cdn.v2ex.com/gravatar/df27513dd2f5acd408396a5df63b61a6?s=24&d=retro","avatar_normal":"https://cdn.v2ex.com/gravatar/df27513dd2f5acd408396a5df63b61a6?s=48&d=retro","avatar_large":"https://cdn.v2ex.com/gravatar/df27513dd2f5acd408396a5df63b61a6?s=73&d=retro","created":1513081062,"last_modified":1642302940},"last_reply_by":"Danswerme","last_touched":1647177836,"title":"黑苹果上面的 PS 打开比较大的 psd 文件比较卡顿是什么原因？","url":"https://www.v2ex.com/t/840059","created":1647170212,"deleted":0,"content":"配置：i5-9600KF / RX 5500XT / 64G 内存\r\n\r\n同一台电脑，PS 版本都是 2021 ，打开一个 600M 的 psd 文件，在 macOS 下面非常卡，缩放一下卡三四秒，导个图标为 png 出来更是得卡将近十秒；    在 Win10 下缩放和切换图层虽然有卡顿，但是不严重。 这是我黑苹果哪里没配置好还是什么别的原因呢？","content_rendered":"<p>配置：i5-9600KF / RX 5500XT / 64G 内存</p>\n<p>同一台电脑，PS 版本都是 2021 ，打开一个 600M 的 psd 文件，在 macOS 下面非常卡，缩放一下卡三四秒，导个图标为 png 出来更是得卡将近十秒；    在 Win10 下缩放和切换图层虽然有卡顿，但是不严重。 这是我黑苹果哪里没配置好还是什么别的原因呢？</p>\n","last_modified":1647170212,"replies":12,"id":840059}]